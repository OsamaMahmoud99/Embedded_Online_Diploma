
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000af0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c38  08000c38  00010c40  2**0
                  CONTENTS
  4 .ARM          00000000  08000c38  08000c38  00010c40  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c38  08000c40  00010c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000c40  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000c40  00020060  2**0
                  ALLOC
 11 .ARM.attributes 0000002d  00000000  00000000  00010c40  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f48  00000000  00000000  00010c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000961  00000000  00000000  00014bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006ec  00000000  00000000  00015516  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  00015c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00015db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000dd5  00000000  00000000  00015f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000232f  00000000  00000000  00016ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009ce6  00000000  00000000  00019014  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022cfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004b4  00000000  00000000  00022d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c06      	ldr	r4, [pc, #24]	; (800014c <__do_global_dtors_aux+0x1c>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	2b00      	cmp	r3, #0
 8000138:	d107      	bne.n	800014a <__do_global_dtors_aux+0x1a>
 800013a:	4b05      	ldr	r3, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013c:	2b00      	cmp	r3, #0
 800013e:	d002      	beq.n	8000146 <__do_global_dtors_aux+0x16>
 8000140:	4804      	ldr	r0, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x24>)
 8000142:	f3af 8000 	nop.w
 8000146:	2301      	movs	r3, #1
 8000148:	7023      	strb	r3, [r4, #0]
 800014a:	bd10      	pop	{r4, pc}
 800014c:	20000000 	.word	0x20000000
 8000150:	00000000 	.word	0x00000000
 8000154:	08000c08 	.word	0x08000c08

08000158 <frame_dummy>:
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <frame_dummy+0x14>)
 800015a:	b510      	push	{r4, lr}
 800015c:	2b00      	cmp	r3, #0
 800015e:	d003      	beq.n	8000168 <frame_dummy+0x10>
 8000160:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x18>)
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <frame_dummy+0x1c>)
 8000164:	f3af 8000 	nop.w
 8000168:	bd10      	pop	{r4, pc}
 800016a:	46c0      	nop			; (mov r8, r8)
 800016c:	00000000 	.word	0x00000000
 8000170:	20000004 	.word	0x20000004
 8000174:	08000c08 	.word	0x08000c08

08000178 <__udivsi3>:
 8000178:	2200      	movs	r2, #0
 800017a:	0843      	lsrs	r3, r0, #1
 800017c:	428b      	cmp	r3, r1
 800017e:	d374      	bcc.n	800026a <__udivsi3+0xf2>
 8000180:	0903      	lsrs	r3, r0, #4
 8000182:	428b      	cmp	r3, r1
 8000184:	d35f      	bcc.n	8000246 <__udivsi3+0xce>
 8000186:	0a03      	lsrs	r3, r0, #8
 8000188:	428b      	cmp	r3, r1
 800018a:	d344      	bcc.n	8000216 <__udivsi3+0x9e>
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d328      	bcc.n	80001e4 <__udivsi3+0x6c>
 8000192:	0c03      	lsrs	r3, r0, #16
 8000194:	428b      	cmp	r3, r1
 8000196:	d30d      	bcc.n	80001b4 <__udivsi3+0x3c>
 8000198:	22ff      	movs	r2, #255	; 0xff
 800019a:	0209      	lsls	r1, r1, #8
 800019c:	ba12      	rev	r2, r2
 800019e:	0c03      	lsrs	r3, r0, #16
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d302      	bcc.n	80001aa <__udivsi3+0x32>
 80001a4:	1212      	asrs	r2, r2, #8
 80001a6:	0209      	lsls	r1, r1, #8
 80001a8:	d065      	beq.n	8000276 <__udivsi3+0xfe>
 80001aa:	0b03      	lsrs	r3, r0, #12
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d319      	bcc.n	80001e4 <__udivsi3+0x6c>
 80001b0:	e000      	b.n	80001b4 <__udivsi3+0x3c>
 80001b2:	0a09      	lsrs	r1, r1, #8
 80001b4:	0bc3      	lsrs	r3, r0, #15
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x46>
 80001ba:	03cb      	lsls	r3, r1, #15
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0b83      	lsrs	r3, r0, #14
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x52>
 80001c6:	038b      	lsls	r3, r1, #14
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0b43      	lsrs	r3, r0, #13
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x5e>
 80001d2:	034b      	lsls	r3, r1, #13
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0b03      	lsrs	r3, r0, #12
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x6a>
 80001de:	030b      	lsls	r3, r1, #12
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0ac3      	lsrs	r3, r0, #11
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x76>
 80001ea:	02cb      	lsls	r3, r1, #11
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0a83      	lsrs	r3, r0, #10
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x82>
 80001f6:	028b      	lsls	r3, r1, #10
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0a43      	lsrs	r3, r0, #9
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x8e>
 8000202:	024b      	lsls	r3, r1, #9
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0a03      	lsrs	r3, r0, #8
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x9a>
 800020e:	020b      	lsls	r3, r1, #8
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	d2cd      	bcs.n	80001b2 <__udivsi3+0x3a>
 8000216:	09c3      	lsrs	r3, r0, #7
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xa8>
 800021c:	01cb      	lsls	r3, r1, #7
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0983      	lsrs	r3, r0, #6
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xb4>
 8000228:	018b      	lsls	r3, r1, #6
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0943      	lsrs	r3, r0, #5
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xc0>
 8000234:	014b      	lsls	r3, r1, #5
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xcc>
 8000240:	010b      	lsls	r3, r1, #4
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	08c3      	lsrs	r3, r0, #3
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xd8>
 800024c:	00cb      	lsls	r3, r1, #3
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0883      	lsrs	r3, r0, #2
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xe4>
 8000258:	008b      	lsls	r3, r1, #2
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0843      	lsrs	r3, r0, #1
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xf0>
 8000264:	004b      	lsls	r3, r1, #1
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	1a41      	subs	r1, r0, r1
 800026c:	d200      	bcs.n	8000270 <__udivsi3+0xf8>
 800026e:	4601      	mov	r1, r0
 8000270:	4152      	adcs	r2, r2
 8000272:	4610      	mov	r0, r2
 8000274:	4770      	bx	lr
 8000276:	e7ff      	b.n	8000278 <__udivsi3+0x100>
 8000278:	b501      	push	{r0, lr}
 800027a:	2000      	movs	r0, #0
 800027c:	f000 f806 	bl	800028c <__aeabi_idiv0>
 8000280:	bd02      	pop	{r1, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_uidivmod>:
 8000284:	2900      	cmp	r1, #0
 8000286:	d0f7      	beq.n	8000278 <__udivsi3+0x100>
 8000288:	e776      	b.n	8000178 <__udivsi3>
 800028a:	4770      	bx	lr

0800028c <__aeabi_idiv0>:
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <EXTI0_IRQHandler>:
 *                            ISR Functions Definitions
 * ==================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<0)  { EXTI->PR |= 1<<0  ; GP_IRQ_CallBack[0]()  ; }
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <EXTI0_IRQHandler+0x28>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	2201      	movs	r2, #1
 800029a:	4013      	ands	r3, r2
 800029c:	d008      	beq.n	80002b0 <EXTI0_IRQHandler+0x20>
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <EXTI0_IRQHandler+0x28>)
 80002a0:	695a      	ldr	r2, [r3, #20]
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI0_IRQHandler+0x28>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	430a      	orrs	r2, r1
 80002a8:	615a      	str	r2, [r3, #20]
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <EXTI0_IRQHandler+0x2c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4798      	blx	r3
}
 80002b0:	46c0      	nop			; (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000020 	.word	0x20000020

080002c0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<1)  { EXTI->PR |= 1<<1  ; GP_IRQ_CallBack[1]()  ; }
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <EXTI1_IRQHandler+0x28>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	2202      	movs	r2, #2
 80002ca:	4013      	ands	r3, r2
 80002cc:	d008      	beq.n	80002e0 <EXTI1_IRQHandler+0x20>
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <EXTI1_IRQHandler+0x28>)
 80002d0:	695a      	ldr	r2, [r3, #20]
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <EXTI1_IRQHandler+0x28>)
 80002d4:	2102      	movs	r1, #2
 80002d6:	430a      	orrs	r2, r1
 80002d8:	615a      	str	r2, [r3, #20]
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x2c>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	4798      	blx	r3
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40010400 	.word	0x40010400
 80002ec:	20000020 	.word	0x20000020

080002f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<2)  { EXTI->PR |= 1<<2  ; GP_IRQ_CallBack[2]() ; }
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <EXTI2_IRQHandler+0x28>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	2204      	movs	r2, #4
 80002fa:	4013      	ands	r3, r2
 80002fc:	d008      	beq.n	8000310 <EXTI2_IRQHandler+0x20>
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <EXTI2_IRQHandler+0x28>)
 8000300:	695a      	ldr	r2, [r3, #20]
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <EXTI2_IRQHandler+0x28>)
 8000304:	2104      	movs	r1, #4
 8000306:	430a      	orrs	r2, r1
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	4b04      	ldr	r3, [pc, #16]	; (800031c <EXTI2_IRQHandler+0x2c>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4798      	blx	r3
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40010400 	.word	0x40010400
 800031c:	20000020 	.word	0x20000020

08000320 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<3)  { EXTI->PR |= 1<<3  ; GP_IRQ_CallBack[3]() ; }
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <EXTI3_IRQHandler+0x28>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	2208      	movs	r2, #8
 800032a:	4013      	ands	r3, r2
 800032c:	d008      	beq.n	8000340 <EXTI3_IRQHandler+0x20>
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <EXTI3_IRQHandler+0x28>)
 8000330:	695a      	ldr	r2, [r3, #20]
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <EXTI3_IRQHandler+0x28>)
 8000334:	2108      	movs	r1, #8
 8000336:	430a      	orrs	r2, r1
 8000338:	615a      	str	r2, [r3, #20]
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <EXTI3_IRQHandler+0x2c>)
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	4798      	blx	r3
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	40010400 	.word	0x40010400
 800034c:	20000020 	.word	0x20000020

08000350 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<4)  { EXTI->PR |= 1<<4  ; GP_IRQ_CallBack[4]() ; }
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <EXTI4_IRQHandler+0x28>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	2210      	movs	r2, #16
 800035a:	4013      	ands	r3, r2
 800035c:	d008      	beq.n	8000370 <EXTI4_IRQHandler+0x20>
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <EXTI4_IRQHandler+0x28>)
 8000360:	695a      	ldr	r2, [r3, #20]
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <EXTI4_IRQHandler+0x28>)
 8000364:	2110      	movs	r1, #16
 8000366:	430a      	orrs	r2, r1
 8000368:	615a      	str	r2, [r3, #20]
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <EXTI4_IRQHandler+0x2c>)
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	4798      	blx	r3
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	40010400 	.word	0x40010400
 800037c:	20000020 	.word	0x20000020

08000380 <EXTI5_9_IRQHandler>:

void EXTI5_9_IRQHandler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)  { EXTI->PR |= 1<<5  ; GP_IRQ_CallBack[5]()  ; }
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	2220      	movs	r2, #32
 800038a:	4013      	ands	r3, r2
 800038c:	d008      	beq.n	80003a0 <EXTI5_9_IRQHandler+0x20>
 800038e:	4b24      	ldr	r3, [pc, #144]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	4b23      	ldr	r3, [pc, #140]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 8000394:	2120      	movs	r1, #32
 8000396:	430a      	orrs	r2, r1
 8000398:	615a      	str	r2, [r3, #20]
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <EXTI5_9_IRQHandler+0xa4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4798      	blx	r3
	if (EXTI->PR & 1<<6)  { EXTI->PR |= 1<<6  ; GP_IRQ_CallBack[6]()  ; }
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	2240      	movs	r2, #64	; 0x40
 80003a6:	4013      	ands	r3, r2
 80003a8:	d008      	beq.n	80003bc <EXTI5_9_IRQHandler+0x3c>
 80003aa:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003ac:	695a      	ldr	r2, [r3, #20]
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003b0:	2140      	movs	r1, #64	; 0x40
 80003b2:	430a      	orrs	r2, r1
 80003b4:	615a      	str	r2, [r3, #20]
 80003b6:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <EXTI5_9_IRQHandler+0xa4>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4798      	blx	r3
	if (EXTI->PR & 1<<7)  { EXTI->PR |= 1<<7  ; GP_IRQ_CallBack[7]()  ; }
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	4013      	ands	r3, r2
 80003c4:	d008      	beq.n	80003d8 <EXTI5_9_IRQHandler+0x58>
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003c8:	695a      	ldr	r2, [r3, #20]
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	430a      	orrs	r2, r1
 80003d0:	615a      	str	r2, [r3, #20]
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <EXTI5_9_IRQHandler+0xa4>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4798      	blx	r3
	if (EXTI->PR & 1<<8)  { EXTI->PR |= 1<<8  ; GP_IRQ_CallBack[8]()  ; }
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003da:	695a      	ldr	r2, [r3, #20]
 80003dc:	2380      	movs	r3, #128	; 0x80
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4013      	ands	r3, r2
 80003e2:	d009      	beq.n	80003f8 <EXTI5_9_IRQHandler+0x78>
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	0049      	lsls	r1, r1, #1
 80003ee:	430a      	orrs	r2, r1
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <EXTI5_9_IRQHandler+0xa4>)
 80003f4:	6a1b      	ldr	r3, [r3, #32]
 80003f6:	4798      	blx	r3
	if (EXTI->PR & 1<<9)  { EXTI->PR |= 1<<9  ; GP_IRQ_CallBack[9]()  ; }
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 80003fa:	695a      	ldr	r2, [r3, #20]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4013      	ands	r3, r2
 8000402:	d009      	beq.n	8000418 <EXTI5_9_IRQHandler+0x98>
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <EXTI5_9_IRQHandler+0xa0>)
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	0089      	lsls	r1, r1, #2
 800040e:	430a      	orrs	r2, r1
 8000410:	615a      	str	r2, [r3, #20]
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <EXTI5_9_IRQHandler+0xa4>)
 8000414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000416:	4798      	blx	r3
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	40010400 	.word	0x40010400
 8000424:	20000020 	.word	0x20000020

08000428 <EXTI10_15_IRQHandler>:

void EXTI10_15_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	if (EXTI->PR & 1<<10) { EXTI->PR |= 1<<10 ; GP_IRQ_CallBack[10]() ; }
 800042c:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	00db      	lsls	r3, r3, #3
 8000434:	4013      	ands	r3, r2
 8000436:	d009      	beq.n	800044c <EXTI10_15_IRQHandler+0x24>
 8000438:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	00c9      	lsls	r1, r1, #3
 8000442:	430a      	orrs	r2, r1
 8000444:	615a      	str	r2, [r3, #20]
 8000446:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <EXTI10_15_IRQHandler+0xd0>)
 8000448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044a:	4798      	blx	r3
	if (EXTI->PR & 1<<11) { EXTI->PR |= 1<<11 ; GP_IRQ_CallBack[11]() ; }
 800044c:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	011b      	lsls	r3, r3, #4
 8000454:	4013      	ands	r3, r2
 8000456:	d009      	beq.n	800046c <EXTI10_15_IRQHandler+0x44>
 8000458:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	0109      	lsls	r1, r1, #4
 8000462:	430a      	orrs	r2, r1
 8000464:	615a      	str	r2, [r3, #20]
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <EXTI10_15_IRQHandler+0xd0>)
 8000468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046a:	4798      	blx	r3
	if (EXTI->PR & 1<<12) { EXTI->PR |= 1<<12 ; GP_IRQ_CallBack[12]() ; }
 800046c:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	015b      	lsls	r3, r3, #5
 8000474:	4013      	ands	r3, r2
 8000476:	d009      	beq.n	800048c <EXTI10_15_IRQHandler+0x64>
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	0149      	lsls	r1, r1, #5
 8000482:	430a      	orrs	r2, r1
 8000484:	615a      	str	r2, [r3, #20]
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <EXTI10_15_IRQHandler+0xd0>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4798      	blx	r3
	if (EXTI->PR & 1<<13) { EXTI->PR |= 1<<13 ; GP_IRQ_CallBack[13]() ; }
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	019b      	lsls	r3, r3, #6
 8000494:	4013      	ands	r3, r2
 8000496:	d009      	beq.n	80004ac <EXTI10_15_IRQHandler+0x84>
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	0189      	lsls	r1, r1, #6
 80004a2:	430a      	orrs	r2, r1
 80004a4:	615a      	str	r2, [r3, #20]
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <EXTI10_15_IRQHandler+0xd0>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004aa:	4798      	blx	r3
	if (EXTI->PR & 1<<14) { EXTI->PR |= 1<<14 ; GP_IRQ_CallBack[14]() ; }
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	01db      	lsls	r3, r3, #7
 80004b4:	4013      	ands	r3, r2
 80004b6:	d009      	beq.n	80004cc <EXTI10_15_IRQHandler+0xa4>
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	01c9      	lsls	r1, r1, #7
 80004c2:	430a      	orrs	r2, r1
 80004c4:	615a      	str	r2, [r3, #20]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <EXTI10_15_IRQHandler+0xd0>)
 80004c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ca:	4798      	blx	r3
	if (EXTI->PR & 1<<15) { EXTI->PR |= 1<<15 ; GP_IRQ_CallBack[15]() ; }
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	021b      	lsls	r3, r3, #8
 80004d4:	4013      	ands	r3, r2
 80004d6:	d009      	beq.n	80004ec <EXTI10_15_IRQHandler+0xc4>
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI10_15_IRQHandler+0xcc>)
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0209      	lsls	r1, r1, #8
 80004e2:	430a      	orrs	r2, r1
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <EXTI10_15_IRQHandler+0xd0>)
 80004e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ea:	4798      	blx	r3
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000020 	.word	0x20000020

080004fc <GPIO_SetPinDirection>:
 */

#include "GPIO.h"

void GPIO_SetPinDirection(GPIO_t* GPIOx , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	0008      	movs	r0, r1
 8000506:	0011      	movs	r1, r2
 8000508:	1cfb      	adds	r3, r7, #3
 800050a:	1c02      	adds	r2, r0, #0
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	1cbb      	adds	r3, r7, #2
 8000510:	1c0a      	adds	r2, r1, #0
 8000512:	701a      	strb	r2, [r3, #0]

	if(Copy_u8Pin <= 7){
 8000514:	1cfb      	adds	r3, r7, #3
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b07      	cmp	r3, #7
 800051a:	d818      	bhi.n	800054e <GPIO_SetPinDirection+0x52>
		GPIOx->CRL &= ~((0b1111) << (Copy_u8Pin * 4));     // Clear the Four Bits Of each pin
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	1cfa      	adds	r2, r7, #3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	210f      	movs	r1, #15
 8000528:	4091      	lsls	r1, r2
 800052a:	000a      	movs	r2, r1
 800052c:	43d2      	mvns	r2, r2
 800052e:	401a      	ands	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); // Set 4 Bit of each pin by Copy_u8Mode Value
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1cba      	adds	r2, r7, #2
 800053a:	7811      	ldrb	r1, [r2, #0]
 800053c:	1cfa      	adds	r2, r7, #3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	0092      	lsls	r2, r2, #2
 8000542:	4091      	lsls	r1, r2
 8000544:	000a      	movs	r2, r1
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
		Copy_u8Pin = Copy_u8Pin - 8;
		GPIOx->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
		GPIOx->CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
	}

}
 800054c:	e020      	b.n	8000590 <GPIO_SetPinDirection+0x94>
	else if(Copy_u8Pin <= 15){
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b0f      	cmp	r3, #15
 8000554:	d81c      	bhi.n	8000590 <GPIO_SetPinDirection+0x94>
		Copy_u8Pin = Copy_u8Pin - 8;
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	1cfa      	adds	r2, r7, #3
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	3a08      	subs	r2, #8
 800055e:	701a      	strb	r2, [r3, #0]
		GPIOx->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	1cfa      	adds	r2, r7, #3
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	210f      	movs	r1, #15
 800056c:	4091      	lsls	r1, r2
 800056e:	000a      	movs	r2, r1
 8000570:	43d2      	mvns	r2, r2
 8000572:	401a      	ands	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	1cba      	adds	r2, r7, #2
 800057e:	7811      	ldrb	r1, [r2, #0]
 8000580:	1cfa      	adds	r2, r7, #3
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	0092      	lsls	r2, r2, #2
 8000586:	4091      	lsls	r1, r2
 8000588:	000a      	movs	r2, r1
 800058a:	431a      	orrs	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	605a      	str	r2, [r3, #4]
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}

08000598 <RCC_GetSYCLKFreq>:




u32 RCC_GetSYCLKFreq(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: Not applicable
	*/
	u32 CLK;
	switch( (RCC->CFGR >> 2) & 0b11)
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <RCC_GetSYCLKFreq+0x30>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	089b      	lsrs	r3, r3, #2
 80005a4:	2203      	movs	r2, #3
 80005a6:	4013      	ands	r3, r2
 80005a8:	d002      	beq.n	80005b0 <RCC_GetSYCLKFreq+0x18>
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d003      	beq.n	80005b6 <RCC_GetSYCLKFreq+0x1e>
 80005ae:	e005      	b.n	80005bc <RCC_GetSYCLKFreq+0x24>
	{
	case 0:
		CLK =  HSI_CLK;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <RCC_GetSYCLKFreq+0x34>)
 80005b2:	607b      	str	r3, [r7, #4]
		break;
 80005b4:	e002      	b.n	80005bc <RCC_GetSYCLKFreq+0x24>
	case 1:
		CLK =  HSE_CLK;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <RCC_GetSYCLKFreq+0x38>)
 80005b8:	607b      	str	r3, [r7, #4]
		break;
 80005ba:	46c0      	nop			; (mov r8, r8)
	}

	return CLK;
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	0018      	movs	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000
 80005cc:	007a1200 	.word	0x007a1200
 80005d0:	00f42400 	.word	0x00f42400

080005d4 <RCC_GetHCLKFreq>:

u32 RCC_GetHCLKFreq(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (RCC_GetSYCLKFreq() >> AHBPrescaler[(RCC->CFGR >> 4) & 0b1111]);
 80005d8:	f7ff ffde 	bl	8000598 <RCC_GetSYCLKFreq>
 80005dc:	0001      	movs	r1, r0
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <RCC_GetHCLKFreq+0x24>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	220f      	movs	r2, #15
 80005e6:	4013      	ands	r3, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <RCC_GetHCLKFreq+0x28>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	40d9      	lsrs	r1, r3
 80005ee:	000b      	movs	r3, r1
}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000
 80005fc:	08000c28 	.word	0x08000c28

08000600 <RCC_GetPCLK1Freq>:

u32 RCC_GetPCLK1Freq(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (RCC_GetHCLKFreq() >> APBPrescaler[(RCC->CFGR >> 8) & 0b111]);
 8000604:	f7ff ffe6 	bl	80005d4 <RCC_GetHCLKFreq>
 8000608:	0001      	movs	r1, r0
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <RCC_GetPCLK1Freq+0x24>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	2207      	movs	r2, #7
 8000612:	4013      	ands	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <RCC_GetPCLK1Freq+0x28>)
 8000616:	5cd3      	ldrb	r3, [r2, r3]
 8000618:	40d9      	lsrs	r1, r3
 800061a:	000b      	movs	r3, r1
}
 800061c:	0018      	movs	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000
 8000628:	08000c20 	.word	0x08000c20

0800062c <RCC_GetPCLK2Freq>:

u32 RCC_GetPCLK2Freq(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (RCC_GetHCLKFreq() >> APBPrescaler[(RCC->CFGR >> 11) & 0b111]);
 8000630:	f7ff ffd0 	bl	80005d4 <RCC_GetHCLKFreq>
 8000634:	0001      	movs	r1, r0
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <RCC_GetPCLK2Freq+0x24>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	0adb      	lsrs	r3, r3, #11
 800063c:	2207      	movs	r2, #7
 800063e:	4013      	ands	r3, r2
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <RCC_GetPCLK2Freq+0x28>)
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	40d9      	lsrs	r1, r3
 8000646:	000b      	movs	r3, r1
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40021000 	.word	0x40021000
 8000654:	08000c20 	.word	0x08000c20

08000658 <USART_Init>:
 *                            APIS
 * =================================================================
 */

void USART_Init(USART_t* USARTx , USART_Config* USART_Config)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	u32 Pclk , BRR;
	Global_USART_Config = USART_Config;
 8000662:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <USART_Init+0x178>)
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	601a      	str	r2, [r3, #0]

	// enable clock
	if(USARTx == USART1){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a5a      	ldr	r2, [pc, #360]	; (80007d4 <USART_Init+0x17c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d107      	bne.n	8000680 <USART_Init+0x28>
		RCC_USART1_CLK_EN();
 8000670:	4b59      	ldr	r3, [pc, #356]	; (80007d8 <USART_Init+0x180>)
 8000672:	699a      	ldr	r2, [r3, #24]
 8000674:	4b58      	ldr	r3, [pc, #352]	; (80007d8 <USART_Init+0x180>)
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	01c9      	lsls	r1, r1, #7
 800067a:	430a      	orrs	r2, r1
 800067c:	619a      	str	r2, [r3, #24]
 800067e:	e016      	b.n	80006ae <USART_Init+0x56>
	}
	else if(USARTx == USART2){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a56      	ldr	r2, [pc, #344]	; (80007dc <USART_Init+0x184>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d107      	bne.n	8000698 <USART_Init+0x40>
		RCC_USART2_CLK_EN();
 8000688:	4b53      	ldr	r3, [pc, #332]	; (80007d8 <USART_Init+0x180>)
 800068a:	69da      	ldr	r2, [r3, #28]
 800068c:	4b52      	ldr	r3, [pc, #328]	; (80007d8 <USART_Init+0x180>)
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	0289      	lsls	r1, r1, #10
 8000692:	430a      	orrs	r2, r1
 8000694:	61da      	str	r2, [r3, #28]
 8000696:	e00a      	b.n	80006ae <USART_Init+0x56>
	}
	else if(USARTx == USART3){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a51      	ldr	r2, [pc, #324]	; (80007e0 <USART_Init+0x188>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d106      	bne.n	80006ae <USART_Init+0x56>
		RCC_USART3_CLK_EN();
 80006a0:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <USART_Init+0x180>)
 80006a2:	69da      	ldr	r2, [r3, #28]
 80006a4:	4b4c      	ldr	r3, [pc, #304]	; (80007d8 <USART_Init+0x180>)
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	02c9      	lsls	r1, r1, #11
 80006aa:	430a      	orrs	r2, r1
 80006ac:	61da      	str	r2, [r3, #28]
	}

	//Enable USART_Module
	USARTx->CR1 |= 1 << 13;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	431a      	orrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]

	//Enable TX or RX according to config table
	USARTx->CR1 |= USART_Config->USART_Mode;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	431a      	orrs	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60da      	str	r2, [r3, #12]

	//WordLength
	USARTx->CR1 |= USART_Config->WordLength;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	7a12      	ldrb	r2, [r2, #8]
 80006d2:	431a      	orrs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |= USART_Config->Parity;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	7a52      	ldrb	r2, [r2, #9]
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]

	//StopBits
	USARTx->CR2 |= USART_Config->StopBits;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	7a92      	ldrb	r2, [r2, #10]
 80006ee:	431a      	orrs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	611a      	str	r2, [r3, #16]

	//BaudRate
	//PCLK1 for USART2 , 3
	//PCLK2 for USART1
	if(USARTx == USART1){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a37      	ldr	r2, [pc, #220]	; (80007d4 <USART_Init+0x17c>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d104      	bne.n	8000706 <USART_Init+0xae>
		Pclk = RCC_GetPCLK2Freq();
 80006fc:	f7ff ff96 	bl	800062c <RCC_GetPCLK2Freq>
 8000700:	0003      	movs	r3, r0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e003      	b.n	800070e <USART_Init+0xb6>
	}
	else{
		Pclk = RCC_GetPCLK1Freq();
 8000706:	f7ff ff7b 	bl	8000600 <RCC_GetPCLK1Freq>
 800070a:	0003      	movs	r3, r0
 800070c:	60fb      	str	r3, [r7, #12]
	}

	BRR = UART_BRR_Register(Pclk , USART_Config->BaudRate);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	0019      	movs	r1, r3
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff fd2e 	bl	8000178 <__udivsi3>
 800071c:	0003      	movs	r3, r0
 800071e:	011c      	lsls	r4, r3, #4
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	0013      	movs	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	189b      	adds	r3, r3, r2
 8000728:	009a      	lsls	r2, r3, #2
 800072a:	189a      	adds	r2, r3, r2
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	0019      	movs	r1, r3
 8000734:	0010      	movs	r0, r2
 8000736:	f7ff fd1f 	bl	8000178 <__udivsi3>
 800073a:	0003      	movs	r3, r0
 800073c:	001d      	movs	r5, r3
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	0019      	movs	r1, r3
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f7ff fd16 	bl	8000178 <__udivsi3>
 800074c:	0003      	movs	r3, r0
 800074e:	001a      	movs	r2, r3
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	4353      	muls	r3, r2
 8000754:	1aeb      	subs	r3, r5, r3
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	2164      	movs	r1, #100	; 0x64
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff fd0c 	bl	8000178 <__udivsi3>
 8000760:	0003      	movs	r3, r0
 8000762:	001a      	movs	r2, r3
 8000764:	230f      	movs	r3, #15
 8000766:	4013      	ands	r3, r2
 8000768:	4323      	orrs	r3, r4
 800076a:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	609a      	str	r2, [r3, #8]

	//Enable / Disable Interrupt
	//USART_CR1
	if(USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE){
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	7adb      	ldrb	r3, [r3, #11]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d026      	beq.n	80007c8 <USART_Init+0x170>

		USARTx->CR1 |= USART_Config->IRQ_Enable;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	7ad2      	ldrb	r2, [r2, #11]
 8000782:	431a      	orrs	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	60da      	str	r2, [r3, #12]

		//Enble NVIC for USARTx_IRQ
		if(USARTx == USART1){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <USART_Init+0x17c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d106      	bne.n	800079e <USART_Init+0x146>
			NVIC_IRQ_USART_Enable(USART1IRQn);
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <USART_Init+0x18c>)
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <USART_Init+0x18c>)
 8000796:	2120      	movs	r1, #32
 8000798:	430a      	orrs	r2, r1
 800079a:	605a      	str	r2, [r3, #4]
			NVIC_IRQ_USART_Enable(USART3IRQn);
		}
	}


}
 800079c:	e014      	b.n	80007c8 <USART_Init+0x170>
		else if(USARTx == USART2){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <USART_Init+0x184>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d106      	bne.n	80007b4 <USART_Init+0x15c>
			NVIC_IRQ_USART_Enable(USART2IRQn);
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <USART_Init+0x18c>)
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <USART_Init+0x18c>)
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	430a      	orrs	r2, r1
 80007b0:	605a      	str	r2, [r3, #4]
}
 80007b2:	e009      	b.n	80007c8 <USART_Init+0x170>
		else if(USARTx == USART3){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <USART_Init+0x188>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d105      	bne.n	80007c8 <USART_Init+0x170>
			NVIC_IRQ_USART_Enable(USART3IRQn);
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <USART_Init+0x18c>)
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <USART_Init+0x18c>)
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	430a      	orrs	r2, r1
 80007c6:	605a      	str	r2, [r3, #4]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b004      	add	sp, #16
 80007ce:	bdb0      	pop	{r4, r5, r7, pc}
 80007d0:	2000001c 	.word	0x2000001c
 80007d4:	40013800 	.word	0x40013800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40004800 	.word	0x40004800
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <USART_SendData>:
		NVIC_IRQ_USART_Disable(USART3IRQn);
	}
}

void USART_SendData(USART_t* USARTx , u16* Buffer , Polling_Mechanism PollingEn)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	701a      	strb	r2, [r3, #0]
	//wait until TXE flag is set in SR
	if(PollingEn == enable){
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d105      	bne.n	800080a <USART_SendData+0x22>
		while(! (USARTx->SR & 1<<7) );
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	4013      	ands	r3, r2
 8000808:	d0fa      	beq.n	8000800 <USART_SendData+0x18>

		USARTx->DR = (*Buffer & (u16)0x01FF);
	}
	else{
		// This is 8bit data transfer
		USARTx->DR = (*Buffer & (u8)0xFF);
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	001a      	movs	r2, r3
 8000810:	23ff      	movs	r3, #255	; 0xff
 8000812:	401a      	ands	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	605a      	str	r2, [r3, #4]
	}
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b004      	add	sp, #16
 800081e:	bd80      	pop	{r7, pc}

08000820 <USART_RecieveData>:

void USART_RecieveData(USART_t* USARTx , u16* Buffer , Polling_Mechanism PollingEn)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	701a      	strb	r2, [r3, #0]
	//wait until RXNE flag is set in SR
	if(PollingEn == enable){
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d105      	bne.n	8000842 <USART_RecieveData+0x22>
		while(! (USARTx->SR & 1<<5) );
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2220      	movs	r2, #32
 800083e:	4013      	ands	r3, r2
 8000840:	d0fa      	beq.n	8000838 <USART_RecieveData+0x18>
			//parity is used so 8Bits will be of user data and 1Bit is parity
			*((u16*)Buffer) = (USARTx->DR & (u8)0xFF);
		}
	}
	else{
		if(Global_USART_Config->WordLength == USART_Parity_NONE){
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <USART_RecieveData+0x58>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	7a1b      	ldrb	r3, [r3, #8]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d108      	bne.n	800085e <USART_RecieveData+0x3e>
			//no parity so all bits is considered data
			*((u16*)Buffer) = (USARTx->DR & (u8)0xFF);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	b29b      	uxth	r3, r3
 8000852:	22ff      	movs	r2, #255	; 0xff
 8000854:	4013      	ands	r3, r2
 8000856:	b29a      	uxth	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]
		else{
			//parity is used so 7Bits will be of user data and 1Bit is parity
			*((u16*)Buffer) = (USARTx->DR & (u8)0x7F);
		}
	}
}
 800085c:	e007      	b.n	800086e <USART_RecieveData+0x4e>
			*((u16*)Buffer) = (USARTx->DR & (u8)0x7F);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	b29b      	uxth	r3, r3
 8000864:	227f      	movs	r2, #127	; 0x7f
 8000866:	4013      	ands	r3, r2
 8000868:	b29a      	uxth	r2, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	801a      	strh	r2, [r3, #0]
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	2000001c 	.word	0x2000001c

0800087c <USART_GPIO_SetPins>:

void USART_GPIO_SetPins(USART_t* USARTx)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <USART_GPIO_SetPins+0x74>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d10c      	bne.n	80008a6 <USART_GPIO_SetPins+0x2a>
		// TX PA9
		// RX PA10
		GPIO_SetPinDirection(GPIOA, PIN9, OUTPUT_SPEED_10MHZ_AFPP);
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <USART_GPIO_SetPins+0x78>)
 800088e:	2209      	movs	r2, #9
 8000890:	2109      	movs	r1, #9
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fe32 	bl	80004fc <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIOA, PIN10, INPUT_FLOATING);
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <USART_GPIO_SetPins+0x78>)
 800089a:	2204      	movs	r2, #4
 800089c:	210a      	movs	r1, #10
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fe2c 	bl	80004fc <GPIO_SetPinDirection>
		// TX PB10
		// RX PB11
		GPIO_SetPinDirection(GPIOB, PIN10, OUTPUT_SPEED_10MHZ_AFPP);
		GPIO_SetPinDirection(GPIOB, PIN11, INPUT_FLOATING);
	}
}
 80008a4:	e020      	b.n	80008e8 <USART_GPIO_SetPins+0x6c>
	else if(USARTx == USART2){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <USART_GPIO_SetPins+0x7c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10c      	bne.n	80008c8 <USART_GPIO_SetPins+0x4c>
		GPIO_SetPinDirection(GPIOA, PIN2, OUTPUT_SPEED_10MHZ_AFPP);
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <USART_GPIO_SetPins+0x78>)
 80008b0:	2209      	movs	r2, #9
 80008b2:	2102      	movs	r1, #2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff fe21 	bl	80004fc <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIOA, PIN3, INPUT_FLOATING);
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <USART_GPIO_SetPins+0x78>)
 80008bc:	2204      	movs	r2, #4
 80008be:	2103      	movs	r1, #3
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff fe1b 	bl	80004fc <GPIO_SetPinDirection>
}
 80008c6:	e00f      	b.n	80008e8 <USART_GPIO_SetPins+0x6c>
	else if(USARTx == USART3){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <USART_GPIO_SetPins+0x80>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d10b      	bne.n	80008e8 <USART_GPIO_SetPins+0x6c>
		GPIO_SetPinDirection(GPIOB, PIN10, OUTPUT_SPEED_10MHZ_AFPP);
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <USART_GPIO_SetPins+0x84>)
 80008d2:	2209      	movs	r2, #9
 80008d4:	210a      	movs	r1, #10
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fe10 	bl	80004fc <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIOB, PIN11, INPUT_FLOATING);
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <USART_GPIO_SetPins+0x84>)
 80008de:	2204      	movs	r2, #4
 80008e0:	210b      	movs	r1, #11
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff fe0a 	bl	80004fc <GPIO_SetPinDirection>
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40013800 	.word	0x40013800
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40004400 	.word	0x40004400
 80008fc:	40004800 	.word	0x40004800
 8000900:	40010c00 	.word	0x40010c00

08000904 <USART1_IRQHandler>:

//ISR

void USART1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	USART_IRQ_Event Flag;

	if(USART1->SR & 1<<7){
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <USART1_IRQHandler+0x8c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	4013      	ands	r3, r2
 8000912:	d003      	beq.n	800091c <USART1_IRQHandler+0x18>
		Flag = USART_IRQ_TXE;
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e02e      	b.n	800097a <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<6){
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <USART1_IRQHandler+0x8c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2240      	movs	r2, #64	; 0x40
 8000922:	4013      	ands	r3, r2
 8000924:	d009      	beq.n	800093a <USART1_IRQHandler+0x36>
		Flag = USART_IRQ_TC;
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART1->SR &= ~(1<<6);
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <USART1_IRQHandler+0x8c>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <USART1_IRQHandler+0x8c>)
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	438a      	bics	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e01f      	b.n	800097a <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<5){
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <USART1_IRQHandler+0x8c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2220      	movs	r2, #32
 8000940:	4013      	ands	r3, r2
 8000942:	d009      	beq.n	8000958 <USART1_IRQHandler+0x54>
		Flag = USART_IRQ_RXNE;
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	2202      	movs	r2, #2
 8000948:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART1->SR &= ~(1<<5);
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <USART1_IRQHandler+0x8c>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <USART1_IRQHandler+0x8c>)
 8000950:	2120      	movs	r1, #32
 8000952:	438a      	bics	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e010      	b.n	800097a <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<3){
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <USART1_IRQHandler+0x8c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2208      	movs	r2, #8
 800095e:	4013      	ands	r3, r2
 8000960:	d003      	beq.n	800096a <USART1_IRQHandler+0x66>
		Flag = USART_IRQ_ORE;
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	2203      	movs	r2, #3
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e007      	b.n	800097a <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<0){
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <USART1_IRQHandler+0x8c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2201      	movs	r2, #1
 8000970:	4013      	ands	r3, r2
 8000972:	d002      	beq.n	800097a <USART1_IRQHandler+0x76>
		Flag = USART_IEQ_PE;
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	2204      	movs	r2, #4
 8000978:	701a      	strb	r2, [r3, #0]
	}

	Global_USART_Config->P_IRQ_CallBack(Flag);
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <USART1_IRQHandler+0x90>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	1dfa      	adds	r2, r7, #7
 8000982:	7812      	ldrb	r2, [r2, #0]
 8000984:	0010      	movs	r0, r2
 8000986:	4798      	blx	r3
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40013800 	.word	0x40013800
 8000994:	2000001c 	.word	0x2000001c

08000998 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	USART_IRQ_Event Flag;

	if(USART2->SR & 1<<7){
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	4013      	ands	r3, r2
 80009a6:	d003      	beq.n	80009b0 <USART2_IRQHandler+0x18>
		Flag = USART_IRQ_TXE;
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e02e      	b.n	8000a0e <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<6){
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2240      	movs	r2, #64	; 0x40
 80009b6:	4013      	ands	r3, r2
 80009b8:	d009      	beq.n	80009ce <USART2_IRQHandler+0x36>
		Flag = USART_IRQ_TC;
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART2->SR &= ~(1<<6);
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	438a      	bics	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e01f      	b.n	8000a0e <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<5){
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2220      	movs	r2, #32
 80009d4:	4013      	ands	r3, r2
 80009d6:	d009      	beq.n	80009ec <USART2_IRQHandler+0x54>
		Flag = USART_IRQ_RXNE;
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	2202      	movs	r2, #2
 80009dc:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART2->SR &= ~(1<<5);
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009e4:	2120      	movs	r1, #32
 80009e6:	438a      	bics	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e010      	b.n	8000a0e <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<3){
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <USART2_IRQHandler+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2208      	movs	r2, #8
 80009f2:	4013      	ands	r3, r2
 80009f4:	d003      	beq.n	80009fe <USART2_IRQHandler+0x66>
		Flag = USART_IRQ_ORE;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2203      	movs	r2, #3
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e007      	b.n	8000a0e <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<0){
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <USART2_IRQHandler+0x8c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	d002      	beq.n	8000a0e <USART2_IRQHandler+0x76>
		Flag = USART_IEQ_PE;
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	701a      	strb	r2, [r3, #0]
	}

	Global_USART_Config->P_IRQ_CallBack(Flag);
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <USART2_IRQHandler+0x90>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	1dfa      	adds	r2, r7, #7
 8000a16:	7812      	ldrb	r2, [r2, #0]
 8000a18:	0010      	movs	r0, r2
 8000a1a:	4798      	blx	r3
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40004400 	.word	0x40004400
 8000a28:	2000001c 	.word	0x2000001c

08000a2c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	USART_IRQ_Event Flag;

	if(USART3->SR & 1<<7){
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d003      	beq.n	8000a44 <USART3_IRQHandler+0x18>
		Flag = USART_IRQ_TXE;
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e02e      	b.n	8000aa2 <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<6){
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	d009      	beq.n	8000a62 <USART3_IRQHandler+0x36>
		Flag = USART_IRQ_TC;
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART3->SR &= ~(1<<6);
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	438a      	bics	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	e01f      	b.n	8000aa2 <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<5){
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2220      	movs	r2, #32
 8000a68:	4013      	ands	r3, r2
 8000a6a:	d009      	beq.n	8000a80 <USART3_IRQHandler+0x54>
		Flag = USART_IRQ_RXNE;
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	2202      	movs	r2, #2
 8000a70:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART3->SR &= ~(1<<5);
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	438a      	bics	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e010      	b.n	8000aa2 <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<3){
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2208      	movs	r2, #8
 8000a86:	4013      	ands	r3, r2
 8000a88:	d003      	beq.n	8000a92 <USART3_IRQHandler+0x66>
		Flag = USART_IRQ_ORE;
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e007      	b.n	8000aa2 <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<0){
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <USART3_IRQHandler+0x8c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d002      	beq.n	8000aa2 <USART3_IRQHandler+0x76>
		Flag = USART_IEQ_PE;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	701a      	strb	r2, [r3, #0]
	}

	Global_USART_Config->P_IRQ_CallBack(Flag);
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <USART3_IRQHandler+0x90>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	1dfa      	adds	r2, r7, #7
 8000aaa:	7812      	ldrb	r2, [r2, #0]
 8000aac:	0010      	movs	r0, r2
 8000aae:	4798      	blx	r3
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004800 	.word	0x40004800
 8000abc:	2000001c 	.word	0x2000001c

08000ac0 <USART_IRQ_CallBack>:


u16 ch;

void USART_IRQ_CallBack(USART_IRQ_Event Flag)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	701a      	strb	r2, [r3, #0]
	USART_RecieveData(USART1, &ch, disable);
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <USART_IRQ_CallBack+0x2c>)
 8000ace:	4808      	ldr	r0, [pc, #32]	; (8000af0 <USART_IRQ_CallBack+0x30>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f7ff fea4 	bl	8000820 <USART_RecieveData>
	USART_SendData(USART1, &ch, enable);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <USART_IRQ_CallBack+0x2c>)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <USART_IRQ_CallBack+0x30>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	0019      	movs	r1, r3
 8000ae0:	f7ff fe82 	bl	80007e8 <USART_SendData>
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000005c 	.word	0x2000005c
 8000af0:	40013800 	.word	0x40013800

08000af4 <main>:

int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

	/* Enable GPIOA Clock */
	RCC_GPIOA_CLK_EN();
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <main+0x6c>)
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <main+0x6c>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	430a      	orrs	r2, r1
 8000b04:	619a      	str	r2, [r3, #24]
	/* Enable GPIOB Clock */
	RCC_GPIOB_CLK_EN();
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <main+0x6c>)
 8000b08:	699a      	ldr	r2, [r3, #24]
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <main+0x6c>)
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	619a      	str	r2, [r3, #24]
	/* Enble AFIO Clock */
	RCC_AFIO_CLK_EN();
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <main+0x6c>)
 8000b14:	699a      	ldr	r2, [r3, #24]
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <main+0x6c>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	619a      	str	r2, [r3, #24]

	USART_Config USART_CFG;
	USART_CFG.BaudRate   = USART_BaudRate_115200;
 8000b1e:	003b      	movs	r3, r7
 8000b20:	22e1      	movs	r2, #225	; 0xe1
 8000b22:	0252      	lsls	r2, r2, #9
 8000b24:	605a      	str	r2, [r3, #4]
	USART_CFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2220      	movs	r2, #32
 8000b2a:	72da      	strb	r2, [r3, #11]
	USART_CFG.P_IRQ_CallBack = USART_IRQ_CallBack;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <main+0x70>)
 8000b30:	60da      	str	r2, [r3, #12]
	USART_CFG.Parity = USART_Parity_NONE;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	725a      	strb	r2, [r3, #9]
	USART_CFG.WordLength = USART_WordLength_8B;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	721a      	strb	r2, [r3, #8]
	USART_CFG.StopBits = USART_StopBits_1;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	729a      	strb	r2, [r3, #10]
	USART_CFG.USART_Mode = USART_Mode_RX_TX;
 8000b44:	003b      	movs	r3, r7
 8000b46:	220c      	movs	r2, #12
 8000b48:	701a      	strb	r2, [r3, #0]

	USART_Init(USART1 , &USART_CFG);
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <main+0x74>)
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f7ff fd81 	bl	8000658 <USART_Init>
	USART_GPIO_SetPins(USART1);
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <main+0x74>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fe8f 	bl	800087c <USART_GPIO_SetPins>


	while(1){
 8000b5e:	e7fe      	b.n	8000b5e <main+0x6a>
 8000b60:	40021000 	.word	0x40021000
 8000b64:	08000ac1 	.word	0x08000ac1
 8000b68:	40013800 	.word	0x40013800

08000b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b9a:	f000 f811 	bl	8000bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff ffa9 	bl	8000af4 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   r0, =_estack
 8000ba4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bb0:	08000c40 	.word	0x08000c40
  ldr r2, =_sbss
 8000bb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bb8:	20000060 	.word	0x20000060

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <__libc_init_array>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	2600      	movs	r6, #0
 8000bc4:	4d0c      	ldr	r5, [pc, #48]	; (8000bf8 <__libc_init_array+0x38>)
 8000bc6:	4c0d      	ldr	r4, [pc, #52]	; (8000bfc <__libc_init_array+0x3c>)
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	10a4      	asrs	r4, r4, #2
 8000bcc:	42a6      	cmp	r6, r4
 8000bce:	d109      	bne.n	8000be4 <__libc_init_array+0x24>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	f000 f819 	bl	8000c08 <_init>
 8000bd6:	4d0a      	ldr	r5, [pc, #40]	; (8000c00 <__libc_init_array+0x40>)
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <__libc_init_array+0x44>)
 8000bda:	1b64      	subs	r4, r4, r5
 8000bdc:	10a4      	asrs	r4, r4, #2
 8000bde:	42a6      	cmp	r6, r4
 8000be0:	d105      	bne.n	8000bee <__libc_init_array+0x2e>
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	00b3      	lsls	r3, r6, #2
 8000be6:	58eb      	ldr	r3, [r5, r3]
 8000be8:	4798      	blx	r3
 8000bea:	3601      	adds	r6, #1
 8000bec:	e7ee      	b.n	8000bcc <__libc_init_array+0xc>
 8000bee:	00b3      	lsls	r3, r6, #2
 8000bf0:	58eb      	ldr	r3, [r5, r3]
 8000bf2:	4798      	blx	r3
 8000bf4:	3601      	adds	r6, #1
 8000bf6:	e7f2      	b.n	8000bde <__libc_init_array+0x1e>
 8000bf8:	08000c38 	.word	0x08000c38
 8000bfc:	08000c38 	.word	0x08000c38
 8000c00:	08000c38 	.word	0x08000c38
 8000c04:	08000c3c 	.word	0x08000c3c

08000c08 <_init>:
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0e:	bc08      	pop	{r3}
 8000c10:	469e      	mov	lr, r3
 8000c12:	4770      	bx	lr

08000c14 <_fini>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr


Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001130  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001280  08001280  00011288  2**0
                  CONTENTS
  4 .ARM          00000000  08001280  08001280  00011288  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001280  08001288  00011288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001280  08001280  00011280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  08001288  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001288  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002d  00000000  00000000  00011288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a01  00000000  00000000  000112b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f8c  00000000  00000000  00017cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b4e  00000000  00000000  00018c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000298  00000000  00000000  00019790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000210  00000000  00000000  00019a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000031f0  00000000  00000000  00019c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003959  00000000  00000000  0001ce28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bda8  00000000  00000000  00020781  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c529  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000788  00000000  00000000  0002c5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c06      	ldr	r4, [pc, #24]	; (800014c <__do_global_dtors_aux+0x1c>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	2b00      	cmp	r3, #0
 8000138:	d107      	bne.n	800014a <__do_global_dtors_aux+0x1a>
 800013a:	4b05      	ldr	r3, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013c:	2b00      	cmp	r3, #0
 800013e:	d002      	beq.n	8000146 <__do_global_dtors_aux+0x16>
 8000140:	4804      	ldr	r0, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x24>)
 8000142:	f3af 8000 	nop.w
 8000146:	2301      	movs	r3, #1
 8000148:	7023      	strb	r3, [r4, #0]
 800014a:	bd10      	pop	{r4, pc}
 800014c:	20000000 	.word	0x20000000
 8000150:	00000000 	.word	0x00000000
 8000154:	08001248 	.word	0x08001248

08000158 <frame_dummy>:
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <frame_dummy+0x14>)
 800015a:	b510      	push	{r4, lr}
 800015c:	2b00      	cmp	r3, #0
 800015e:	d003      	beq.n	8000168 <frame_dummy+0x10>
 8000160:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x18>)
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <frame_dummy+0x1c>)
 8000164:	f3af 8000 	nop.w
 8000168:	bd10      	pop	{r4, pc}
 800016a:	46c0      	nop			; (mov r8, r8)
 800016c:	00000000 	.word	0x00000000
 8000170:	20000004 	.word	0x20000004
 8000174:	08001248 	.word	0x08001248

08000178 <__udivsi3>:
 8000178:	2200      	movs	r2, #0
 800017a:	0843      	lsrs	r3, r0, #1
 800017c:	428b      	cmp	r3, r1
 800017e:	d374      	bcc.n	800026a <__udivsi3+0xf2>
 8000180:	0903      	lsrs	r3, r0, #4
 8000182:	428b      	cmp	r3, r1
 8000184:	d35f      	bcc.n	8000246 <__udivsi3+0xce>
 8000186:	0a03      	lsrs	r3, r0, #8
 8000188:	428b      	cmp	r3, r1
 800018a:	d344      	bcc.n	8000216 <__udivsi3+0x9e>
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d328      	bcc.n	80001e4 <__udivsi3+0x6c>
 8000192:	0c03      	lsrs	r3, r0, #16
 8000194:	428b      	cmp	r3, r1
 8000196:	d30d      	bcc.n	80001b4 <__udivsi3+0x3c>
 8000198:	22ff      	movs	r2, #255	; 0xff
 800019a:	0209      	lsls	r1, r1, #8
 800019c:	ba12      	rev	r2, r2
 800019e:	0c03      	lsrs	r3, r0, #16
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d302      	bcc.n	80001aa <__udivsi3+0x32>
 80001a4:	1212      	asrs	r2, r2, #8
 80001a6:	0209      	lsls	r1, r1, #8
 80001a8:	d065      	beq.n	8000276 <__udivsi3+0xfe>
 80001aa:	0b03      	lsrs	r3, r0, #12
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d319      	bcc.n	80001e4 <__udivsi3+0x6c>
 80001b0:	e000      	b.n	80001b4 <__udivsi3+0x3c>
 80001b2:	0a09      	lsrs	r1, r1, #8
 80001b4:	0bc3      	lsrs	r3, r0, #15
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x46>
 80001ba:	03cb      	lsls	r3, r1, #15
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0b83      	lsrs	r3, r0, #14
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x52>
 80001c6:	038b      	lsls	r3, r1, #14
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0b43      	lsrs	r3, r0, #13
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x5e>
 80001d2:	034b      	lsls	r3, r1, #13
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0b03      	lsrs	r3, r0, #12
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x6a>
 80001de:	030b      	lsls	r3, r1, #12
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0ac3      	lsrs	r3, r0, #11
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x76>
 80001ea:	02cb      	lsls	r3, r1, #11
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0a83      	lsrs	r3, r0, #10
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x82>
 80001f6:	028b      	lsls	r3, r1, #10
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0a43      	lsrs	r3, r0, #9
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x8e>
 8000202:	024b      	lsls	r3, r1, #9
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0a03      	lsrs	r3, r0, #8
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x9a>
 800020e:	020b      	lsls	r3, r1, #8
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	d2cd      	bcs.n	80001b2 <__udivsi3+0x3a>
 8000216:	09c3      	lsrs	r3, r0, #7
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xa8>
 800021c:	01cb      	lsls	r3, r1, #7
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0983      	lsrs	r3, r0, #6
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xb4>
 8000228:	018b      	lsls	r3, r1, #6
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0943      	lsrs	r3, r0, #5
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xc0>
 8000234:	014b      	lsls	r3, r1, #5
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xcc>
 8000240:	010b      	lsls	r3, r1, #4
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	08c3      	lsrs	r3, r0, #3
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xd8>
 800024c:	00cb      	lsls	r3, r1, #3
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0883      	lsrs	r3, r0, #2
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xe4>
 8000258:	008b      	lsls	r3, r1, #2
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0843      	lsrs	r3, r0, #1
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xf0>
 8000264:	004b      	lsls	r3, r1, #1
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	1a41      	subs	r1, r0, r1
 800026c:	d200      	bcs.n	8000270 <__udivsi3+0xf8>
 800026e:	4601      	mov	r1, r0
 8000270:	4152      	adcs	r2, r2
 8000272:	4610      	mov	r0, r2
 8000274:	4770      	bx	lr
 8000276:	e7ff      	b.n	8000278 <__udivsi3+0x100>
 8000278:	b501      	push	{r0, lr}
 800027a:	2000      	movs	r0, #0
 800027c:	f000 f806 	bl	800028c <__aeabi_idiv0>
 8000280:	bd02      	pop	{r1, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_uidivmod>:
 8000284:	2900      	cmp	r1, #0
 8000286:	d0f7      	beq.n	8000278 <__udivsi3+0x100>
 8000288:	e776      	b.n	8000178 <__udivsi3>
 800028a:	4770      	bx	lr

0800028c <__aeabi_idiv0>:
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <EEPROM_Init>:
 */

#include "I2C_Slave_EEPROM.h"

void EEPROM_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
	//     PB6 : I2C1_SCL
	//     PB7 : I2C1_SDA

	I2C_Config I2C1CFG;

	I2C1CFG.ACK_Control = I2C_Ack_Enable;
 8000296:	003b      	movs	r3, r7
 8000298:	2280      	movs	r2, #128	; 0x80
 800029a:	00d2      	lsls	r2, r2, #3
 800029c:	60da      	str	r2, [r3, #12]
	I2C1CFG.ClockSpeed  = I2C_SCLK_SM_100K;
 800029e:	003b      	movs	r3, r7
 80002a0:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <EEPROM_Init+0x44>)
 80002a2:	601a      	str	r2, [r3, #0]
	I2C1CFG.Mode = I2C_Mode;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
	I2C1CFG.P_Slave_Event_CallBack = NULL;
 80002aa:	003b      	movs	r3, r7
 80002ac:	2200      	movs	r2, #0
 80002ae:	61da      	str	r2, [r3, #28]
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 80002b0:	003b      	movs	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	605a      	str	r2, [r3, #4]

	I2C_GPIO_SetPins(I2C1);
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <EEPROM_Init+0x48>)
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fb65 	bl	8000988 <I2C_GPIO_SetPins>
	I2C_Init(I2C1, &I2C1CFG);
 80002be:	003b      	movs	r3, r7
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <EEPROM_Init+0x48>)
 80002c2:	0019      	movs	r1, r3
 80002c4:	0010      	movs	r0, r2
 80002c6:	f000 fa27 	bl	8000718 <I2C_Init>
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b008      	add	sp, #32
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	000186a0 	.word	0x000186a0
 80002d8:	40005400 	.word	0x40005400

080002dc <EEPROM_Write_NBytes>:

u8 EEPROM_Write_NBytes(unsigned int Memory_Address , u8* bytes , u8 DataLen)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b0c9      	sub	sp, #292	; 0x124
 80002e0:	af02      	add	r7, sp, #8
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <EEPROM_Write_NBytes+0xcc>)
 80002e8:	218c      	movs	r1, #140	; 0x8c
 80002ea:	0049      	lsls	r1, r1, #1
 80002ec:	468c      	mov	ip, r1
 80002ee:	44bc      	add	ip, r7
 80002f0:	4463      	add	r3, ip
 80002f2:	701a      	strb	r2, [r3, #0]
	u8 i = 0 , Buffer[256];
 80002f4:	2118      	movs	r1, #24
 80002f6:	31ff      	adds	r1, #255	; 0xff
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]

	Buffer[0] = (u8)(Memory_Address >> 8);        //Upper Address Byte
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b29      	ldr	r3, [pc, #164]	; (80003ac <EEPROM_Write_NBytes+0xd0>)
 8000306:	208c      	movs	r0, #140	; 0x8c
 8000308:	0040      	lsls	r0, r0, #1
 800030a:	4684      	mov	ip, r0
 800030c:	44bc      	add	ip, r7
 800030e:	4463      	add	r3, ip
 8000310:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (u8)(Memory_Address);             //Lower Address Byte
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <EEPROM_Write_NBytes+0xd0>)
 8000318:	208c      	movs	r0, #140	; 0x8c
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	4684      	mov	ip, r0
 800031e:	44bc      	add	ip, r7
 8000320:	4463      	add	r3, ip
 8000322:	705a      	strb	r2, [r3, #1]

	for(i=2; i<(DataLen+2); ++i){
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2202      	movs	r2, #2
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e015      	b.n	8000358 <EEPROM_Write_NBytes+0x7c>
		Buffer[i] = bytes[i - 2];
 800032c:	2018      	movs	r0, #24
 800032e:	30ff      	adds	r0, #255	; 0xff
 8000330:	183b      	adds	r3, r7, r0
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	3b02      	subs	r3, #2
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	18d2      	adds	r2, r2, r3
 800033a:	183b      	adds	r3, r7, r0
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	7811      	ldrb	r1, [r2, #0]
 8000340:	4a1a      	ldr	r2, [pc, #104]	; (80003ac <EEPROM_Write_NBytes+0xd0>)
 8000342:	248c      	movs	r4, #140	; 0x8c
 8000344:	0064      	lsls	r4, r4, #1
 8000346:	46a4      	mov	ip, r4
 8000348:	44bc      	add	ip, r7
 800034a:	4462      	add	r2, ip
 800034c:	54d1      	strb	r1, [r2, r3]
	for(i=2; i<(DataLen+2); ++i){
 800034e:	183b      	adds	r3, r7, r0
 8000350:	183a      	adds	r2, r7, r0
 8000352:	7812      	ldrb	r2, [r2, #0]
 8000354:	3201      	adds	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	2318      	movs	r3, #24
 800035a:	33ff      	adds	r3, #255	; 0xff
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <EEPROM_Write_NBytes+0xcc>)
 8000362:	218c      	movs	r1, #140	; 0x8c
 8000364:	0049      	lsls	r1, r1, #1
 8000366:	468c      	mov	ip, r1
 8000368:	44bc      	add	ip, r7
 800036a:	4463      	add	r3, ip
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	3302      	adds	r3, #2
 8000370:	429a      	cmp	r2, r3
 8000372:	dbdb      	blt.n	800032c <EEPROM_Write_NBytes+0x50>
	}

	I2C_Master_TX(I2C1, EEPROM_Slave_Address, Buffer, (DataLen+2), With_Stop, Start);
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <EEPROM_Write_NBytes+0xcc>)
 8000376:	228c      	movs	r2, #140	; 0x8c
 8000378:	0052      	lsls	r2, r2, #1
 800037a:	4694      	mov	ip, r2
 800037c:	44bc      	add	ip, r7
 800037e:	4463      	add	r3, ip
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	3302      	adds	r3, #2
 8000384:	0019      	movs	r1, r3
 8000386:	2314      	movs	r3, #20
 8000388:	18fa      	adds	r2, r7, r3
 800038a:	4809      	ldr	r0, [pc, #36]	; (80003b0 <EEPROM_Write_NBytes+0xd4>)
 800038c:	2300      	movs	r3, #0
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	2300      	movs	r3, #0
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	000b      	movs	r3, r1
 8000396:	212a      	movs	r1, #42	; 0x2a
 8000398:	f000 fb26 	bl	80009e8 <I2C_Master_TX>

	return 0;
 800039c:	2300      	movs	r3, #0
}
 800039e:	0018      	movs	r0, r3
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b047      	add	sp, #284	; 0x11c
 80003a4:	bd90      	pop	{r4, r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	fffffeef 	.word	0xfffffeef
 80003ac:	fffffefc 	.word	0xfffffefc
 80003b0:	40005400 	.word	0x40005400

080003b4 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(unsigned int Address , u8* DataOut , u8 DataLen)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af02      	add	r7, sp, #8
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	701a      	strb	r2, [r3, #0]
	u8 Buffer[2];

	Buffer[0] = (u8)(Address >> 8);        //Upper Address Byte
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	0a1b      	lsrs	r3, r3, #8
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	2114      	movs	r1, #20
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (u8)(Address);             //Lower Address Byte
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	705a      	strb	r2, [r3, #1]

	I2C_Master_TX(I2C1, EEPROM_Slave_Address, &Buffer, 2 , With_Stop, Start);
 80003d6:	187a      	adds	r2, r7, r1
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <EEPROM_Read_Byte+0x58>)
 80003da:	2300      	movs	r3, #0
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	2300      	movs	r3, #0
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	2302      	movs	r3, #2
 80003e4:	212a      	movs	r1, #42	; 0x2a
 80003e6:	f000 faff 	bl	80009e8 <I2C_Master_TX>

	I2C_Master_RX(I2C1, EEPROM_Slave_Address, DataOut, DataLen, With_Stop, repeated_start);
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	7819      	ldrb	r1, [r3, #0]
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	4806      	ldr	r0, [pc, #24]	; (800040c <EEPROM_Read_Byte+0x58>)
 80003f2:	2301      	movs	r3, #1
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2300      	movs	r3, #0
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	000b      	movs	r3, r1
 80003fc:	212a      	movs	r1, #42	; 0x2a
 80003fe:	f000 fb5f 	bl	8000ac0 <I2C_Master_RX>

	return 0;
 8000402:	2300      	movs	r3, #0


}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b006      	add	sp, #24
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40005400 	.word	0x40005400

08000410 <EXTI0_IRQHandler>:
 *                            ISR Functions Definitions
 * ==================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<0)  { EXTI->PR |= 1<<0  ; GP_IRQ_CallBack[0]()  ; }
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <EXTI0_IRQHandler+0x28>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	2201      	movs	r2, #1
 800041a:	4013      	ands	r3, r2
 800041c:	d008      	beq.n	8000430 <EXTI0_IRQHandler+0x20>
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <EXTI0_IRQHandler+0x28>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI0_IRQHandler+0x28>)
 8000424:	2101      	movs	r1, #1
 8000426:	430a      	orrs	r2, r1
 8000428:	615a      	str	r2, [r3, #20]
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <EXTI0_IRQHandler+0x2c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4798      	blx	r3
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40010400 	.word	0x40010400
 800043c:	20000028 	.word	0x20000028

08000440 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<1)  { EXTI->PR |= 1<<1  ; GP_IRQ_CallBack[1]()  ; }
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <EXTI1_IRQHandler+0x28>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	2202      	movs	r2, #2
 800044a:	4013      	ands	r3, r2
 800044c:	d008      	beq.n	8000460 <EXTI1_IRQHandler+0x20>
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <EXTI1_IRQHandler+0x28>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <EXTI1_IRQHandler+0x28>)
 8000454:	2102      	movs	r1, #2
 8000456:	430a      	orrs	r2, r1
 8000458:	615a      	str	r2, [r3, #20]
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <EXTI1_IRQHandler+0x2c>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	4798      	blx	r3
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	40010400 	.word	0x40010400
 800046c:	20000028 	.word	0x20000028

08000470 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<2)  { EXTI->PR |= 1<<2  ; GP_IRQ_CallBack[2]() ; }
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <EXTI2_IRQHandler+0x28>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	2204      	movs	r2, #4
 800047a:	4013      	ands	r3, r2
 800047c:	d008      	beq.n	8000490 <EXTI2_IRQHandler+0x20>
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <EXTI2_IRQHandler+0x28>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <EXTI2_IRQHandler+0x28>)
 8000484:	2104      	movs	r1, #4
 8000486:	430a      	orrs	r2, r1
 8000488:	615a      	str	r2, [r3, #20]
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <EXTI2_IRQHandler+0x2c>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	4798      	blx	r3
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40010400 	.word	0x40010400
 800049c:	20000028 	.word	0x20000028

080004a0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<3)  { EXTI->PR |= 1<<3  ; GP_IRQ_CallBack[3]() ; }
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <EXTI3_IRQHandler+0x28>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	2208      	movs	r2, #8
 80004aa:	4013      	ands	r3, r2
 80004ac:	d008      	beq.n	80004c0 <EXTI3_IRQHandler+0x20>
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <EXTI3_IRQHandler+0x28>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <EXTI3_IRQHandler+0x28>)
 80004b4:	2108      	movs	r1, #8
 80004b6:	430a      	orrs	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]
 80004ba:	4b04      	ldr	r3, [pc, #16]	; (80004cc <EXTI3_IRQHandler+0x2c>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	4798      	blx	r3
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40010400 	.word	0x40010400
 80004cc:	20000028 	.word	0x20000028

080004d0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<4)  { EXTI->PR |= 1<<4  ; GP_IRQ_CallBack[4]() ; }
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <EXTI4_IRQHandler+0x28>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	2210      	movs	r2, #16
 80004da:	4013      	ands	r3, r2
 80004dc:	d008      	beq.n	80004f0 <EXTI4_IRQHandler+0x20>
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <EXTI4_IRQHandler+0x28>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <EXTI4_IRQHandler+0x28>)
 80004e4:	2110      	movs	r1, #16
 80004e6:	430a      	orrs	r2, r1
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <EXTI4_IRQHandler+0x2c>)
 80004ec:	691b      	ldr	r3, [r3, #16]
 80004ee:	4798      	blx	r3
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40010400 	.word	0x40010400
 80004fc:	20000028 	.word	0x20000028

08000500 <EXTI5_9_IRQHandler>:

void EXTI5_9_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)  { EXTI->PR |= 1<<5  ; GP_IRQ_CallBack[5]()  ; }
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	2220      	movs	r2, #32
 800050a:	4013      	ands	r3, r2
 800050c:	d008      	beq.n	8000520 <EXTI5_9_IRQHandler+0x20>
 800050e:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000514:	2120      	movs	r1, #32
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <EXTI5_9_IRQHandler+0xa4>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4798      	blx	r3
	if (EXTI->PR & 1<<6)  { EXTI->PR |= 1<<6  ; GP_IRQ_CallBack[6]()  ; }
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	2240      	movs	r2, #64	; 0x40
 8000526:	4013      	ands	r3, r2
 8000528:	d008      	beq.n	800053c <EXTI5_9_IRQHandler+0x3c>
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	430a      	orrs	r2, r1
 8000534:	615a      	str	r2, [r3, #20]
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <EXTI5_9_IRQHandler+0xa4>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4798      	blx	r3
	if (EXTI->PR & 1<<7)  { EXTI->PR |= 1<<7  ; GP_IRQ_CallBack[7]()  ; }
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	4013      	ands	r3, r2
 8000544:	d008      	beq.n	8000558 <EXTI5_9_IRQHandler+0x58>
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	430a      	orrs	r2, r1
 8000550:	615a      	str	r2, [r3, #20]
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <EXTI5_9_IRQHandler+0xa4>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4798      	blx	r3
	if (EXTI->PR & 1<<8)  { EXTI->PR |= 1<<8  ; GP_IRQ_CallBack[8]()  ; }
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4013      	ands	r3, r2
 8000562:	d009      	beq.n	8000578 <EXTI5_9_IRQHandler+0x78>
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0049      	lsls	r1, r1, #1
 800056e:	430a      	orrs	r2, r1
 8000570:	615a      	str	r2, [r3, #20]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <EXTI5_9_IRQHandler+0xa4>)
 8000574:	6a1b      	ldr	r3, [r3, #32]
 8000576:	4798      	blx	r3
	if (EXTI->PR & 1<<9)  { EXTI->PR |= 1<<9  ; GP_IRQ_CallBack[9]()  ; }
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4013      	ands	r3, r2
 8000582:	d009      	beq.n	8000598 <EXTI5_9_IRQHandler+0x98>
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <EXTI5_9_IRQHandler+0xa0>)
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	0089      	lsls	r1, r1, #2
 800058e:	430a      	orrs	r2, r1
 8000590:	615a      	str	r2, [r3, #20]
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <EXTI5_9_IRQHandler+0xa4>)
 8000594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000596:	4798      	blx	r3
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40010400 	.word	0x40010400
 80005a4:	20000028 	.word	0x20000028

080005a8 <EXTI10_15_IRQHandler>:

void EXTI10_15_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

	if (EXTI->PR & 1<<10) { EXTI->PR |= 1<<10 ; GP_IRQ_CallBack[10]() ; }
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	4013      	ands	r3, r2
 80005b6:	d009      	beq.n	80005cc <EXTI10_15_IRQHandler+0x24>
 80005b8:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	00c9      	lsls	r1, r1, #3
 80005c2:	430a      	orrs	r2, r1
 80005c4:	615a      	str	r2, [r3, #20]
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <EXTI10_15_IRQHandler+0xd0>)
 80005c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ca:	4798      	blx	r3
	if (EXTI->PR & 1<<11) { EXTI->PR |= 1<<11 ; GP_IRQ_CallBack[11]() ; }
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	4013      	ands	r3, r2
 80005d6:	d009      	beq.n	80005ec <EXTI10_15_IRQHandler+0x44>
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0109      	lsls	r1, r1, #4
 80005e2:	430a      	orrs	r2, r1
 80005e4:	615a      	str	r2, [r3, #20]
 80005e6:	4b24      	ldr	r3, [pc, #144]	; (8000678 <EXTI10_15_IRQHandler+0xd0>)
 80005e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ea:	4798      	blx	r3
	if (EXTI->PR & 1<<12) { EXTI->PR |= 1<<12 ; GP_IRQ_CallBack[12]() ; }
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	015b      	lsls	r3, r3, #5
 80005f4:	4013      	ands	r3, r2
 80005f6:	d009      	beq.n	800060c <EXTI10_15_IRQHandler+0x64>
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0149      	lsls	r1, r1, #5
 8000602:	430a      	orrs	r2, r1
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <EXTI10_15_IRQHandler+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4798      	blx	r3
	if (EXTI->PR & 1<<13) { EXTI->PR |= 1<<13 ; GP_IRQ_CallBack[13]() ; }
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	019b      	lsls	r3, r3, #6
 8000614:	4013      	ands	r3, r2
 8000616:	d009      	beq.n	800062c <EXTI10_15_IRQHandler+0x84>
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800061a:	695a      	ldr	r2, [r3, #20]
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	0189      	lsls	r1, r1, #6
 8000622:	430a      	orrs	r2, r1
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <EXTI10_15_IRQHandler+0xd0>)
 8000628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062a:	4798      	blx	r3
	if (EXTI->PR & 1<<14) { EXTI->PR |= 1<<14 ; GP_IRQ_CallBack[14]() ; }
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	01db      	lsls	r3, r3, #7
 8000634:	4013      	ands	r3, r2
 8000636:	d009      	beq.n	800064c <EXTI10_15_IRQHandler+0xa4>
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	01c9      	lsls	r1, r1, #7
 8000642:	430a      	orrs	r2, r1
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <EXTI10_15_IRQHandler+0xd0>)
 8000648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800064a:	4798      	blx	r3
	if (EXTI->PR & 1<<15) { EXTI->PR |= 1<<15 ; GP_IRQ_CallBack[15]() ; }
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	4013      	ands	r3, r2
 8000656:	d009      	beq.n	800066c <EXTI10_15_IRQHandler+0xc4>
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800065a:	695a      	ldr	r2, [r3, #20]
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI10_15_IRQHandler+0xcc>)
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	0209      	lsls	r1, r1, #8
 8000662:	430a      	orrs	r2, r1
 8000664:	615a      	str	r2, [r3, #20]
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <EXTI10_15_IRQHandler+0xd0>)
 8000668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800066a:	4798      	blx	r3
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40010400 	.word	0x40010400
 8000678:	20000028 	.word	0x20000028

0800067c <GPIO_SetPinDirection>:
 */

#include "GPIO.h"

void GPIO_SetPinDirection(GPIO_t* GPIOx , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	0008      	movs	r0, r1
 8000686:	0011      	movs	r1, r2
 8000688:	1cfb      	adds	r3, r7, #3
 800068a:	1c02      	adds	r2, r0, #0
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	1cbb      	adds	r3, r7, #2
 8000690:	1c0a      	adds	r2, r1, #0
 8000692:	701a      	strb	r2, [r3, #0]

	if(Copy_u8Pin <= 7){
 8000694:	1cfb      	adds	r3, r7, #3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d818      	bhi.n	80006ce <GPIO_SetPinDirection+0x52>
		GPIOx->CRL &= ~((0b1111) << (Copy_u8Pin * 4));     // Clear the Four Bits Of each pin
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1cfa      	adds	r2, r7, #3
 80006a2:	7812      	ldrb	r2, [r2, #0]
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	210f      	movs	r1, #15
 80006a8:	4091      	lsls	r1, r2
 80006aa:	000a      	movs	r2, r1
 80006ac:	43d2      	mvns	r2, r2
 80006ae:	401a      	ands	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); // Set 4 Bit of each pin by Copy_u8Mode Value
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1cba      	adds	r2, r7, #2
 80006ba:	7811      	ldrb	r1, [r2, #0]
 80006bc:	1cfa      	adds	r2, r7, #3
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	4091      	lsls	r1, r2
 80006c4:	000a      	movs	r2, r1
 80006c6:	431a      	orrs	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
		Copy_u8Pin = Copy_u8Pin - 8;
		GPIOx->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
		GPIOx->CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
	}

}
 80006cc:	e020      	b.n	8000710 <GPIO_SetPinDirection+0x94>
	else if(Copy_u8Pin <= 15){
 80006ce:	1cfb      	adds	r3, r7, #3
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d81c      	bhi.n	8000710 <GPIO_SetPinDirection+0x94>
		Copy_u8Pin = Copy_u8Pin - 8;
 80006d6:	1cfb      	adds	r3, r7, #3
 80006d8:	1cfa      	adds	r2, r7, #3
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	3a08      	subs	r2, #8
 80006de:	701a      	strb	r2, [r3, #0]
		GPIOx->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	1cfa      	adds	r2, r7, #3
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	210f      	movs	r1, #15
 80006ec:	4091      	lsls	r1, r2
 80006ee:	000a      	movs	r2, r1
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	401a      	ands	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	1cba      	adds	r2, r7, #2
 80006fe:	7811      	ldrb	r1, [r2, #0]
 8000700:	1cfa      	adds	r2, r7, #3
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	0092      	lsls	r2, r2, #2
 8000706:	4091      	lsls	r1, r2
 8000708:	000a      	movs	r2, r1
 800070a:	431a      	orrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	605a      	str	r2, [r3, #4]
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}

08000718 <I2C_Init>:
 *                            APIS
 * =================================================================
 */

void I2C_Init(I2C_t* I2Cx , I2C_Config* I2C_config)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
	u16 Temp_Reg , Freq_Range = 0;
 8000722:	2316      	movs	r3, #22
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	2200      	movs	r2, #0
 8000728:	801a      	strh	r2, [r3, #0]
	u32 Pclk1 = 8000000;
 800072a:	4b8e      	ldr	r3, [pc, #568]	; (8000964 <I2C_Init+0x24c>)
 800072c:	613b      	str	r3, [r7, #16]
	u16 Result = 0;
 800072e:	230e      	movs	r3, #14
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	2200      	movs	r2, #0
 8000734:	801a      	strh	r2, [r3, #0]

	//Enable RCC Clock
	if(I2Cx == I2C1){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a8b      	ldr	r2, [pc, #556]	; (8000968 <I2C_Init+0x250>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d10f      	bne.n	800075e <I2C_Init+0x46>
		G_I2C_Config[I2C1_Index] = *I2C_config;
 800073e:	4b8b      	ldr	r3, [pc, #556]	; (800096c <I2C_Init+0x254>)
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000744:	c313      	stmia	r3!, {r0, r1, r4}
 8000746:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000748:	c313      	stmia	r3!, {r0, r1, r4}
 800074a:	ca03      	ldmia	r2!, {r0, r1}
 800074c:	c303      	stmia	r3!, {r0, r1}
		RCC_I2C1_CLK_EN();
 800074e:	4b88      	ldr	r3, [pc, #544]	; (8000970 <I2C_Init+0x258>)
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	4b87      	ldr	r3, [pc, #540]	; (8000970 <I2C_Init+0x258>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0389      	lsls	r1, r1, #14
 8000758:	430a      	orrs	r2, r1
 800075a:	61da      	str	r2, [r3, #28]
 800075c:	e00f      	b.n	800077e <I2C_Init+0x66>
	}
	else{
		G_I2C_Config[I2C2_Index] = *I2C_config;
 800075e:	4b83      	ldr	r3, [pc, #524]	; (800096c <I2C_Init+0x254>)
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	3320      	adds	r3, #32
 8000764:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000766:	c313      	stmia	r3!, {r0, r1, r4}
 8000768:	ca13      	ldmia	r2!, {r0, r1, r4}
 800076a:	c313      	stmia	r3!, {r0, r1, r4}
 800076c:	ca03      	ldmia	r2!, {r0, r1}
 800076e:	c303      	stmia	r3!, {r0, r1}
		RCC_I2C2_CLK_EN();
 8000770:	4b7f      	ldr	r3, [pc, #508]	; (8000970 <I2C_Init+0x258>)
 8000772:	69da      	ldr	r2, [r3, #28]
 8000774:	4b7e      	ldr	r3, [pc, #504]	; (8000970 <I2C_Init+0x258>)
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	03c9      	lsls	r1, r1, #15
 800077a:	430a      	orrs	r2, r1
 800077c:	61da      	str	r2, [r3, #28]
	}

	if(I2C_config->Mode == I2C_Mode){
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d000      	beq.n	8000788 <I2C_Init+0x70>
 8000786:	e0a2      	b.n	80008ce <I2C_Init+0x1b6>

		/*********************Init Timing****************************/
		//I2C_CR2 -> Bits 5:0FREQ[5:0]: Peripheral clock frequency
		/* get the I2Cx CR2 Value */
		Temp_Reg = I2Cx->CR2;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	240c      	movs	r4, #12
 800078e:	193b      	adds	r3, r7, r4
 8000790:	801a      	strh	r2, [r3, #0]
		/* Clear FREQ[5:0] bits */
		Temp_Reg &= ~(I2C_CR2_FREQ);
 8000792:	193b      	adds	r3, r7, r4
 8000794:	193a      	adds	r2, r7, r4
 8000796:	8812      	ldrh	r2, [r2, #0]
 8000798:	213f      	movs	r1, #63	; 0x3f
 800079a:	438a      	bics	r2, r1
 800079c:	801a      	strh	r2, [r3, #0]
		/* Get Pclk1 Freq Value */
		Pclk1 = RCC_GetPCLK1Freq();
 800079e:	f000 fb6f 	bl	8000e80 <RCC_GetPCLK1Freq>
 80007a2:	0003      	movs	r3, r0
 80007a4:	613b      	str	r3, [r7, #16]
		/* Set Freq bits depending on Pclk1 Value */
		Freq_Range = Pclk1 / 1000000;
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	4972      	ldr	r1, [pc, #456]	; (8000974 <I2C_Init+0x25c>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff fce4 	bl	8000178 <__udivsi3>
 80007b0:	0003      	movs	r3, r0
 80007b2:	001a      	movs	r2, r3
 80007b4:	2016      	movs	r0, #22
 80007b6:	183b      	adds	r3, r7, r0
 80007b8:	801a      	strh	r2, [r3, #0]

		Temp_Reg |= Freq_Range;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	1939      	adds	r1, r7, r4
 80007be:	183a      	adds	r2, r7, r0
 80007c0:	8809      	ldrh	r1, [r1, #0]
 80007c2:	8812      	ldrh	r2, [r2, #0]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	801a      	strh	r2, [r3, #0]
		I2Cx->CR2 = Temp_Reg;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	881a      	ldrh	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	605a      	str	r2, [r3, #4]

		//•Configure the clock control registers
		/* Disable the selected I2C Peripheral to configure time */

		I2Cx->CR1 &= ~(I2C_CR1_PE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2201      	movs	r2, #1
 80007d6:	4393      	bics	r3, r2
 80007d8:	001a      	movs	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]

		Temp_Reg = 0;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	801a      	strh	r2, [r3, #0]

		/* Configure speed in standard mode */
		if((I2C_config->ClockSpeed == I2C_SCLK_SM_50K) || (I2C_config->ClockSpeed == I2C_SCLK_SM_100K)){
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a63      	ldr	r2, [pc, #396]	; (8000978 <I2C_Init+0x260>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d004      	beq.n	80007f8 <I2C_Init+0xe0>
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a62      	ldr	r2, [pc, #392]	; (800097c <I2C_Init+0x264>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d11e      	bne.n	8000836 <I2C_Init+0x11e>
			/* calculate Standard mode speed */
			//    Tclk/2 = CRR * Tpclk1
			//    CRR = Tclk/(2*Tpclk1)
			//    CRR = Fpclk1 / (2 * I2C_ClockFreq)

			Result = (u16)(Pclk1 / (I2C_config->ClockSpeed << 1 ));
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	0019      	movs	r1, r3
 8000800:	6938      	ldr	r0, [r7, #16]
 8000802:	f7ff fcb9 	bl	8000178 <__udivsi3>
 8000806:	0003      	movs	r3, r0
 8000808:	001a      	movs	r2, r3
 800080a:	240e      	movs	r4, #14
 800080c:	193b      	adds	r3, r7, r4
 800080e:	801a      	strh	r2, [r3, #0]
			Temp_Reg |= Result;
 8000810:	200c      	movs	r0, #12
 8000812:	183b      	adds	r3, r7, r0
 8000814:	1839      	adds	r1, r7, r0
 8000816:	193a      	adds	r2, r7, r4
 8000818:	8809      	ldrh	r1, [r1, #0]
 800081a:	8812      	ldrh	r2, [r2, #0]
 800081c:	430a      	orrs	r2, r1
 800081e:	801a      	strh	r2, [r3, #0]

			/*Write to I2Cx CCR*/
			I2Cx->CCR = Temp_Reg;
 8000820:	183b      	adds	r3, r7, r0
 8000822:	881a      	ldrh	r2, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	61da      	str	r2, [r3, #28]
			/*For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			therefore the TRISE[5:0] bits must be programmed with 09h.
			(1000 ns / 125 ns = 8 + 1)*/

			I2Cx->TRISE = Freq_Range + 1;
 8000828:	2316      	movs	r3, #22
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	001a      	movs	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	621a      	str	r2, [r3, #32]
			//Fast mode not supported Yet
		}

		/********************* I2Cx CR1 Configuration***********************/
		/* get the I2Cx CR1 Value */
		Temp_Reg = I2Cx->CR1;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	200c      	movs	r0, #12
 800083c:	183b      	adds	r3, r7, r0
 800083e:	801a      	strh	r2, [r3, #0]

		Temp_Reg |= (u16)(I2C_config->Mode | I2C_config->StretchMode);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	b29a      	uxth	r2, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	b29b      	uxth	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b299      	uxth	r1, r3
 8000850:	183b      	adds	r3, r7, r0
 8000852:	183a      	adds	r2, r7, r0
 8000854:	8812      	ldrh	r2, [r2, #0]
 8000856:	430a      	orrs	r2, r1
 8000858:	801a      	strh	r2, [r3, #0]

		/*Write to I2Cx CR1*/
		I2Cx->CR1 = Temp_Reg;
 800085a:	183b      	adds	r3, r7, r0
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]

		/********************* I2Cx OAR1 & I2Cx OAR2 Configuration***********************/
		Temp_Reg = 0;
 8000862:	183b      	adds	r3, r7, r0
 8000864:	2200      	movs	r2, #0
 8000866:	801a      	strh	r2, [r3, #0]

		if(I2C_config->Slave_Device_Address.Enable_Dual_ADD == 1){
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	8a1b      	ldrh	r3, [r3, #16]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d112      	bne.n	8000896 <I2C_Init+0x17e>

			Temp_Reg = I2C_OAR2_ENDUAL;
 8000870:	210c      	movs	r1, #12
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2201      	movs	r2, #1
 8000876:	801a      	strh	r2, [r3, #0]
			Temp_Reg |= I2C_config->Slave_Device_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	8a9b      	ldrh	r3, [r3, #20]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	b21a      	sxth	r2, r3
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2000      	movs	r0, #0
 8000884:	5e1b      	ldrsh	r3, [r3, r0]
 8000886:	4313      	orrs	r3, r2
 8000888:	b21a      	sxth	r2, r3
 800088a:	187b      	adds	r3, r7, r1
 800088c:	801a      	strh	r2, [r3, #0]
			I2Cx->OAR2 = Temp_Reg;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	881a      	ldrh	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60da      	str	r2, [r3, #12]
		}
		Temp_Reg = 0;
 8000896:	210c      	movs	r1, #12
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	801a      	strh	r2, [r3, #0]
		Temp_Reg |= I2C_config->Slave_Device_Address.Primary_Slave_Address << I2C_OAR1_ADD_Pos;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	8a5b      	ldrh	r3, [r3, #18]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2000      	movs	r0, #0
 80008aa:	5e1b      	ldrsh	r3, [r3, r0]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	0008      	movs	r0, r1
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	801a      	strh	r2, [r3, #0]
		Temp_Reg |= I2C_config->Slave_Device_Address.I2C_Addressing_Slave_Mode;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	b299      	uxth	r1, r3
 80008bc:	183b      	adds	r3, r7, r0
 80008be:	183a      	adds	r2, r7, r0
 80008c0:	8812      	ldrh	r2, [r2, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	801a      	strh	r2, [r3, #0]
		I2Cx->OAR1 = Temp_Reg;
 80008c6:	183b      	adds	r3, r7, r0
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]
	else{
		//SMBs not supported Yet
	}

	//Interrupt Mode(Slave_Mode)
	if(I2C_config->P_Slave_Event_CallBack != NULL){
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d03c      	beq.n	8000950 <I2C_Init+0x238>

		//Enable IRQ
		I2Cx->CR2 |= I2C_CR2_ITERREN;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0052      	lsls	r2, r2, #1
 80008de:	431a      	orrs	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	431a      	orrs	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITBUFEN;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <I2C_Init+0x250>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d10d      	bne.n	8000924 <I2C_Init+0x20c>
			NVIC_IRQ_I2C_Enable(I2C1_EV_IRQn);
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <I2C_Init+0x268>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <I2C_Init+0x268>)
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	0609      	lsls	r1, r1, #24
 8000912:	430a      	orrs	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
			NVIC_IRQ_I2C_Enable(I2C1_ER_IRQn);
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <I2C_Init+0x268>)
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <I2C_Init+0x268>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	e00f      	b.n	8000944 <I2C_Init+0x22c>
		}
		else if(I2Cx == I2C2){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <I2C_Init+0x26c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d10b      	bne.n	8000944 <I2C_Init+0x22c>
			NVIC_IRQ_I2C_Enable(I2C2_EV_IRQn);
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <I2C_Init+0x268>)
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <I2C_Init+0x268>)
 8000932:	2102      	movs	r1, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	605a      	str	r2, [r3, #4]
			NVIC_IRQ_I2C_Enable(I2C2_ER_IRQn);
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <I2C_Init+0x268>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <I2C_Init+0x268>)
 800093e:	2104      	movs	r1, #4
 8000940:	430a      	orrs	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
		}

		I2Cx->SR1 = 0;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |= I2C_CR1_PE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2201      	movs	r2, #1
 8000956:	431a      	orrs	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b007      	add	sp, #28
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	007a1200 	.word	0x007a1200
 8000968:	40005400 	.word	0x40005400
 800096c:	20000064 	.word	0x20000064
 8000970:	40021000 	.word	0x40021000
 8000974:	000f4240 	.word	0x000f4240
 8000978:	0000c350 	.word	0x0000c350
 800097c:	000186a0 	.word	0x000186a0
 8000980:	e000e100 	.word	0xe000e100
 8000984:	40005800 	.word	0x40005800

08000988 <I2C_GPIO_SetPins>:
		RCC_I2C2_CLK_DIS();
	}
}

void I2C_GPIO_SetPins(I2C_t* I2Cx)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <I2C_GPIO_SetPins+0x54>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d10c      	bne.n	80009b2 <I2C_GPIO_SetPins+0x2a>

		//PB6   I2C1_SCL
		//PB7   I2C1_SDA

		GPIO_SetPinDirection(GPIOB, PIN6, OUTPUT_SPEED_10MHZ_AFOD);
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <I2C_GPIO_SetPins+0x58>)
 800099a:	220d      	movs	r2, #13
 800099c:	2106      	movs	r1, #6
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff fe6c 	bl	800067c <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIOB, PIN7, OUTPUT_SPEED_10MHZ_AFOD);
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <I2C_GPIO_SetPins+0x58>)
 80009a6:	220d      	movs	r2, #13
 80009a8:	2107      	movs	r1, #7
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff fe66 	bl	800067c <GPIO_SetPinDirection>
		//PB11   I2C2_SDA

		GPIO_SetPinDirection(GPIOB, PIN10, OUTPUT_SPEED_10MHZ_AFOD);
		GPIO_SetPinDirection(GPIOB, PIN11, OUTPUT_SPEED_10MHZ_AFOD);
	}
}
 80009b0:	e00f      	b.n	80009d2 <I2C_GPIO_SetPins+0x4a>
	else if(I2Cx == I2C2){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <I2C_GPIO_SetPins+0x5c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d10b      	bne.n	80009d2 <I2C_GPIO_SetPins+0x4a>
		GPIO_SetPinDirection(GPIOB, PIN10, OUTPUT_SPEED_10MHZ_AFOD);
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <I2C_GPIO_SetPins+0x58>)
 80009bc:	220d      	movs	r2, #13
 80009be:	210a      	movs	r1, #10
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fe5b 	bl	800067c <GPIO_SetPinDirection>
		GPIO_SetPinDirection(GPIOB, PIN11, OUTPUT_SPEED_10MHZ_AFOD);
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <I2C_GPIO_SetPins+0x58>)
 80009c8:	220d      	movs	r2, #13
 80009ca:	210b      	movs	r1, #11
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fe55 	bl	800067c <GPIO_SetPinDirection>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40005400 	.word	0x40005400
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	40005800 	.word	0x40005800

080009e8 <I2C_Master_TX>:

void I2C_Master_TX(I2C_t* I2Cx , u16 devAdd , u8* data , u32 dataLen , StopCondition Stop , Repeated_Start Start)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	230a      	movs	r3, #10
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	1c0a      	adds	r2, r1, #0
 80009fa:	801a      	strh	r2, [r3, #0]
	int i = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

	//1.Set the Start bit in the I2C_CR1 to generate a start condition */
	I2C_Generate_START(I2Cx, ENABLE, Start);
 8000a00:	2324      	movs	r3, #36	; 0x24
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f8d8 	bl	8000bc0 <I2C_Generate_START>

	//2.Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_Get_FlagStatus(I2Cx, EV5));
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2101      	movs	r1, #1
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f96c 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d0f8      	beq.n	8000a12 <I2C_Master_TX+0x2a>

	//3.Send Address
	I2C_SendAddress(I2Cx, devAdd, Direction_TX);
 8000a20:	230a      	movs	r3, #10
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	8819      	ldrh	r1, [r3, #0]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f938 	bl	8000ca0 <I2C_SendAddress>

	//4.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_FlagStatus(I2Cx, EV6));
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2102      	movs	r1, #2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f95c 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d0f8      	beq.n	8000a32 <I2C_Master_TX+0x4a>

	//5. TRA, BUSY, MSL, TXE
	while(!I2C_Get_FlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <I2C_Master_TX+0xd4>)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 f953 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d0f7      	beq.n	8000a42 <I2C_Master_TX+0x5a>

	for(i=0; i<dataLen; ++i){
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e019      	b.n	8000a8c <I2C_Master_TX+0xa4>

		//6.EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		while(!I2C_Get_FlagStatus(I2Cx, EV8_1));
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f948 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d0f8      	beq.n	8000a5a <I2C_Master_TX+0x72>
		//Write Data to DR register
		I2Cx->DR = data[i];
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	18d3      	adds	r3, r2, r3
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	001a      	movs	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	611a      	str	r2, [r3, #16]
		//7.EV8: TxE=1, shift register not empty,. data register empty, cleared by writing DR register
		while(!I2C_Get_FlagStatus(I2Cx, EV8));
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 f939 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d0f8      	beq.n	8000a78 <I2C_Master_TX+0x90>
	for(i=0; i<dataLen; ++i){
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8e1      	bhi.n	8000a58 <I2C_Master_TX+0x70>
	}

	//8.Generate stop condition
	if(Stop == With_Stop){
 8000a94:	2320      	movs	r3, #32
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d105      	bne.n	8000aaa <I2C_Master_TX+0xc2>
		I2C_Generate_STOP(I2Cx, ENABLE);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f8bc 	bl	8000c20 <I2C_Generate_STOP>
	else{
		I2C_Generate_STOP(I2Cx, DISABLE);
	}


}
 8000aa8:	e004      	b.n	8000ab4 <I2C_Master_TX+0xcc>
		I2C_Generate_STOP(I2Cx, DISABLE);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2100      	movs	r1, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f8b6 	bl	8000c20 <I2C_Generate_STOP>
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	00070080 	.word	0x00070080

08000ac0 <I2C_Master_RX>:
void I2C_Master_RX(I2C_t* I2Cx , u16 devAdd , u8* data , u32 dataLen , StopCondition Stop , Repeated_Start Start)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	230a      	movs	r3, #10
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	1c0a      	adds	r2, r1, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
	int i = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

	u8 index = I2Cx==I2C1 ? I2C1_Index : I2C2_Index;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4a37      	ldr	r2, [pc, #220]	; (8000bb8 <I2C_Master_RX+0xf8>)
 8000adc:	4694      	mov	ip, r2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	4193      	sbcs	r3, r2
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	2313      	movs	r3, #19
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	701a      	strb	r2, [r3, #0]

	//1.Set the Start bit in the I2C_CR1 to generate a start condition */
	I2C_Generate_START(I2Cx, ENABLE, Start);
 8000aec:	2324      	movs	r3, #36	; 0x24
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2101      	movs	r1, #1
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f862 	bl	8000bc0 <I2C_Generate_START>

	//2.Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_Get_FlagStatus(I2Cx, EV5));
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2101      	movs	r1, #1
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f8f6 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d0f8      	beq.n	8000afe <I2C_Master_RX+0x3e>

	//3.Send Address
	I2C_SendAddress(I2Cx, devAdd, Direction_RX);
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	8819      	ldrh	r1, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2201      	movs	r2, #1
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f8c2 	bl	8000ca0 <I2C_SendAddress>

	//4.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_FlagStatus(I2Cx, EV6));
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2102      	movs	r1, #2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f8e6 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d0f8      	beq.n	8000b1e <I2C_Master_RX+0x5e>

	I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 f895 	bl	8000c60 <I2C_AcknowledgeConfig>

	if(dataLen){
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d01d      	beq.n	8000b78 <I2C_Master_RX+0xb8>

		for(i=dataLen; i>1; i--){
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e012      	b.n	8000b68 <I2C_Master_RX+0xa8>

			//wait till RXNE becomes 1
			while(!I2C_Get_FlagStatus(I2Cx, EV7));
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2105      	movs	r1, #5
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 f8d3 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d0f8      	beq.n	8000b44 <I2C_Master_RX+0x84>
			//read the data from the data register
			*data = I2Cx->DR;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	701a      	strb	r2, [r3, #0]
			//increment to read the next byte
			data++;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
		for(i=dataLen; i>1; i--){
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	dce9      	bgt.n	8000b42 <I2C_Master_RX+0x82>
		}

		I2C_AcknowledgeConfig(I2Cx, DISABLE);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2100      	movs	r1, #0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f874 	bl	8000c60 <I2C_AcknowledgeConfig>

	}

	if(Stop == With_Stop){
 8000b78:	2320      	movs	r3, #32
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d104      	bne.n	8000b8c <I2C_Master_RX+0xcc>
		//Generate stop condition
		I2C_Generate_STOP(I2Cx, ENABLE);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2101      	movs	r1, #1
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 f84a 	bl	8000c20 <I2C_Generate_STOP>
	}

	//re-enable Ack
	if(G_I2C_Config[index].ACK_Control == I2C_Ack_Enable){
 8000b8c:	2313      	movs	r3, #19
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <I2C_Master_RX+0xfc>)
 8000b94:	015b      	lsls	r3, r3, #5
 8000b96:	18d3      	adds	r3, r2, r3
 8000b98:	330c      	adds	r3, #12
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d104      	bne.n	8000bae <I2C_Master_RX+0xee>
		I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 f859 	bl	8000c60 <I2C_AcknowledgeConfig>
	}

}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b006      	add	sp, #24
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	bfffac00 	.word	0xbfffac00
 8000bbc:	20000064 	.word	0x20000064

08000bc0 <I2C_Generate_START>:

void I2C_Generate_START(I2C_t* I2Cx , FunctionalState NewState , Repeated_Start start)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	0008      	movs	r0, r1
 8000bca:	0011      	movs	r1, r2
 8000bcc:	1cfb      	adds	r3, r7, #3
 8000bce:	1c02      	adds	r2, r0, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	1cbb      	adds	r3, r7, #2
 8000bd4:	1c0a      	adds	r2, r1, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
	if(start != repeated_start){
 8000bd8:	1cbb      	adds	r3, r7, #2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d007      	beq.n	8000bf0 <I2C_Generate_START+0x30>
		//Check if Bus is Idle
		while(I2C_Get_FlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f884 	bl	8000cf4 <I2C_Get_FlagStatus>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d1f8      	bne.n	8000be2 <I2C_Generate_START+0x22>
	0: No Start generation
	1: Repeated start generation
	In Slave mode:
	0: No Start generation
	1: Start generation when the bus is free*/
	if(NewState != DISABLE){
 8000bf0:	1cfb      	adds	r3, r7, #3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d007      	beq.n	8000c08 <I2C_Generate_START+0x48>
		/* Generate a Start Condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	0052      	lsls	r2, r2, #1
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
	else{
		/* Disable the start condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}

}
 8000c06:	e005      	b.n	8000c14 <I2C_Generate_START+0x54>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <I2C_Generate_START+0x5c>)
 8000c0e:	401a      	ands	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	fffffeff 	.word	0xfffffeff

08000c20 <I2C_Generate_STOP>:

void I2C_Generate_STOP(I2C_t* I2Cx , FunctionalState NewState)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	000a      	movs	r2, r1
 8000c2a:	1cfb      	adds	r3, r7, #3
 8000c2c:	701a      	strb	r2, [r3, #0]
	detected, set by hardware when a timeout error is detected.
	In Master Mode:
	0: No Stop generation.
	1: Stop generation after the current byte transfer or after the current Start condition is sent.*/

	if(NewState != DISABLE){
 8000c2e:	1cfb      	adds	r3, r7, #3
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <I2C_Generate_STOP+0x26>
		/* Generate a Stop Condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
	}
	else{
		/*  No Stop generation. */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000c44:	e005      	b.n	8000c52 <I2C_Generate_STOP+0x32>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <I2C_Generate_STOP+0x3c>)
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	fffffdff 	.word	0xfffffdff

08000c60 <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_t* I2Cx , FunctionalState NewState)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	000a      	movs	r2, r1
 8000c6a:	1cfb      	adds	r3, r7, #3
 8000c6c:	701a      	strb	r2, [r3, #0]
	/*Bit 10 ACK: Acknowledge enable
	This bit is set and cleared by software and cleared by hardware when PE=0.
	0: No acknowledge returned
	1: Acknowledge returned after a byte is received (matched address or data)*/

	if(NewState != DISABLE){
 8000c6e:	1cfb      	adds	r3, r7, #3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d007      	beq.n	8000c86 <I2C_AcknowledgeConfig+0x26>
		/*Acknowledge returned after a byte is received (matched address or data)*/
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	00d2      	lsls	r2, r2, #3
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	601a      	str	r2, [r3, #0]

	else{
		/* No acknowledge returned*/
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000c84:	e005      	b.n	8000c92 <I2C_AcknowledgeConfig+0x32>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <I2C_AcknowledgeConfig+0x3c>)
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	fffffbff 	.word	0xfffffbff

08000ca0 <I2C_SendAddress>:

void I2C_SendAddress(I2C_t* I2Cx , u16 Address , I2C_Direction Direction)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	0008      	movs	r0, r1
 8000caa:	0011      	movs	r1, r2
 8000cac:	1cbb      	adds	r3, r7, #2
 8000cae:	1c02      	adds	r2, r0, #0
 8000cb0:	801a      	strh	r2, [r3, #0]
 8000cb2:	1c7b      	adds	r3, r7, #1
 8000cb4:	1c0a      	adds	r2, r1, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
	//Supported only 7Bit Mode
	Address = Address << 1;
 8000cb8:	1cba      	adds	r2, r7, #2
 8000cba:	1cbb      	adds	r3, r7, #2
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	18db      	adds	r3, r3, r3
 8000cc0:	8013      	strh	r3, [r2, #0]

	if(Direction != Direction_TX){
 8000cc2:	1c7b      	adds	r3, r7, #1
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <I2C_SendAddress+0x38>
		/* set the address bit0 for read */
		Address |= 1<<0;
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	1cba      	adds	r2, r7, #2
 8000cce:	8812      	ldrh	r2, [r2, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	801a      	strh	r2, [r3, #0]
 8000cd6:	e005      	b.n	8000ce4 <I2C_SendAddress+0x44>
	}
	else{
		/*Reset the address bit0 for write */
		Address &= ~(1 << 0);
 8000cd8:	1cbb      	adds	r3, r7, #2
 8000cda:	1cba      	adds	r2, r7, #2
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	438a      	bics	r2, r1
 8000ce2:	801a      	strh	r2, [r3, #0]
	}

	/* Send Address */
	I2Cx->DR = Address;
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	611a      	str	r2, [r3, #16]
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <I2C_Get_FlagStatus>:

FlagStatus I2C_Get_FlagStatus(I2C_t* I2Cx , Status Flag)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	FlagStatus BitStatus = RESET;
 8000cfe:	2317      	movs	r3, #23
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
	u32 Flag1 = 0 , Flag2 = 0 , LastEvent = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]

	switch(Flag)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d805      	bhi.n	8000d24 <I2C_Get_FlagStatus+0x30>
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d255      	bcs.n	8000dc8 <I2C_Get_FlagStatus+0xd4>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d016      	beq.n	8000d4e <I2C_Get_FlagStatus+0x5a>
 8000d20:	d824      	bhi.n	8000d6c <I2C_Get_FlagStatus+0x78>
 8000d22:	e005      	b.n	8000d30 <I2C_Get_FlagStatus+0x3c>
 8000d24:	2b05      	cmp	r3, #5
 8000d26:	d05e      	beq.n	8000de6 <I2C_Get_FlagStatus+0xf2>
 8000d28:	4a3a      	ldr	r2, [pc, #232]	; (8000e14 <I2C_Get_FlagStatus+0x120>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d02d      	beq.n	8000d8a <I2C_Get_FlagStatus+0x96>
 8000d2e:	e069      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
		– Set by hardware on detection of SDA or SCL low
		– cleared by hardware on detection of a Stop condition.
		It indicates a communication in progress on the bus. This information is still updated when
		the interface is disabled (PE=0).*/

		if(I2Cx->SR2 & I2C_SR2_BUSY){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	2202      	movs	r2, #2
 8000d36:	4013      	ands	r3, r2
 8000d38:	d004      	beq.n	8000d44 <I2C_Get_FlagStatus+0x50>
			BitStatus = SET;
 8000d3a:	2317      	movs	r3, #23
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
		}
		else{
			BitStatus = RESET;
		}
		break;
 8000d42:	e05f      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
			BitStatus = RESET;
 8000d44:	2317      	movs	r3, #23
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
		break;
 8000d4c:	e05a      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
		1: Start condition generated.
		– Set when a Start condition generated.
		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		hardware when PE=0*/

		if(I2Cx->SR1 & I2C_SR1_SB){
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	2201      	movs	r2, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	d004      	beq.n	8000d62 <I2C_Get_FlagStatus+0x6e>
			BitStatus = SET;
 8000d58:	2317      	movs	r3, #23
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
		}
		else{
			BitStatus = RESET;
		}
		break;
 8000d60:	e050      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
			BitStatus = RESET;
 8000d62:	2317      	movs	r3, #23
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		break;
 8000d6a:	e04b      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
		   Address sent (Master)
           0: No end of address transmission
           1: End of address transmission
           – For 7-bit addressing, the bit is set after the ACK of the byte.
		 */
		if(I2Cx->SR1 & I2C_SR1_ADDR){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	2202      	movs	r2, #2
 8000d72:	4013      	ands	r3, r2
 8000d74:	d004      	beq.n	8000d80 <I2C_Get_FlagStatus+0x8c>
			BitStatus = SET;
 8000d76:	2317      	movs	r3, #23
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
		}
		else{
			BitStatus = RESET;
		}
		break;
 8000d7e:	e041      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
			BitStatus = RESET;
 8000d80:	2317      	movs	r3, #23
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
		break;
 8000d88:	e03c      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
	case MASTER_BYTE_TRANSMITTING:
		Flag1 = I2Cx->SR1;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
		Flag2 = I2Cx->SR2;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	60fb      	str	r3, [r7, #12]
		Flag2 = Flag2 << 16;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	041b      	lsls	r3, r3, #16
 8000d9a:	60fb      	str	r3, [r7, #12]

		LastEvent = (Flag1 | Flag2) & ((u32)0x00FFFFFF);
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	60bb      	str	r3, [r7, #8]

		if((LastEvent & Flag) == Flag){
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4013      	ands	r3, r2
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d104      	bne.n	8000dbe <I2C_Get_FlagStatus+0xca>
			BitStatus = SET;
 8000db4:	2317      	movs	r3, #23
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
		}
		else{
			BitStatus = RESET;
		}
		break;
 8000dbc:	e022      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
			BitStatus = RESET;
 8000dbe:	2317      	movs	r3, #23
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
		break;
 8000dc6:	e01d      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
		0: Data register not empty
		1: Data register empty
		– Set when DR is empty in transmission. TxE is not set during address phase.
		– Cleared by software writing to the DR register or by hardware after a start or a stop condition
		or when PE=0.*/
		if(I2Cx->SR1 & I2C_SR1_TXE){
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d004      	beq.n	8000ddc <I2C_Get_FlagStatus+0xe8>
			BitStatus = SET;
 8000dd2:	2317      	movs	r3, #23
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
		}
		else{
			BitStatus = RESET;
		}
		break;
 8000dda:	e013      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
			BitStatus = RESET;
 8000ddc:	2317      	movs	r3, #23
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
		break;
 8000de4:	e00e      	b.n	8000e04 <I2C_Get_FlagStatus+0x110>
		/*Bit 6RxNE: Data register not empty (receivers)
		0: Data register empty
		1: Data register not empty
		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		– Cleared by software reading or writing the DR register or by hardware when PE=0.*/
		if(I2Cx->SR1 & I2C_SR1_RXNE){
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	2240      	movs	r2, #64	; 0x40
 8000dec:	4013      	ands	r3, r2
 8000dee:	d004      	beq.n	8000dfa <I2C_Get_FlagStatus+0x106>
			BitStatus = SET;
 8000df0:	2317      	movs	r3, #23
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
		}
		else{
			BitStatus = RESET;
		}
		break;
 8000df8:	e003      	b.n	8000e02 <I2C_Get_FlagStatus+0x10e>
			BitStatus = RESET;
 8000dfa:	2317      	movs	r3, #23
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
		break;
 8000e02:	46c0      	nop			; (mov r8, r8)
	}

	return BitStatus;
 8000e04:	2317      	movs	r3, #23
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	781b      	ldrb	r3, [r3, #0]
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b006      	add	sp, #24
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	00070080 	.word	0x00070080

08000e18 <RCC_GetSYCLKFreq>:




u32 RCC_GetSYCLKFreq(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: Not applicable
	*/
	u32 CLK;
	switch( (RCC->CFGR >> 2) & 0b11)
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <RCC_GetSYCLKFreq+0x30>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	d002      	beq.n	8000e30 <RCC_GetSYCLKFreq+0x18>
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d003      	beq.n	8000e36 <RCC_GetSYCLKFreq+0x1e>
 8000e2e:	e005      	b.n	8000e3c <RCC_GetSYCLKFreq+0x24>
	{
	case 0:
		CLK =  HSI_CLK;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <RCC_GetSYCLKFreq+0x34>)
 8000e32:	607b      	str	r3, [r7, #4]
		break;
 8000e34:	e002      	b.n	8000e3c <RCC_GetSYCLKFreq+0x24>
	case 1:
		CLK =  HSE_CLK;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <RCC_GetSYCLKFreq+0x38>)
 8000e38:	607b      	str	r3, [r7, #4]
		break;
 8000e3a:	46c0      	nop			; (mov r8, r8)
	}

	return CLK;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	007a1200 	.word	0x007a1200
 8000e50:	00f42400 	.word	0x00f42400

08000e54 <RCC_GetHCLKFreq>:

u32 RCC_GetHCLKFreq(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (RCC_GetSYCLKFreq() >> AHBPrescaler[(RCC->CFGR >> 4) & 0b1111]);
 8000e58:	f7ff ffde 	bl	8000e18 <RCC_GetSYCLKFreq>
 8000e5c:	0001      	movs	r1, r0
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <RCC_GetHCLKFreq+0x24>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	220f      	movs	r2, #15
 8000e66:	4013      	ands	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <RCC_GetHCLKFreq+0x28>)
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	40d9      	lsrs	r1, r3
 8000e6e:	000b      	movs	r3, r1
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	08001270 	.word	0x08001270

08000e80 <RCC_GetPCLK1Freq>:

u32 RCC_GetPCLK1Freq(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (RCC_GetHCLKFreq() >> APBPrescaler[(RCC->CFGR >> 8) & 0b111]);
 8000e84:	f7ff ffe6 	bl	8000e54 <RCC_GetHCLKFreq>
 8000e88:	0001      	movs	r1, r0
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <RCC_GetPCLK1Freq+0x24>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	2207      	movs	r2, #7
 8000e92:	4013      	ands	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <RCC_GetPCLK1Freq+0x28>)
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	40d9      	lsrs	r1, r3
 8000e9a:	000b      	movs	r3, r1
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	08001268 	.word	0x08001268

08000eac <SPI1_IRQHandler>:
 *                            IRQ
 * =================================================================
 */

void SPI1_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI1->SR & (TXE_PIN)) >> 1);
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <SPI1_IRQHandler+0x50>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	1c1a      	adds	r2, r3, #0
 8000eba:	2301      	movs	r3, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	0010      	movs	r0, r2
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	438a      	bics	r2, r1
 8000ece:	1c11      	adds	r1, r2, #0
 8000ed0:	1c02      	adds	r2, r0, #0
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
	irq_src.RXNE = ((SPI1->SR & (RXNE_PIN)) >> 1);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <SPI1_IRQHandler+0x50>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	2102      	movs	r1, #2
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	701a      	strb	r2, [r3, #0]

	G_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SPI1_IRQHandler+0x54>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	1c10      	adds	r0, r2, #0
 8000ef0:	4798      	blx	r3
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40013000 	.word	0x40013000
 8000f00:	2000001c 	.word	0x2000001c

08000f04 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI2->SR & (TXE_PIN)) >> 1);
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SPI2_IRQHandler+0x50>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	085b      	lsrs	r3, r3, #1
 8000f10:	1c1a      	adds	r2, r3, #0
 8000f12:	2301      	movs	r3, #1
 8000f14:	4013      	ands	r3, r2
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	0010      	movs	r0, r2
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	438a      	bics	r2, r1
 8000f26:	1c11      	adds	r1, r2, #0
 8000f28:	1c02      	adds	r2, r0, #0
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
	irq_src.RXNE = ((SPI2->SR & (RXNE_PIN)) >> 1);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <SPI2_IRQHandler+0x50>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	2102      	movs	r1, #2
 8000f38:	438a      	bics	r2, r1
 8000f3a:	701a      	strb	r2, [r3, #0]

	G_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SPI2_IRQHandler+0x54>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	1d3a      	adds	r2, r7, #4
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	1c10      	adds	r0, r2, #0
 8000f48:	4798      	blx	r3
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40003800 	.word	0x40003800
 8000f58:	2000001c 	.word	0x2000001c

08000f5c <USART1_IRQHandler>:
}

//ISR

void USART1_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	USART_IRQ_Event Flag;

	if(USART1->SR & 1<<7){
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <USART1_IRQHandler+0x18>
		Flag = USART_IRQ_TXE;
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e02e      	b.n	8000fd2 <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<6){
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d009      	beq.n	8000f92 <USART1_IRQHandler+0x36>
		Flag = USART_IRQ_TC;
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART1->SR &= ~(1<<6);
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e01f      	b.n	8000fd2 <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<5){
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2220      	movs	r2, #32
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d009      	beq.n	8000fb0 <USART1_IRQHandler+0x54>
		Flag = USART_IRQ_RXNE;
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART1->SR &= ~(1<<5);
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000fa8:	2120      	movs	r1, #32
 8000faa:	438a      	bics	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e010      	b.n	8000fd2 <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<3){
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d003      	beq.n	8000fc2 <USART1_IRQHandler+0x66>
		Flag = USART_IRQ_ORE;
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e007      	b.n	8000fd2 <USART1_IRQHandler+0x76>
	}
	else if(USART1->SR & 1<<0){
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <USART1_IRQHandler+0x8c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d002      	beq.n	8000fd2 <USART1_IRQHandler+0x76>
		Flag = USART_IEQ_PE;
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	2204      	movs	r2, #4
 8000fd0:	701a      	strb	r2, [r3, #0]
	}

	Global_USART_Config->P_IRQ_CallBack(Flag);
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <USART1_IRQHandler+0x90>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	1dfa      	adds	r2, r7, #7
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	0010      	movs	r0, r2
 8000fde:	4798      	blx	r3
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	20000024 	.word	0x20000024

08000ff0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	USART_IRQ_Event Flag;

	if(USART2->SR & 1<<7){
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <USART2_IRQHandler+0x8c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d003      	beq.n	8001008 <USART2_IRQHandler+0x18>
		Flag = USART_IRQ_TXE;
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e02e      	b.n	8001066 <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<6){
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <USART2_IRQHandler+0x8c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	4013      	ands	r3, r2
 8001010:	d009      	beq.n	8001026 <USART2_IRQHandler+0x36>
		Flag = USART_IRQ_TC;
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART2->SR &= ~(1<<6);
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <USART2_IRQHandler+0x8c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <USART2_IRQHandler+0x8c>)
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	438a      	bics	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e01f      	b.n	8001066 <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<5){
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <USART2_IRQHandler+0x8c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2220      	movs	r2, #32
 800102c:	4013      	ands	r3, r2
 800102e:	d009      	beq.n	8001044 <USART2_IRQHandler+0x54>
		Flag = USART_IRQ_RXNE;
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2202      	movs	r2, #2
 8001034:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART2->SR &= ~(1<<5);
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <USART2_IRQHandler+0x8c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <USART2_IRQHandler+0x8c>)
 800103c:	2120      	movs	r1, #32
 800103e:	438a      	bics	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e010      	b.n	8001066 <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<3){
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <USART2_IRQHandler+0x8c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2208      	movs	r2, #8
 800104a:	4013      	ands	r3, r2
 800104c:	d003      	beq.n	8001056 <USART2_IRQHandler+0x66>
		Flag = USART_IRQ_ORE;
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	2203      	movs	r2, #3
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e007      	b.n	8001066 <USART2_IRQHandler+0x76>
	}
	else if(USART2->SR & 1<<0){
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <USART2_IRQHandler+0x8c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	d002      	beq.n	8001066 <USART2_IRQHandler+0x76>
		Flag = USART_IEQ_PE;
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	2204      	movs	r2, #4
 8001064:	701a      	strb	r2, [r3, #0]
	}

	Global_USART_Config->P_IRQ_CallBack(Flag);
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <USART2_IRQHandler+0x90>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	1dfa      	adds	r2, r7, #7
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	0010      	movs	r0, r2
 8001072:	4798      	blx	r3
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40004400 	.word	0x40004400
 8001080:	20000024 	.word	0x20000024

08001084 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	USART_IRQ_Event Flag;

	if(USART3->SR & 1<<7){
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <USART3_IRQHandler+0x8c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	4013      	ands	r3, r2
 8001092:	d003      	beq.n	800109c <USART3_IRQHandler+0x18>
		Flag = USART_IRQ_TXE;
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e02e      	b.n	80010fa <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<6){
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <USART3_IRQHandler+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	4013      	ands	r3, r2
 80010a4:	d009      	beq.n	80010ba <USART3_IRQHandler+0x36>
		Flag = USART_IRQ_TC;
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART3->SR &= ~(1<<6);
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <USART3_IRQHandler+0x8c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <USART3_IRQHandler+0x8c>)
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	438a      	bics	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e01f      	b.n	80010fa <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<5){
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <USART3_IRQHandler+0x8c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2220      	movs	r2, #32
 80010c0:	4013      	ands	r3, r2
 80010c2:	d009      	beq.n	80010d8 <USART3_IRQHandler+0x54>
		Flag = USART_IRQ_RXNE;
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	2202      	movs	r2, #2
 80010c8:	701a      	strb	r2, [r3, #0]

		//clear by writing 0
		USART3->SR &= ~(1<<5);
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <USART3_IRQHandler+0x8c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <USART3_IRQHandler+0x8c>)
 80010d0:	2120      	movs	r1, #32
 80010d2:	438a      	bics	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e010      	b.n	80010fa <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<3){
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <USART3_IRQHandler+0x8c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2208      	movs	r2, #8
 80010de:	4013      	ands	r3, r2
 80010e0:	d003      	beq.n	80010ea <USART3_IRQHandler+0x66>
		Flag = USART_IRQ_ORE;
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	2203      	movs	r2, #3
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e007      	b.n	80010fa <USART3_IRQHandler+0x76>
	}
	else if(USART3->SR & 1<<0){
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <USART3_IRQHandler+0x8c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4013      	ands	r3, r2
 80010f2:	d002      	beq.n	80010fa <USART3_IRQHandler+0x76>
		Flag = USART_IEQ_PE;
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	2204      	movs	r2, #4
 80010f8:	701a      	strb	r2, [r3, #0]
	}

	Global_USART_Config->P_IRQ_CallBack(Flag);
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <USART3_IRQHandler+0x90>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	1dfa      	adds	r2, r7, #7
 8001102:	7812      	ldrb	r2, [r2, #0]
 8001104:	0010      	movs	r0, r2
 8001106:	4798      	blx	r3
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40004800 	.word	0x40004800
 8001114:	20000024 	.word	0x20000024

08001118 <main>:
#include "EEPROM/I2C_Slave_EEPROM.h"



int main()
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0

	//Test case 1
	u8 ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 800111e:	2408      	movs	r4, #8
 8001120:	193b      	adds	r3, r7, r4
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <main+0x7c>)
 8001124:	6811      	ldr	r1, [r2, #0]
 8001126:	6019      	str	r1, [r3, #0]
 8001128:	8891      	ldrh	r1, [r2, #4]
 800112a:	8099      	strh	r1, [r3, #4]
 800112c:	7992      	ldrb	r2, [r2, #6]
 800112e:	719a      	strb	r2, [r3, #6]
	u8 ch2[7]= {0};
 8001130:	003b      	movs	r3, r7
 8001132:	0018      	movs	r0, r3
 8001134:	2307      	movs	r3, #7
 8001136:	001a      	movs	r2, r3
 8001138:	2100      	movs	r1, #0
 800113a:	f000 f87d 	bl	8001238 <memset>

	EEPROM_Init();
 800113e:	f7ff f8a7 	bl	8000290 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 8001142:	0021      	movs	r1, r4
 8001144:	000c      	movs	r4, r1
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2207      	movs	r2, #7
 800114a:	0019      	movs	r1, r3
 800114c:	20af      	movs	r0, #175	; 0xaf
 800114e:	f7ff f8c5 	bl	80002dc <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xAF, ch2, 7);
 8001152:	003b      	movs	r3, r7
 8001154:	2207      	movs	r2, #7
 8001156:	0019      	movs	r1, r3
 8001158:	20af      	movs	r0, #175	; 0xaf
 800115a:	f7ff f92b 	bl	80003b4 <EEPROM_Read_Byte>


	//Test case 2
	ch1[0] = 0xA;
 800115e:	0021      	movs	r1, r4
 8001160:	187b      	adds	r3, r7, r1
 8001162:	220a      	movs	r2, #10
 8001164:	701a      	strb	r2, [r3, #0]
	ch1[1] = 0xB;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	220b      	movs	r2, #11
 800116a:	705a      	strb	r2, [r3, #1]
	ch1[2] = 0xC;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	220c      	movs	r2, #12
 8001170:	709a      	strb	r2, [r3, #2]
	ch1[3] = 0xD;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	220d      	movs	r2, #13
 8001176:	70da      	strb	r2, [r3, #3]

	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8001178:	187b      	adds	r3, r7, r1
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <main+0x80>)
 800117c:	2204      	movs	r2, #4
 800117e:	0019      	movs	r1, r3
 8001180:	f7ff f8ac 	bl	80002dc <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xFFF, ch2, 4);
 8001184:	003b      	movs	r3, r7
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <main+0x80>)
 8001188:	2204      	movs	r2, #4
 800118a:	0019      	movs	r1, r3
 800118c:	f7ff f912 	bl	80003b4 <EEPROM_Read_Byte>

	while(1)
 8001190:	e7fe      	b.n	8001190 <main+0x78>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	08001260 	.word	0x08001260
 8001198:	00000fff 	.word	0x00000fff

0800119c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800119e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <LoopForever+0xe>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011bc:	4c0a      	ldr	r4, [pc, #40]	; (80011e8 <LoopForever+0x16>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011ca:	f000 f811 	bl	80011f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7ff ffa3 	bl	8001118 <main>

080011d2 <LoopForever>:

LoopForever:
    b LoopForever
 80011d2:	e7fe      	b.n	80011d2 <LoopForever>
  ldr   r0, =_estack
 80011d4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80011e0:	08001288 	.word	0x08001288
  ldr r2, =_sbss
 80011e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80011e8:	200000a4 	.word	0x200000a4

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>
	...

080011f0 <__libc_init_array>:
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	2600      	movs	r6, #0
 80011f4:	4d0c      	ldr	r5, [pc, #48]	; (8001228 <__libc_init_array+0x38>)
 80011f6:	4c0d      	ldr	r4, [pc, #52]	; (800122c <__libc_init_array+0x3c>)
 80011f8:	1b64      	subs	r4, r4, r5
 80011fa:	10a4      	asrs	r4, r4, #2
 80011fc:	42a6      	cmp	r6, r4
 80011fe:	d109      	bne.n	8001214 <__libc_init_array+0x24>
 8001200:	2600      	movs	r6, #0
 8001202:	f000 f821 	bl	8001248 <_init>
 8001206:	4d0a      	ldr	r5, [pc, #40]	; (8001230 <__libc_init_array+0x40>)
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <__libc_init_array+0x44>)
 800120a:	1b64      	subs	r4, r4, r5
 800120c:	10a4      	asrs	r4, r4, #2
 800120e:	42a6      	cmp	r6, r4
 8001210:	d105      	bne.n	800121e <__libc_init_array+0x2e>
 8001212:	bd70      	pop	{r4, r5, r6, pc}
 8001214:	00b3      	lsls	r3, r6, #2
 8001216:	58eb      	ldr	r3, [r5, r3]
 8001218:	4798      	blx	r3
 800121a:	3601      	adds	r6, #1
 800121c:	e7ee      	b.n	80011fc <__libc_init_array+0xc>
 800121e:	00b3      	lsls	r3, r6, #2
 8001220:	58eb      	ldr	r3, [r5, r3]
 8001222:	4798      	blx	r3
 8001224:	3601      	adds	r6, #1
 8001226:	e7f2      	b.n	800120e <__libc_init_array+0x1e>
 8001228:	08001280 	.word	0x08001280
 800122c:	08001280 	.word	0x08001280
 8001230:	08001280 	.word	0x08001280
 8001234:	08001284 	.word	0x08001284

08001238 <memset>:
 8001238:	0003      	movs	r3, r0
 800123a:	1812      	adds	r2, r2, r0
 800123c:	4293      	cmp	r3, r2
 800123e:	d100      	bne.n	8001242 <memset+0xa>
 8001240:	4770      	bx	lr
 8001242:	7019      	strb	r1, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	e7f9      	b.n	800123c <memset+0x4>

08001248 <_init>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr

08001254 <_fini>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr

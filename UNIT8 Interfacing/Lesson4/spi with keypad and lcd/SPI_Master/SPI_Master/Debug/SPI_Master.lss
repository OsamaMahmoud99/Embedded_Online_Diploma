
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000006e8  0000077c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800098  00800098  000007b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001315  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d22  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00003360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000773  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000146d  00000000  00000000  00003d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  8a:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_voidInit>:

u8 Keypad_Row[] = {R0 , R1 , R2 , R3};
u8 Keypad_Col[] = {C0 , C1 , C2 , C3};

void KEYPAD_voidInit(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	//DIO_voidSetPortDirection(KYPAD_PORT,ROW_INPUT_COL_OUPUT);      //#define ROW_INPUT_COL_OUTPUT   0xf0   from DIO config.c
	
	DIO_WritePin(Keypad_Row[0] , HIGH);
  96:	c4 e6       	ldi	r28, 0x64	; 100
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	88 81       	ld	r24, Y
  9e:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	DIO_WritePin(Keypad_Row[1] , HIGH);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	DIO_WritePin(Keypad_Row[2] , HIGH);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	8a 81       	ldd	r24, Y+2	; 0x02
  ae:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	DIO_WritePin(Keypad_Row[3] , HIGH);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	DIO_WritePin(Keypad_Col[0] , HIGH);
  ba:	c0 e6       	ldi	r28, 0x60	; 96
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	88 81       	ld	r24, Y
  c2:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	DIO_WritePin(Keypad_Col[1] , HIGH);
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	DIO_WritePin(Keypad_Col[2] , HIGH);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	DIO_WritePin(Keypad_Col[3] , HIGH);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <KEYPAD_u8GetChar>:

u8 KEYPAD_u8GetChar(void)
{
  e4:	2f 92       	push	r2
  e6:	3f 92       	push	r3
  e8:	4f 92       	push	r4
  ea:	5f 92       	push	r5
  ec:	6f 92       	push	r6
  ee:	7f 92       	push	r7
  f0:	8f 92       	push	r8
  f2:	9f 92       	push	r9
  f4:	af 92       	push	r10
  f6:	bf 92       	push	r11
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <KEYPAD_u8GetChar+0x26>
 10a:	00 d0       	rcall	.+0      	; 0x10c <KEYPAD_u8GetChar+0x28>
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	0f 2e       	mov	r0, r31
 114:	f0 e6       	ldi	r31, 0x60	; 96
 116:	6f 2e       	mov	r6, r31
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	7f 2e       	mov	r7, r31
 11c:	f0 2d       	mov	r31, r0
 11e:	a1 2c       	mov	r10, r1
 120:	b1 2c       	mov	r11, r1
	u8 col = 0;      //counter for loop
	u8 row = 0;      //get value of row
	u8 key = NOT_PRESSED;
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	8b 83       	std	Y+3, r24	; 0x03
	
	for (col=0; col<COL_NUM; ++col)
	{
		DIO_WritePin(Keypad_Col[0] , HIGH);
 126:	43 01       	movw	r8, r6
 128:	2a 2c       	mov	r2, r10
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	f4 01       	movw	r30, r8
 12e:	80 81       	ld	r24, Z
 130:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
		DIO_WritePin(Keypad_Col[1] , HIGH);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	f4 01       	movw	r30, r8
 138:	81 81       	ldd	r24, Z+1	; 0x01
 13a:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
		DIO_WritePin(Keypad_Col[2] , HIGH);
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	f4 01       	movw	r30, r8
 142:	82 81       	ldd	r24, Z+2	; 0x02
 144:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
		DIO_WritePin(Keypad_Col[3] , HIGH);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	f4 01       	movw	r30, r8
 14c:	83 81       	ldd	r24, Z+3	; 0x03
 14e:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
		
		DIO_WritePin(Keypad_Col[col] , LOW);
 152:	ba 82       	std	Y+2, r11	; 0x02
 154:	a9 82       	std	Y+1, r10	; 0x01
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	f3 01       	movw	r30, r6
 15a:	81 91       	ld	r24, Z+
 15c:	3f 01       	movw	r6, r30
 15e:	0e 94 88 02 	call	0x510	; 0x510 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	83 ec       	ldi	r24, 0xC3	; 195
 164:	99 e0       	ldi	r25, 0x09	; 9
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <KEYPAD_u8GetChar+0x82>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <KEYPAD_u8GetChar+0x88>
 16c:	00 00       	nop
 16e:	04 e6       	ldi	r16, 0x64	; 100
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	f5 01       	movw	r30, r10
 174:	e8 59       	subi	r30, 0x98	; 152
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	6f 01       	movw	r12, r30
 17a:	33 24       	eor	r3, r3
 17c:	33 94       	inc	r3
 17e:	e1 2c       	mov	r14, r1
 180:	f1 2c       	mov	r15, r1
 182:	09 c0       	rjmp	.+18     	; 0x196 <KEYPAD_u8GetChar+0xb2>
 184:	ff ef       	ldi	r31, 0xFF	; 255
 186:	ef 1a       	sub	r14, r31
 188:	ff 0a       	sbc	r15, r31
 18a:	0f 5f       	subi	r16, 0xFF	; 255
 18c:	1f 4f       	sbci	r17, 0xFF	; 255
 18e:	33 94       	inc	r3
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	c8 0e       	add	r12, r24
 194:	d1 1c       	adc	r13, r1
		_delay_ms(10);
		
		for(row=0; row < COL_NUM; ++row)
		{
			if(DIO_ReadPin(Keypad_Row[row]) == LOW)    // Check if key is pressed
 196:	27 01       	movw	r4, r14
 198:	1d 83       	std	Y+5, r17	; 0x05
 19a:	0c 83       	std	Y+4, r16	; 0x04
 19c:	f8 01       	movw	r30, r16
 19e:	80 81       	ld	r24, Z
 1a0:	0e 94 0a 03 	call	0x614	; 0x614 <DIO_ReadPin>
 1a4:	81 11       	cpse	r24, r1
 1a6:	a3 c0       	rjmp	.+326    	; 0x2ee <KEYPAD_u8GetChar+0x20a>
			{
				while(DIO_ReadPin(Keypad_Row[row]) == LOW);  // wait for key to be released
 1a8:	ec 81       	ldd	r30, Y+4	; 0x04
 1aa:	fd 81       	ldd	r31, Y+5	; 0x05
 1ac:	80 81       	ld	r24, Z
 1ae:	0e 94 0a 03 	call	0x614	; 0x614 <DIO_ReadPin>
 1b2:	88 23       	and	r24, r24
 1b4:	c9 f3       	breq	.-14     	; 0x1a8 <KEYPAD_u8GetChar+0xc4>
				
				switch(col)
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	2f 16       	cp	r2, r31
 1ba:	79 f1       	breq	.+94     	; 0x21a <KEYPAD_u8GetChar+0x136>
 1bc:	2f 16       	cp	r2, r31
 1be:	48 f0       	brcs	.+18     	; 0x1d2 <KEYPAD_u8GetChar+0xee>
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	28 16       	cp	r2, r24
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <KEYPAD_u8GetChar+0xe4>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <KEYPAD_u8GetChar+0x17e>
 1c8:	93 e0       	ldi	r25, 0x03	; 3
 1ca:	29 16       	cp	r2, r25
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <KEYPAD_u8GetChar+0xec>
 1ce:	6c c0       	rjmp	.+216    	; 0x2a8 <KEYPAD_u8GetChar+0x1c4>
 1d0:	8e c0       	rjmp	.+284    	; 0x2ee <KEYPAD_u8GetChar+0x20a>
 1d2:	8e 2d       	mov	r24, r14
				{
					case 0:
					if(row == 0) key = keypadchars[row][col];
 1d4:	e1 10       	cpse	r14, r1
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <KEYPAD_u8GetChar+0xfc>
 1d8:	f6 01       	movw	r30, r12
 1da:	f0 81       	ld	r31, Z
 1dc:	fb 83       	std	Y+3, r31	; 0x03
 1de:	d2 cf       	rjmp	.-92     	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 1) key = keypadchars[row][col];
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	21 f4       	brne	.+8      	; 0x1ec <KEYPAD_u8GetChar+0x108>
 1e4:	f6 01       	movw	r30, r12
 1e6:	f0 81       	ld	r31, Z
 1e8:	fb 83       	std	Y+3, r31	; 0x03
 1ea:	cc cf       	rjmp	.-104    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 2) key = keypadchars[row][col];
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <KEYPAD_u8GetChar+0x114>
 1f0:	f6 01       	movw	r30, r12
 1f2:	f0 81       	ld	r31, Z
 1f4:	fb 83       	std	Y+3, r31	; 0x03
 1f6:	c6 cf       	rjmp	.-116    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 3) key = keypadchars[row][col];
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	09 f0       	breq	.+2      	; 0x1fe <KEYPAD_u8GetChar+0x11a>
 1fc:	78 c0       	rjmp	.+240    	; 0x2ee <KEYPAD_u8GetChar+0x20a>
 1fe:	f2 01       	movw	r30, r4
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e8 59       	subi	r30, 0x98	; 152
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	e8 0f       	add	r30, r24
 212:	f9 1f       	adc	r31, r25
 214:	90 81       	ld	r25, Z
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	6e c0       	rjmp	.+220    	; 0x2f6 <KEYPAD_u8GetChar+0x212>
 21a:	8e 2d       	mov	r24, r14
					break;
					case 1:
					if(row == 0) key = keypadchars[row][col];
 21c:	e1 10       	cpse	r14, r1
 21e:	04 c0       	rjmp	.+8      	; 0x228 <KEYPAD_u8GetChar+0x144>
 220:	f6 01       	movw	r30, r12
 222:	f0 81       	ld	r31, Z
 224:	fb 83       	std	Y+3, r31	; 0x03
 226:	ae cf       	rjmp	.-164    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 1) key = keypadchars[row][col];
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	21 f4       	brne	.+8      	; 0x234 <KEYPAD_u8GetChar+0x150>
 22c:	f6 01       	movw	r30, r12
 22e:	f0 81       	ld	r31, Z
 230:	fb 83       	std	Y+3, r31	; 0x03
 232:	a8 cf       	rjmp	.-176    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 2) key = keypadchars[row][col];
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	21 f4       	brne	.+8      	; 0x240 <KEYPAD_u8GetChar+0x15c>
 238:	f6 01       	movw	r30, r12
 23a:	f0 81       	ld	r31, Z
 23c:	fb 83       	std	Y+3, r31	; 0x03
 23e:	a2 cf       	rjmp	.-188    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 3) key = keypadchars[row][col];
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	09 f0       	breq	.+2      	; 0x246 <KEYPAD_u8GetChar+0x162>
 244:	54 c0       	rjmp	.+168    	; 0x2ee <KEYPAD_u8GetChar+0x20a>
 246:	f2 01       	movw	r30, r4
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	e8 59       	subi	r30, 0x98	; 152
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	e8 0f       	add	r30, r24
 25a:	f9 1f       	adc	r31, r25
 25c:	90 81       	ld	r25, Z
 25e:	9b 83       	std	Y+3, r25	; 0x03
 260:	4a c0       	rjmp	.+148    	; 0x2f6 <KEYPAD_u8GetChar+0x212>
 262:	8e 2d       	mov	r24, r14
					break;
					case 2:
					if(row == 0) key = keypadchars[row][col];
 264:	e1 10       	cpse	r14, r1
 266:	04 c0       	rjmp	.+8      	; 0x270 <KEYPAD_u8GetChar+0x18c>
 268:	f6 01       	movw	r30, r12
 26a:	f0 81       	ld	r31, Z
 26c:	fb 83       	std	Y+3, r31	; 0x03
 26e:	8a cf       	rjmp	.-236    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 1) key = keypadchars[row][col];
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	21 f4       	brne	.+8      	; 0x27c <KEYPAD_u8GetChar+0x198>
 274:	f6 01       	movw	r30, r12
 276:	f0 81       	ld	r31, Z
 278:	fb 83       	std	Y+3, r31	; 0x03
 27a:	84 cf       	rjmp	.-248    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 2) key = keypadchars[row][col];
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	21 f4       	brne	.+8      	; 0x288 <KEYPAD_u8GetChar+0x1a4>
 280:	f6 01       	movw	r30, r12
 282:	f0 81       	ld	r31, Z
 284:	fb 83       	std	Y+3, r31	; 0x03
 286:	7e cf       	rjmp	.-260    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 3) key = keypadchars[row][col];
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	89 f5       	brne	.+98     	; 0x2ee <KEYPAD_u8GetChar+0x20a>
 28c:	f2 01       	movw	r30, r4
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	e8 59       	subi	r30, 0x98	; 152
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	e8 0f       	add	r30, r24
 2a0:	f9 1f       	adc	r31, r25
 2a2:	90 81       	ld	r25, Z
 2a4:	9b 83       	std	Y+3, r25	; 0x03
 2a6:	27 c0       	rjmp	.+78     	; 0x2f6 <KEYPAD_u8GetChar+0x212>
 2a8:	8e 2d       	mov	r24, r14
					break;
					case 3:
					if(row == 0) key = keypadchars[row][col];
 2aa:	e1 10       	cpse	r14, r1
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <KEYPAD_u8GetChar+0x1d2>
 2ae:	f6 01       	movw	r30, r12
 2b0:	f0 81       	ld	r31, Z
 2b2:	fb 83       	std	Y+3, r31	; 0x03
 2b4:	67 cf       	rjmp	.-306    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 1) key = keypadchars[row][col];
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <KEYPAD_u8GetChar+0x1de>
 2ba:	f6 01       	movw	r30, r12
 2bc:	f0 81       	ld	r31, Z
 2be:	fb 83       	std	Y+3, r31	; 0x03
 2c0:	61 cf       	rjmp	.-318    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 2) key = keypadchars[row][col];
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	21 f4       	brne	.+8      	; 0x2ce <KEYPAD_u8GetChar+0x1ea>
 2c6:	f6 01       	movw	r30, r12
 2c8:	f0 81       	ld	r31, Z
 2ca:	fb 83       	std	Y+3, r31	; 0x03
 2cc:	5b cf       	rjmp	.-330    	; 0x184 <KEYPAD_u8GetChar+0xa0>
					else if(row == 3) key = keypadchars[row][col];
 2ce:	83 30       	cpi	r24, 0x03	; 3
 2d0:	d9 f4       	brne	.+54     	; 0x308 <KEYPAD_u8GetChar+0x224>
 2d2:	c2 01       	movw	r24, r4
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	88 59       	subi	r24, 0x98	; 152
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	e9 81       	ldd	r30, Y+1	; 0x01
 2e2:	fa 81       	ldd	r31, Y+2	; 0x02
 2e4:	e8 0f       	add	r30, r24
 2e6:	f9 1f       	adc	r31, r25
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 83       	std	Y+3, r24	; 0x03
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <KEYPAD_u8GetChar+0x212>
		DIO_WritePin(Keypad_Col[3] , HIGH);
		
		DIO_WritePin(Keypad_Col[col] , LOW);
		_delay_ms(10);
		
		for(row=0; row < COL_NUM; ++row)
 2ee:	93 e0       	ldi	r25, 0x03	; 3
 2f0:	93 15       	cp	r25, r3
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <KEYPAD_u8GetChar+0x212>
 2f4:	47 cf       	rjmp	.-370    	; 0x184 <KEYPAD_u8GetChar+0xa0>
 2f6:	ef ef       	ldi	r30, 0xFF	; 255
 2f8:	ae 1a       	sub	r10, r30
 2fa:	be 0a       	sbc	r11, r30
{
	u8 col = 0;      //counter for loop
	u8 row = 0;      //get value of row
	u8 key = NOT_PRESSED;
	
	for (col=0; col<COL_NUM; ++col)
 2fc:	f4 e0       	ldi	r31, 0x04	; 4
 2fe:	af 16       	cp	r10, r31
 300:	b1 04       	cpc	r11, r1
 302:	09 f0       	breq	.+2      	; 0x306 <KEYPAD_u8GetChar+0x222>
 304:	11 cf       	rjmp	.-478    	; 0x128 <KEYPAD_u8GetChar+0x44>
 306:	04 c0       	rjmp	.+8      	; 0x310 <KEYPAD_u8GetChar+0x22c>
		DIO_WritePin(Keypad_Col[3] , HIGH);
		
		DIO_WritePin(Keypad_Col[col] , LOW);
		_delay_ms(10);
		
		for(row=0; row < COL_NUM; ++row)
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	83 15       	cp	r24, r3
 30c:	08 f0       	brcs	.+2      	; 0x310 <KEYPAD_u8GetChar+0x22c>
 30e:	3a cf       	rjmp	.-396    	; 0x184 <KEYPAD_u8GetChar+0xa0>
				}
			}
		}
	}
	return key;
}
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	bf 90       	pop	r11
 32e:	af 90       	pop	r10
 330:	9f 90       	pop	r9
 332:	8f 90       	pop	r8
 334:	7f 90       	pop	r7
 336:	6f 90       	pop	r6
 338:	5f 90       	pop	r5
 33a:	4f 90       	pop	r4
 33c:	3f 90       	pop	r3
 33e:	2f 90       	pop	r2
 340:	08 95       	ret

00000342 <KEYPAD_u8GetPressed>:
{
	u8 key=NOT_PRESSED;     
	
	do 
	{
		key=KEYPAD_u8GetChar();
 342:	0e 94 72 00 	call	0xe4	; 0xe4 <KEYPAD_u8GetChar>
	} while (key==NOT_PRESSED);
 346:	8f 30       	cpi	r24, 0x0F	; 15
 348:	e1 f3       	breq	.-8      	; 0x342 <KEYPAD_u8GetPressed>
	
      return key;
}
 34a:	08 95       	ret

0000034c <main>:



int main(void)
{
	DIO_Init();
 34c:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_Init>
	KEYPAD_voidInit();
 350:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_voidInit>
	SPI_voidInit();
 354:	0e 94 3d 03 	call	0x67a	; 0x67a <SPI_voidInit>
	
	
	while (1)
	{
		u8 data = KEYPAD_u8GetPressed();
 358:	0e 94 a1 01 	call	0x342	; 0x342 <KEYPAD_u8GetPressed>
		SPI_u8SendReceive(data);
 35c:	0e 94 45 03 	call	0x68a	; 0x68a <SPI_u8SendReceive>
 360:	fb cf       	rjmp	.-10     	; 0x358 <main+0xc>

00000362 <DIO_Init>:
		break;
		case PC:
			TOOGLE_BIT(PORTC,PinNum_InPort);
		break;
		case PD:
			TOOGLE_BIT(PORTD,PinNum_InPort);
 362:	e8 e7       	ldi	r30, 0x78	; 120
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	91 91       	ld	r25, Z+
 36e:	28 2f       	mov	r18, r24
 370:	26 95       	lsr	r18
 372:	26 95       	lsr	r18
 374:	26 95       	lsr	r18
 376:	38 2f       	mov	r19, r24
 378:	37 70       	andi	r19, 0x07	; 7
 37a:	91 30       	cpi	r25, 0x01	; 1
 37c:	c9 f1       	breq	.+114    	; 0x3f0 <DIO_Init+0x8e>
 37e:	20 f0       	brcs	.+8      	; 0x388 <DIO_Init+0x26>
 380:	92 30       	cpi	r25, 0x02	; 2
 382:	09 f4       	brne	.+2      	; 0x386 <DIO_Init+0x24>
 384:	7d c0       	rjmp	.+250    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 386:	bf c0       	rjmp	.+382    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 388:	21 30       	cpi	r18, 0x01	; 1
 38a:	89 f0       	breq	.+34     	; 0x3ae <DIO_Init+0x4c>
 38c:	28 f0       	brcs	.+10     	; 0x398 <DIO_Init+0x36>
 38e:	22 30       	cpi	r18, 0x02	; 2
 390:	c9 f0       	breq	.+50     	; 0x3c4 <DIO_Init+0x62>
 392:	23 30       	cpi	r18, 0x03	; 3
 394:	11 f1       	breq	.+68     	; 0x3da <DIO_Init+0x78>
 396:	b7 c0       	rjmp	.+366    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 398:	9a b3       	in	r25, 0x1a	; 26
 39a:	ba 01       	movw	r22, r20
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_Init+0x40>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	3a 95       	dec	r19
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_Init+0x3c>
 3a6:	9b 01       	movw	r18, r22
 3a8:	29 2b       	or	r18, r25
 3aa:	2a bb       	out	0x1a, r18	; 26
 3ac:	ac c0       	rjmp	.+344    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 3ae:	97 b3       	in	r25, 0x17	; 23
 3b0:	ba 01       	movw	r22, r20
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_Init+0x56>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	3a 95       	dec	r19
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_Init+0x52>
 3bc:	9b 01       	movw	r18, r22
 3be:	29 2b       	or	r18, r25
 3c0:	27 bb       	out	0x17, r18	; 23
 3c2:	a1 c0       	rjmp	.+322    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 3c4:	94 b3       	in	r25, 0x14	; 20
 3c6:	ba 01       	movw	r22, r20
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_Init+0x6c>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	3a 95       	dec	r19
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_Init+0x68>
 3d2:	9b 01       	movw	r18, r22
 3d4:	29 2b       	or	r18, r25
 3d6:	24 bb       	out	0x14, r18	; 20
 3d8:	96 c0       	rjmp	.+300    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 3da:	91 b3       	in	r25, 0x11	; 17
 3dc:	ba 01       	movw	r22, r20
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_Init+0x82>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	3a 95       	dec	r19
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_Init+0x7e>
 3e8:	9b 01       	movw	r18, r22
 3ea:	29 2b       	or	r18, r25
 3ec:	21 bb       	out	0x11, r18	; 17
 3ee:	8b c0       	rjmp	.+278    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 3f0:	21 30       	cpi	r18, 0x01	; 1
 3f2:	b1 f0       	breq	.+44     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f4:	28 f0       	brcs	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f6:	22 30       	cpi	r18, 0x02	; 2
 3f8:	19 f1       	breq	.+70     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3fa:	23 30       	cpi	r18, 0x03	; 3
 3fc:	89 f1       	breq	.+98     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 3fe:	83 c0       	rjmp	.+262    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 400:	9a b3       	in	r25, 0x1a	; 26
 402:	ba 01       	movw	r22, r20
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	3a 95       	dec	r19
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	9b 01       	movw	r18, r22
 410:	36 2f       	mov	r19, r22
 412:	30 95       	com	r19
 414:	93 23       	and	r25, r19
 416:	9a bb       	out	0x1a, r25	; 26
 418:	9b b3       	in	r25, 0x1b	; 27
 41a:	29 2b       	or	r18, r25
 41c:	2b bb       	out	0x1b, r18	; 27
 41e:	73 c0       	rjmp	.+230    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 420:	97 b3       	in	r25, 0x17	; 23
 422:	ba 01       	movw	r22, r20
 424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	3a 95       	dec	r19
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	9b 01       	movw	r18, r22
 430:	36 2f       	mov	r19, r22
 432:	30 95       	com	r19
 434:	93 23       	and	r25, r19
 436:	97 bb       	out	0x17, r25	; 23
 438:	98 b3       	in	r25, 0x18	; 24
 43a:	29 2b       	or	r18, r25
 43c:	28 bb       	out	0x18, r18	; 24
 43e:	63 c0       	rjmp	.+198    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 440:	94 b3       	in	r25, 0x14	; 20
 442:	ba 01       	movw	r22, r20
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	3a 95       	dec	r19
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	9b 01       	movw	r18, r22
 450:	36 2f       	mov	r19, r22
 452:	30 95       	com	r19
 454:	93 23       	and	r25, r19
 456:	94 bb       	out	0x14, r25	; 20
 458:	95 b3       	in	r25, 0x15	; 21
 45a:	29 2b       	or	r18, r25
 45c:	25 bb       	out	0x15, r18	; 21
 45e:	53 c0       	rjmp	.+166    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 460:	91 b3       	in	r25, 0x11	; 17
 462:	ba 01       	movw	r22, r20
 464:	02 c0       	rjmp	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	3a 95       	dec	r19
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46e:	9b 01       	movw	r18, r22
 470:	36 2f       	mov	r19, r22
 472:	30 95       	com	r19
 474:	93 23       	and	r25, r19
 476:	91 bb       	out	0x11, r25	; 17
 478:	92 b3       	in	r25, 0x12	; 18
 47a:	29 2b       	or	r18, r25
 47c:	22 bb       	out	0x12, r18	; 18
 47e:	43 c0       	rjmp	.+134    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 480:	21 30       	cpi	r18, 0x01	; 1
 482:	a9 f0       	breq	.+42     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 484:	28 f0       	brcs	.+10     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 486:	22 30       	cpi	r18, 0x02	; 2
 488:	09 f1       	breq	.+66     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 48a:	23 30       	cpi	r18, 0x03	; 3
 48c:	71 f1       	breq	.+92     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 48e:	3b c0       	rjmp	.+118    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 490:	9a b3       	in	r25, 0x1a	; 26
 492:	ba 01       	movw	r22, r20
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	3a 95       	dec	r19
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49e:	9b 01       	movw	r18, r22
 4a0:	20 95       	com	r18
 4a2:	92 23       	and	r25, r18
 4a4:	9a bb       	out	0x1a, r25	; 26
 4a6:	9b b3       	in	r25, 0x1b	; 27
 4a8:	29 23       	and	r18, r25
 4aa:	2b bb       	out	0x1b, r18	; 27
 4ac:	2c c0       	rjmp	.+88     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ae:	97 b3       	in	r25, 0x17	; 23
 4b0:	ba 01       	movw	r22, r20
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	3a 95       	dec	r19
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	9b 01       	movw	r18, r22
 4be:	20 95       	com	r18
 4c0:	92 23       	and	r25, r18
 4c2:	97 bb       	out	0x17, r25	; 23
 4c4:	98 b3       	in	r25, 0x18	; 24
 4c6:	29 23       	and	r18, r25
 4c8:	28 bb       	out	0x18, r18	; 24
 4ca:	1d c0       	rjmp	.+58     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4cc:	94 b3       	in	r25, 0x14	; 20
 4ce:	ba 01       	movw	r22, r20
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	3a 95       	dec	r19
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4da:	9b 01       	movw	r18, r22
 4dc:	20 95       	com	r18
 4de:	92 23       	and	r25, r18
 4e0:	94 bb       	out	0x14, r25	; 20
 4e2:	95 b3       	in	r25, 0x15	; 21
 4e4:	29 23       	and	r18, r25
 4e6:	25 bb       	out	0x15, r18	; 21
 4e8:	0e c0       	rjmp	.+28     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ea:	91 b3       	in	r25, 0x11	; 17
 4ec:	ba 01       	movw	r22, r20
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	3a 95       	dec	r19
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4f8:	9b 01       	movw	r18, r22
 4fa:	20 95       	com	r18
 4fc:	92 23       	and	r25, r18
 4fe:	91 bb       	out	0x11, r25	; 17
 500:	92 b3       	in	r25, 0x12	; 18
 502:	29 23       	and	r18, r25
 504:	22 bb       	out	0x12, r18	; 18
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	80 32       	cpi	r24, 0x20	; 32
 50a:	09 f0       	breq	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50c:	2f cf       	rjmp	.-418    	; 0x36c <DIO_Init+0xa>
 50e:	08 95       	ret

00000510 <DIO_WritePin>:
 510:	98 2f       	mov	r25, r24
 512:	97 70       	andi	r25, 0x07	; 7
 514:	86 95       	lsr	r24
 516:	86 95       	lsr	r24
 518:	86 95       	lsr	r24
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	21 f1       	breq	.+72     	; 0x566 <DIO_WritePin+0x56>
 51e:	30 f0       	brcs	.+12     	; 0x52c <DIO_WritePin+0x1c>
 520:	82 30       	cpi	r24, 0x02	; 2
 522:	f1 f1       	breq	.+124    	; 0x5a0 <DIO_WritePin+0x90>
 524:	83 30       	cpi	r24, 0x03	; 3
 526:	09 f4       	brne	.+2      	; 0x52a <DIO_WritePin+0x1a>
 528:	58 c0       	rjmp	.+176    	; 0x5da <DIO_WritePin+0xca>
 52a:	08 95       	ret
 52c:	61 30       	cpi	r22, 0x01	; 1
 52e:	69 f4       	brne	.+26     	; 0x54a <DIO_WritePin+0x3a>
 530:	4b b3       	in	r20, 0x1b	; 27
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_WritePin+0x2e>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	9a 95       	dec	r25
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_WritePin+0x2a>
 542:	cb 01       	movw	r24, r22
 544:	84 2b       	or	r24, r20
 546:	8b bb       	out	0x1b, r24	; 27
 548:	08 95       	ret
 54a:	4b b3       	in	r20, 0x1b	; 27
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	b9 01       	movw	r22, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_WritePin+0x48>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	9a 95       	dec	r25
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_WritePin+0x44>
 55c:	cb 01       	movw	r24, r22
 55e:	80 95       	com	r24
 560:	84 23       	and	r24, r20
 562:	8b bb       	out	0x1b, r24	; 27
 564:	08 95       	ret
 566:	61 30       	cpi	r22, 0x01	; 1
 568:	69 f4       	brne	.+26     	; 0x584 <DIO_WritePin+0x74>
 56a:	48 b3       	in	r20, 0x18	; 24
 56c:	21 e0       	ldi	r18, 0x01	; 1
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	b9 01       	movw	r22, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_WritePin+0x68>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	9a 95       	dec	r25
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_WritePin+0x64>
 57c:	cb 01       	movw	r24, r22
 57e:	84 2b       	or	r24, r20
 580:	88 bb       	out	0x18, r24	; 24
 582:	08 95       	ret
 584:	48 b3       	in	r20, 0x18	; 24
 586:	21 e0       	ldi	r18, 0x01	; 1
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	b9 01       	movw	r22, r18
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_WritePin+0x82>
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	9a 95       	dec	r25
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_WritePin+0x7e>
 596:	cb 01       	movw	r24, r22
 598:	80 95       	com	r24
 59a:	84 23       	and	r24, r20
 59c:	88 bb       	out	0x18, r24	; 24
 59e:	08 95       	ret
 5a0:	61 30       	cpi	r22, 0x01	; 1
 5a2:	69 f4       	brne	.+26     	; 0x5be <DIO_WritePin+0xae>
 5a4:	45 b3       	in	r20, 0x15	; 21
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	b9 01       	movw	r22, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_WritePin+0xa2>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	9a 95       	dec	r25
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_WritePin+0x9e>
 5b6:	cb 01       	movw	r24, r22
 5b8:	84 2b       	or	r24, r20
 5ba:	85 bb       	out	0x15, r24	; 21
 5bc:	08 95       	ret
 5be:	45 b3       	in	r20, 0x15	; 21
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	b9 01       	movw	r22, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_WritePin+0xbc>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	9a 95       	dec	r25
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_WritePin+0xb8>
 5d0:	cb 01       	movw	r24, r22
 5d2:	80 95       	com	r24
 5d4:	84 23       	and	r24, r20
 5d6:	85 bb       	out	0x15, r24	; 21
 5d8:	08 95       	ret
 5da:	61 30       	cpi	r22, 0x01	; 1
 5dc:	69 f4       	brne	.+26     	; 0x5f8 <DIO_WritePin+0xe8>
 5de:	42 b3       	in	r20, 0x12	; 18
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_WritePin+0xdc>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	9a 95       	dec	r25
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_WritePin+0xd8>
 5f0:	cb 01       	movw	r24, r22
 5f2:	84 2b       	or	r24, r20
 5f4:	82 bb       	out	0x12, r24	; 18
 5f6:	08 95       	ret
 5f8:	42 b3       	in	r20, 0x12	; 18
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	b9 01       	movw	r22, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_WritePin+0xf6>
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	9a 95       	dec	r25
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_WritePin+0xf2>
 60a:	cb 01       	movw	r24, r22
 60c:	80 95       	com	r24
 60e:	84 23       	and	r24, r20
 610:	82 bb       	out	0x12, r24	; 18
 612:	08 95       	ret

00000614 <DIO_ReadPin>:
		break;
	}
}
VoltageLevel_type DIO_ReadPin(PinNum_type Pin)
{
	u8 PinNum_InPort=Pin%8;
 614:	28 2f       	mov	r18, r24
 616:	27 70       	andi	r18, 0x07	; 7
	Port_type Port=Pin/8;
	switch (Port)
 618:	86 95       	lsr	r24
 61a:	86 95       	lsr	r24
 61c:	86 95       	lsr	r24
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	79 f0       	breq	.+30     	; 0x640 <DIO_ReadPin+0x2c>
 622:	28 f0       	brcs	.+10     	; 0x62e <DIO_ReadPin+0x1a>
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	a9 f0       	breq	.+42     	; 0x652 <DIO_ReadPin+0x3e>
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	e1 f0       	breq	.+56     	; 0x664 <DIO_ReadPin+0x50>
 62c:	24 c0       	rjmp	.+72     	; 0x676 <DIO_ReadPin+0x62>
	{
		case PA:
		return CHECK_BIT(PINA,PinNum_InPort);
 62e:	89 b3       	in	r24, 0x19	; 25
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_ReadPin+0x24>
 634:	95 95       	asr	r25
 636:	87 95       	ror	r24
 638:	2a 95       	dec	r18
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_ReadPin+0x20>
 63c:	81 70       	andi	r24, 0x01	; 1
 63e:	08 95       	ret
		break;
		case PB:
		return CHECK_BIT(PINB,PinNum_InPort);
 640:	86 b3       	in	r24, 0x16	; 22
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_ReadPin+0x36>
 646:	95 95       	asr	r25
 648:	87 95       	ror	r24
 64a:	2a 95       	dec	r18
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_ReadPin+0x32>
 64e:	81 70       	andi	r24, 0x01	; 1
 650:	08 95       	ret
		break;
		case PC:
		return CHECK_BIT(PINC,PinNum_InPort);
 652:	83 b3       	in	r24, 0x13	; 19
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_ReadPin+0x48>
 658:	95 95       	asr	r25
 65a:	87 95       	ror	r24
 65c:	2a 95       	dec	r18
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_ReadPin+0x44>
 660:	81 70       	andi	r24, 0x01	; 1
 662:	08 95       	ret
		break;
		case PD:
		return CHECK_BIT(PIND,PinNum_InPort);
 664:	80 b3       	in	r24, 0x10	; 16
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_ReadPin+0x5a>
 66a:	95 95       	asr	r25
 66c:	87 95       	ror	r24
 66e:	2a 95       	dec	r18
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_ReadPin+0x56>
 672:	81 70       	andi	r24, 0x01	; 1
 674:	08 95       	ret
		break;
		default:
		return 0x00;
 676:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
}
 678:	08 95       	ret

0000067a <SPI_voidInit>:
{
	 CLEAR_BIT(SPCR , SPIE);	
}
void SPI_voidSetCallBack(void (*PtrToSPI_ISR)(void))
{
	SPI_ISR = PtrToSPI_ISR;
 67a:	6d 9a       	sbi	0x0d, 5	; 13
 67c:	6c 9a       	sbi	0x0d, 4	; 13
 67e:	6b 98       	cbi	0x0d, 3	; 13
 680:	6a 9a       	sbi	0x0d, 2	; 13
 682:	68 9a       	sbi	0x0d, 0	; 13
 684:	70 98       	cbi	0x0e, 0	; 14
 686:	6e 9a       	sbi	0x0d, 6	; 13
 688:	08 95       	ret

0000068a <SPI_u8SendReceive>:
 68a:	c4 98       	cbi	0x18, 4	; 24
 68c:	8f b9       	out	0x0f, r24	; 15
 68e:	77 9b       	sbis	0x0e, 7	; 14
 690:	fe cf       	rjmp	.-4      	; 0x68e <SPI_u8SendReceive+0x4>
 692:	8f b1       	in	r24, 0x0f	; 15
 694:	08 95       	ret

00000696 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	2f 93       	push	r18
 6a2:	3f 93       	push	r19
 6a4:	4f 93       	push	r20
 6a6:	5f 93       	push	r21
 6a8:	6f 93       	push	r22
 6aa:	7f 93       	push	r23
 6ac:	8f 93       	push	r24
 6ae:	9f 93       	push	r25
 6b0:	af 93       	push	r26
 6b2:	bf 93       	push	r27
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
	
	SPI_ISR();
 6b8:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <__data_end>
 6bc:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <__data_end+0x1>
 6c0:	09 95       	icall
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>

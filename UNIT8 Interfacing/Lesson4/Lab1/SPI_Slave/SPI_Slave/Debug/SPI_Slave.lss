
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800080  00800080  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa9  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008aa  00000000  00000000  000014ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a95  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  0000282c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000702  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000105b  00000000  00000000  00003142  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000419d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "DIO_interface.h"
#include "SPI_interface.h"

int main(void)
{
    DIO_Init();
  92:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_Init>
    SPI_voidInit();
  96:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_voidInit>
    u8 ch = 255 , data;
    

    while (1) 
    {
		    for(ch=255; ch>=0; --ch){
  9a:	cf ef       	ldi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	89 e6       	ldi	r24, 0x69	; 105
  a0:	98 e1       	ldi	r25, 0x18	; 24
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x1a>
  ac:	00 00       	nop
			    _delay_ms(1000);
			    data = SPI_u8SendReceive(ch);
  ae:	8c 2f       	mov	r24, r28
  b0:	0e 94 4f 01 	call	0x29e	; 0x29e <SPI_u8SendReceive>
			    DIO_WritePort(PA , data);
  b4:	68 2f       	mov	r22, r24
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_WritePort>
    u8 ch = 255 , data;
    

    while (1) 
    {
		    for(ch=255; ch>=0; --ch){
  bc:	c1 50       	subi	r28, 0x01	; 1
  be:	ee cf       	rjmp	.-36     	; 0x9c <main+0xa>

000000c0 <DIO_Init>:
#include "DIO_interface.h"

void DIO_Init(void)
{
  c0:	e0 e6       	ldi	r30, 0x60	; 96
  c2:	f0 e0       	ldi	r31, 0x00	; 0
	u8 PinNum_InPort;
	Port_type Port;
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
  c4:	80 e0       	ldi	r24, 0x00	; 0
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
				SET_BIT(PORTA,PinNum_InPort);
				break;
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	50 e0       	ldi	r21, 0x00	; 0
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
	{
		Status=PinsStatus[LocalIterator];
  ca:	91 91       	ld	r25, Z+
		Port=LocalIterator/8;
  cc:	28 2f       	mov	r18, r24
  ce:	26 95       	lsr	r18
  d0:	26 95       	lsr	r18
  d2:	26 95       	lsr	r18
		PinNum_InPort=LocalIterator%8;
  d4:	38 2f       	mov	r19, r24
  d6:	37 70       	andi	r19, 0x07	; 7
		
		switch (Status)
  d8:	91 30       	cpi	r25, 0x01	; 1
  da:	c9 f1       	breq	.+114    	; 0x14e <DIO_Init+0x8e>
  dc:	20 f0       	brcs	.+8      	; 0xe6 <DIO_Init+0x26>
  de:	92 30       	cpi	r25, 0x02	; 2
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_Init+0x24>
  e2:	7d c0       	rjmp	.+250    	; 0x1de <DIO_Init+0x11e>
  e4:	bf c0       	rjmp	.+382    	; 0x264 <DIO_Init+0x1a4>
		{
			case OUTPUT:
			switch (Port)
  e6:	21 30       	cpi	r18, 0x01	; 1
  e8:	89 f0       	breq	.+34     	; 0x10c <DIO_Init+0x4c>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_Init+0x36>
  ec:	22 30       	cpi	r18, 0x02	; 2
  ee:	c9 f0       	breq	.+50     	; 0x122 <DIO_Init+0x62>
  f0:	23 30       	cpi	r18, 0x03	; 3
  f2:	11 f1       	breq	.+68     	; 0x138 <DIO_Init+0x78>
  f4:	b7 c0       	rjmp	.+366    	; 0x264 <DIO_Init+0x1a4>
			{
				case PA:
				SET_BIT(DDRA,PinNum_InPort);
  f6:	9a b3       	in	r25, 0x1a	; 26
  f8:	ba 01       	movw	r22, r20
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_Init+0x40>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	3a 95       	dec	r19
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_Init+0x3c>
 104:	9b 01       	movw	r18, r22
 106:	29 2b       	or	r18, r25
 108:	2a bb       	out	0x1a, r18	; 26
				break;
 10a:	ac c0       	rjmp	.+344    	; 0x264 <DIO_Init+0x1a4>
				case PB:
				SET_BIT(DDRB,PinNum_InPort);
 10c:	97 b3       	in	r25, 0x17	; 23
 10e:	ba 01       	movw	r22, r20
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_Init+0x56>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	3a 95       	dec	r19
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_Init+0x52>
 11a:	9b 01       	movw	r18, r22
 11c:	29 2b       	or	r18, r25
 11e:	27 bb       	out	0x17, r18	; 23
				break;
 120:	a1 c0       	rjmp	.+322    	; 0x264 <DIO_Init+0x1a4>
				case PC:
				SET_BIT(DDRC,PinNum_InPort);
 122:	94 b3       	in	r25, 0x14	; 20
 124:	ba 01       	movw	r22, r20
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_Init+0x6c>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	3a 95       	dec	r19
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_Init+0x68>
 130:	9b 01       	movw	r18, r22
 132:	29 2b       	or	r18, r25
 134:	24 bb       	out	0x14, r18	; 20
				break;
 136:	96 c0       	rjmp	.+300    	; 0x264 <DIO_Init+0x1a4>
				case PD:
				SET_BIT(DDRD,PinNum_InPort);
 138:	91 b3       	in	r25, 0x11	; 17
 13a:	ba 01       	movw	r22, r20
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_Init+0x82>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	3a 95       	dec	r19
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_Init+0x7e>
 146:	9b 01       	movw	r18, r22
 148:	29 2b       	or	r18, r25
 14a:	21 bb       	out	0x11, r18	; 17
				break;
 14c:	8b c0       	rjmp	.+278    	; 0x264 <DIO_Init+0x1a4>
			}
			break;
			case INPULLUP:
			switch (Port)
 14e:	21 30       	cpi	r18, 0x01	; 1
 150:	b1 f0       	breq	.+44     	; 0x17e <DIO_Init+0xbe>
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_Init+0x9e>
 154:	22 30       	cpi	r18, 0x02	; 2
 156:	19 f1       	breq	.+70     	; 0x19e <DIO_Init+0xde>
 158:	23 30       	cpi	r18, 0x03	; 3
 15a:	89 f1       	breq	.+98     	; 0x1be <DIO_Init+0xfe>
 15c:	83 c0       	rjmp	.+262    	; 0x264 <DIO_Init+0x1a4>
			{
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
 15e:	9a b3       	in	r25, 0x1a	; 26
 160:	ba 01       	movw	r22, r20
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_Init+0xa8>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	3a 95       	dec	r19
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_Init+0xa4>
 16c:	9b 01       	movw	r18, r22
 16e:	36 2f       	mov	r19, r22
 170:	30 95       	com	r19
 172:	93 23       	and	r25, r19
 174:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(PORTA,PinNum_InPort);
 176:	9b b3       	in	r25, 0x1b	; 27
 178:	29 2b       	or	r18, r25
 17a:	2b bb       	out	0x1b, r18	; 27
				break;
 17c:	73 c0       	rjmp	.+230    	; 0x264 <DIO_Init+0x1a4>
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
 17e:	97 b3       	in	r25, 0x17	; 23
 180:	ba 01       	movw	r22, r20
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_Init+0xc8>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	3a 95       	dec	r19
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_Init+0xc4>
 18c:	9b 01       	movw	r18, r22
 18e:	36 2f       	mov	r19, r22
 190:	30 95       	com	r19
 192:	93 23       	and	r25, r19
 194:	97 bb       	out	0x17, r25	; 23
				SET_BIT(PORTB,PinNum_InPort);
 196:	98 b3       	in	r25, 0x18	; 24
 198:	29 2b       	or	r18, r25
 19a:	28 bb       	out	0x18, r18	; 24
				break;
 19c:	63 c0       	rjmp	.+198    	; 0x264 <DIO_Init+0x1a4>
				case PC:
				CLEAR_BIT(DDRC,PinNum_InPort);
 19e:	94 b3       	in	r25, 0x14	; 20
 1a0:	ba 01       	movw	r22, r20
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_Init+0xe8>
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	3a 95       	dec	r19
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_Init+0xe4>
 1ac:	9b 01       	movw	r18, r22
 1ae:	36 2f       	mov	r19, r22
 1b0:	30 95       	com	r19
 1b2:	93 23       	and	r25, r19
 1b4:	94 bb       	out	0x14, r25	; 20
				SET_BIT(PORTC,PinNum_InPort);
 1b6:	95 b3       	in	r25, 0x15	; 21
 1b8:	29 2b       	or	r18, r25
 1ba:	25 bb       	out	0x15, r18	; 21
				break;
 1bc:	53 c0       	rjmp	.+166    	; 0x264 <DIO_Init+0x1a4>
				case PD:
				CLEAR_BIT(DDRD,PinNum_InPort);
 1be:	91 b3       	in	r25, 0x11	; 17
 1c0:	ba 01       	movw	r22, r20
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_Init+0x108>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	3a 95       	dec	r19
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_Init+0x104>
 1cc:	9b 01       	movw	r18, r22
 1ce:	36 2f       	mov	r19, r22
 1d0:	30 95       	com	r19
 1d2:	93 23       	and	r25, r19
 1d4:	91 bb       	out	0x11, r25	; 17
				SET_BIT(PORTD,PinNum_InPort);
 1d6:	92 b3       	in	r25, 0x12	; 18
 1d8:	29 2b       	or	r18, r25
 1da:	22 bb       	out	0x12, r18	; 18
				break;
 1dc:	43 c0       	rjmp	.+134    	; 0x264 <DIO_Init+0x1a4>
			}
			break;
			case INPUT:
			switch (Port)
 1de:	21 30       	cpi	r18, 0x01	; 1
 1e0:	a9 f0       	breq	.+42     	; 0x20c <DIO_Init+0x14c>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_Init+0x12e>
 1e4:	22 30       	cpi	r18, 0x02	; 2
 1e6:	09 f1       	breq	.+66     	; 0x22a <DIO_Init+0x16a>
 1e8:	23 30       	cpi	r18, 0x03	; 3
 1ea:	71 f1       	breq	.+92     	; 0x248 <DIO_Init+0x188>
 1ec:	3b c0       	rjmp	.+118    	; 0x264 <DIO_Init+0x1a4>
			{
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
 1ee:	9a b3       	in	r25, 0x1a	; 26
 1f0:	ba 01       	movw	r22, r20
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_Init+0x138>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	3a 95       	dec	r19
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_Init+0x134>
 1fc:	9b 01       	movw	r18, r22
 1fe:	20 95       	com	r18
 200:	92 23       	and	r25, r18
 202:	9a bb       	out	0x1a, r25	; 26
				CLEAR_BIT(PORTA,PinNum_InPort);
 204:	9b b3       	in	r25, 0x1b	; 27
 206:	29 23       	and	r18, r25
 208:	2b bb       	out	0x1b, r18	; 27
				break;
 20a:	2c c0       	rjmp	.+88     	; 0x264 <DIO_Init+0x1a4>
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
 20c:	97 b3       	in	r25, 0x17	; 23
 20e:	ba 01       	movw	r22, r20
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_Init+0x156>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	3a 95       	dec	r19
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_Init+0x152>
 21a:	9b 01       	movw	r18, r22
 21c:	20 95       	com	r18
 21e:	92 23       	and	r25, r18
 220:	97 bb       	out	0x17, r25	; 23
				CLEAR_BIT(PORTB,PinNum_InPort);
 222:	98 b3       	in	r25, 0x18	; 24
 224:	29 23       	and	r18, r25
 226:	28 bb       	out	0x18, r18	; 24
				break;
 228:	1d c0       	rjmp	.+58     	; 0x264 <DIO_Init+0x1a4>
				case PC:
				CLEAR_BIT(DDRC,PinNum_InPort);
 22a:	94 b3       	in	r25, 0x14	; 20
 22c:	ba 01       	movw	r22, r20
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_Init+0x174>
 230:	66 0f       	add	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	3a 95       	dec	r19
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_Init+0x170>
 238:	9b 01       	movw	r18, r22
 23a:	20 95       	com	r18
 23c:	92 23       	and	r25, r18
 23e:	94 bb       	out	0x14, r25	; 20
				CLEAR_BIT(PORTC,PinNum_InPort);
 240:	95 b3       	in	r25, 0x15	; 21
 242:	29 23       	and	r18, r25
 244:	25 bb       	out	0x15, r18	; 21
				break;
 246:	0e c0       	rjmp	.+28     	; 0x264 <DIO_Init+0x1a4>
				case PD:
				CLEAR_BIT(DDRD,PinNum_InPort);
 248:	91 b3       	in	r25, 0x11	; 17
 24a:	ba 01       	movw	r22, r20
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_Init+0x192>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	3a 95       	dec	r19
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_Init+0x18e>
 256:	9b 01       	movw	r18, r22
 258:	20 95       	com	r18
 25a:	92 23       	and	r25, r18
 25c:	91 bb       	out	0x11, r25	; 17
				CLEAR_BIT(PORTD,PinNum_InPort);
 25e:	92 b3       	in	r25, 0x12	; 18
 260:	29 23       	and	r18, r25
 262:	22 bb       	out	0x12, r18	; 18
	u8 PinNum_InPort;
	Port_type Port;
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 32       	cpi	r24, 0x20	; 32
 268:	09 f0       	breq	.+2      	; 0x26c <DIO_Init+0x1ac>
 26a:	2f cf       	rjmp	.-418    	; 0xca <DIO_Init+0xa>
			}
			break;
		}
		
	}
}
 26c:	08 95       	ret

0000026e <DIO_WritePort>:

void DIO_WritePort(Port_type Port,u8 Value)
{
	switch (Port)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	41 f0       	breq	.+16     	; 0x282 <DIO_WritePort+0x14>
 272:	28 f0       	brcs	.+10     	; 0x27e <DIO_WritePort+0x10>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	39 f0       	breq	.+14     	; 0x286 <DIO_WritePort+0x18>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	39 f0       	breq	.+14     	; 0x28a <DIO_WritePort+0x1c>
 27c:	08 95       	ret
	{
		case PA:
		ASSIGN_REG(PORTA,Value);
 27e:	6b bb       	out	0x1b, r22	; 27
		break;
 280:	08 95       	ret
		case PB:
		ASSIGN_REG(PORTB,Value);
 282:	68 bb       	out	0x18, r22	; 24
		break;
 284:	08 95       	ret
		case PC:
		ASSIGN_REG(PORTC,Value);
 286:	65 bb       	out	0x15, r22	; 21
		break;
 288:	08 95       	ret
		case PD:
		ASSIGN_REG(PORTD,Value);
 28a:	62 bb       	out	0x12, r22	; 18
 28c:	08 95       	ret

0000028e <SPI_voidInit>:
{
	 CLEAR_BIT(SPCR , SPIE);	
}
void SPI_voidSetCallBack(void (*PtrToSPI_ISR)(void))
{
	SPI_ISR = PtrToSPI_ISR;
 28e:	6d 9a       	sbi	0x0d, 5	; 13
 290:	6c 98       	cbi	0x0d, 4	; 13
 292:	6b 98       	cbi	0x0d, 3	; 13
 294:	6a 9a       	sbi	0x0d, 2	; 13
 296:	68 9a       	sbi	0x0d, 0	; 13
 298:	70 98       	cbi	0x0e, 0	; 14
 29a:	6e 9a       	sbi	0x0d, 6	; 13
 29c:	08 95       	ret

0000029e <SPI_u8SendReceive>:
 29e:	8f b9       	out	0x0f, r24	; 15
 2a0:	77 9b       	sbis	0x0e, 7	; 14
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <SPI_u8SendReceive+0x2>
 2a4:	8f b1       	in	r24, 0x0f	; 15
 2a6:	08 95       	ret

000002a8 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	
	SPI_ISR();
 2ca:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 2ce:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 2d2:	09 95       	icall
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>

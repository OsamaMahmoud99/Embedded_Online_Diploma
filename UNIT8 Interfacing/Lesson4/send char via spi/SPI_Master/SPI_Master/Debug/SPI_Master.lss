
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800080  00800080  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f59  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a86  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000707  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107a  00000000  00000000  0000309f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "SPI_interface.h"



int main(void)
{
  92:	cf 93       	push	r28
	DIO_Init();
  94:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_Init>
	SPI_voidInit();
  98:	0e 94 39 01 	call	0x272	; 0x272 <SPI_voidInit>
  9c:	c0 e3       	ldi	r28, 0x30	; 48
	
	u8 counter = 0;
	while (counter < 10)
	{
		SPI_u8SendReceive(counter+48);
  9e:	8c 2f       	mov	r24, r28
  a0:	0e 94 41 01 	call	0x282	; 0x282 <SPI_u8SendReceive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	82 e5       	ldi	r24, 0x52	; 82
  a8:	97 e0       	ldi	r25, 0x07	; 7
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
  b6:	cf 5f       	subi	r28, 0xFF	; 255
{
	DIO_Init();
	SPI_voidInit();
	
	u8 counter = 0;
	while (counter < 10)
  b8:	ca 33       	cpi	r28, 0x3A	; 58
  ba:	89 f7       	brne	.-30     	; 0x9e <main+0xc>
	{
		SPI_u8SendReceive(counter+48);
		_delay_ms(300);
		counter++;	
	}
}
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <DIO_Init>:
#include "DIO_interface.h"

void DIO_Init(void)
{
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
	u8 PinNum_InPort;
	Port_type Port;
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
  c8:	80 e0       	ldi	r24, 0x00	; 0
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
				SET_BIT(PORTA,PinNum_InPort);
				break;
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	50 e0       	ldi	r21, 0x00	; 0
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
	{
		Status=PinsStatus[LocalIterator];
  ce:	91 91       	ld	r25, Z+
		Port=LocalIterator/8;
  d0:	28 2f       	mov	r18, r24
  d2:	26 95       	lsr	r18
  d4:	26 95       	lsr	r18
  d6:	26 95       	lsr	r18
		PinNum_InPort=LocalIterator%8;
  d8:	38 2f       	mov	r19, r24
  da:	37 70       	andi	r19, 0x07	; 7
		
		switch (Status)
  dc:	91 30       	cpi	r25, 0x01	; 1
  de:	c9 f1       	breq	.+114    	; 0x152 <DIO_Init+0x8e>
  e0:	20 f0       	brcs	.+8      	; 0xea <DIO_Init+0x26>
  e2:	92 30       	cpi	r25, 0x02	; 2
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_Init+0x24>
  e6:	7d c0       	rjmp	.+250    	; 0x1e2 <DIO_Init+0x11e>
  e8:	bf c0       	rjmp	.+382    	; 0x268 <DIO_Init+0x1a4>
		{
			case OUTPUT:
			switch (Port)
  ea:	21 30       	cpi	r18, 0x01	; 1
  ec:	89 f0       	breq	.+34     	; 0x110 <DIO_Init+0x4c>
  ee:	28 f0       	brcs	.+10     	; 0xfa <DIO_Init+0x36>
  f0:	22 30       	cpi	r18, 0x02	; 2
  f2:	c9 f0       	breq	.+50     	; 0x126 <DIO_Init+0x62>
  f4:	23 30       	cpi	r18, 0x03	; 3
  f6:	11 f1       	breq	.+68     	; 0x13c <DIO_Init+0x78>
  f8:	b7 c0       	rjmp	.+366    	; 0x268 <DIO_Init+0x1a4>
			{
				case PA:
				SET_BIT(DDRA,PinNum_InPort);
  fa:	9a b3       	in	r25, 0x1a	; 26
  fc:	ba 01       	movw	r22, r20
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_Init+0x40>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	3a 95       	dec	r19
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_Init+0x3c>
 108:	9b 01       	movw	r18, r22
 10a:	29 2b       	or	r18, r25
 10c:	2a bb       	out	0x1a, r18	; 26
				break;
 10e:	ac c0       	rjmp	.+344    	; 0x268 <DIO_Init+0x1a4>
				case PB:
				SET_BIT(DDRB,PinNum_InPort);
 110:	97 b3       	in	r25, 0x17	; 23
 112:	ba 01       	movw	r22, r20
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_Init+0x56>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	3a 95       	dec	r19
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_Init+0x52>
 11e:	9b 01       	movw	r18, r22
 120:	29 2b       	or	r18, r25
 122:	27 bb       	out	0x17, r18	; 23
				break;
 124:	a1 c0       	rjmp	.+322    	; 0x268 <DIO_Init+0x1a4>
				case PC:
				SET_BIT(DDRC,PinNum_InPort);
 126:	94 b3       	in	r25, 0x14	; 20
 128:	ba 01       	movw	r22, r20
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_Init+0x6c>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	3a 95       	dec	r19
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_Init+0x68>
 134:	9b 01       	movw	r18, r22
 136:	29 2b       	or	r18, r25
 138:	24 bb       	out	0x14, r18	; 20
				break;
 13a:	96 c0       	rjmp	.+300    	; 0x268 <DIO_Init+0x1a4>
				case PD:
				SET_BIT(DDRD,PinNum_InPort);
 13c:	91 b3       	in	r25, 0x11	; 17
 13e:	ba 01       	movw	r22, r20
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_Init+0x82>
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	3a 95       	dec	r19
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_Init+0x7e>
 14a:	9b 01       	movw	r18, r22
 14c:	29 2b       	or	r18, r25
 14e:	21 bb       	out	0x11, r18	; 17
				break;
 150:	8b c0       	rjmp	.+278    	; 0x268 <DIO_Init+0x1a4>
			}
			break;
			case INPULLUP:
			switch (Port)
 152:	21 30       	cpi	r18, 0x01	; 1
 154:	b1 f0       	breq	.+44     	; 0x182 <DIO_Init+0xbe>
 156:	28 f0       	brcs	.+10     	; 0x162 <DIO_Init+0x9e>
 158:	22 30       	cpi	r18, 0x02	; 2
 15a:	19 f1       	breq	.+70     	; 0x1a2 <DIO_Init+0xde>
 15c:	23 30       	cpi	r18, 0x03	; 3
 15e:	89 f1       	breq	.+98     	; 0x1c2 <DIO_Init+0xfe>
 160:	83 c0       	rjmp	.+262    	; 0x268 <DIO_Init+0x1a4>
			{
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
 162:	9a b3       	in	r25, 0x1a	; 26
 164:	ba 01       	movw	r22, r20
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_Init+0xa8>
 168:	66 0f       	add	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	3a 95       	dec	r19
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_Init+0xa4>
 170:	9b 01       	movw	r18, r22
 172:	36 2f       	mov	r19, r22
 174:	30 95       	com	r19
 176:	93 23       	and	r25, r19
 178:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(PORTA,PinNum_InPort);
 17a:	9b b3       	in	r25, 0x1b	; 27
 17c:	29 2b       	or	r18, r25
 17e:	2b bb       	out	0x1b, r18	; 27
				break;
 180:	73 c0       	rjmp	.+230    	; 0x268 <DIO_Init+0x1a4>
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
 182:	97 b3       	in	r25, 0x17	; 23
 184:	ba 01       	movw	r22, r20
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_Init+0xc8>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	3a 95       	dec	r19
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_Init+0xc4>
 190:	9b 01       	movw	r18, r22
 192:	36 2f       	mov	r19, r22
 194:	30 95       	com	r19
 196:	93 23       	and	r25, r19
 198:	97 bb       	out	0x17, r25	; 23
				SET_BIT(PORTB,PinNum_InPort);
 19a:	98 b3       	in	r25, 0x18	; 24
 19c:	29 2b       	or	r18, r25
 19e:	28 bb       	out	0x18, r18	; 24
				break;
 1a0:	63 c0       	rjmp	.+198    	; 0x268 <DIO_Init+0x1a4>
				case PC:
				CLEAR_BIT(DDRC,PinNum_InPort);
 1a2:	94 b3       	in	r25, 0x14	; 20
 1a4:	ba 01       	movw	r22, r20
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_Init+0xe8>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	3a 95       	dec	r19
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_Init+0xe4>
 1b0:	9b 01       	movw	r18, r22
 1b2:	36 2f       	mov	r19, r22
 1b4:	30 95       	com	r19
 1b6:	93 23       	and	r25, r19
 1b8:	94 bb       	out	0x14, r25	; 20
				SET_BIT(PORTC,PinNum_InPort);
 1ba:	95 b3       	in	r25, 0x15	; 21
 1bc:	29 2b       	or	r18, r25
 1be:	25 bb       	out	0x15, r18	; 21
				break;
 1c0:	53 c0       	rjmp	.+166    	; 0x268 <DIO_Init+0x1a4>
				case PD:
				CLEAR_BIT(DDRD,PinNum_InPort);
 1c2:	91 b3       	in	r25, 0x11	; 17
 1c4:	ba 01       	movw	r22, r20
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_Init+0x108>
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	3a 95       	dec	r19
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_Init+0x104>
 1d0:	9b 01       	movw	r18, r22
 1d2:	36 2f       	mov	r19, r22
 1d4:	30 95       	com	r19
 1d6:	93 23       	and	r25, r19
 1d8:	91 bb       	out	0x11, r25	; 17
				SET_BIT(PORTD,PinNum_InPort);
 1da:	92 b3       	in	r25, 0x12	; 18
 1dc:	29 2b       	or	r18, r25
 1de:	22 bb       	out	0x12, r18	; 18
				break;
 1e0:	43 c0       	rjmp	.+134    	; 0x268 <DIO_Init+0x1a4>
			}
			break;
			case INPUT:
			switch (Port)
 1e2:	21 30       	cpi	r18, 0x01	; 1
 1e4:	a9 f0       	breq	.+42     	; 0x210 <DIO_Init+0x14c>
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_Init+0x12e>
 1e8:	22 30       	cpi	r18, 0x02	; 2
 1ea:	09 f1       	breq	.+66     	; 0x22e <DIO_Init+0x16a>
 1ec:	23 30       	cpi	r18, 0x03	; 3
 1ee:	71 f1       	breq	.+92     	; 0x24c <DIO_Init+0x188>
 1f0:	3b c0       	rjmp	.+118    	; 0x268 <DIO_Init+0x1a4>
			{
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
 1f2:	9a b3       	in	r25, 0x1a	; 26
 1f4:	ba 01       	movw	r22, r20
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_Init+0x138>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	3a 95       	dec	r19
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_Init+0x134>
 200:	9b 01       	movw	r18, r22
 202:	20 95       	com	r18
 204:	92 23       	and	r25, r18
 206:	9a bb       	out	0x1a, r25	; 26
				CLEAR_BIT(PORTA,PinNum_InPort);
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	29 23       	and	r18, r25
 20c:	2b bb       	out	0x1b, r18	; 27
				break;
 20e:	2c c0       	rjmp	.+88     	; 0x268 <DIO_Init+0x1a4>
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
 210:	97 b3       	in	r25, 0x17	; 23
 212:	ba 01       	movw	r22, r20
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_Init+0x156>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	3a 95       	dec	r19
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_Init+0x152>
 21e:	9b 01       	movw	r18, r22
 220:	20 95       	com	r18
 222:	92 23       	and	r25, r18
 224:	97 bb       	out	0x17, r25	; 23
				CLEAR_BIT(PORTB,PinNum_InPort);
 226:	98 b3       	in	r25, 0x18	; 24
 228:	29 23       	and	r18, r25
 22a:	28 bb       	out	0x18, r18	; 24
				break;
 22c:	1d c0       	rjmp	.+58     	; 0x268 <DIO_Init+0x1a4>
				case PC:
				CLEAR_BIT(DDRC,PinNum_InPort);
 22e:	94 b3       	in	r25, 0x14	; 20
 230:	ba 01       	movw	r22, r20
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_Init+0x174>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	3a 95       	dec	r19
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_Init+0x170>
 23c:	9b 01       	movw	r18, r22
 23e:	20 95       	com	r18
 240:	92 23       	and	r25, r18
 242:	94 bb       	out	0x14, r25	; 20
				CLEAR_BIT(PORTC,PinNum_InPort);
 244:	95 b3       	in	r25, 0x15	; 21
 246:	29 23       	and	r18, r25
 248:	25 bb       	out	0x15, r18	; 21
				break;
 24a:	0e c0       	rjmp	.+28     	; 0x268 <DIO_Init+0x1a4>
				case PD:
				CLEAR_BIT(DDRD,PinNum_InPort);
 24c:	91 b3       	in	r25, 0x11	; 17
 24e:	ba 01       	movw	r22, r20
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_Init+0x192>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	3a 95       	dec	r19
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_Init+0x18e>
 25a:	9b 01       	movw	r18, r22
 25c:	20 95       	com	r18
 25e:	92 23       	and	r25, r18
 260:	91 bb       	out	0x11, r25	; 17
				CLEAR_BIT(PORTD,PinNum_InPort);
 262:	92 b3       	in	r25, 0x12	; 18
 264:	29 23       	and	r18, r25
 266:	22 bb       	out	0x12, r18	; 18
	u8 PinNum_InPort;
	Port_type Port;
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 32       	cpi	r24, 0x20	; 32
 26c:	09 f0       	breq	.+2      	; 0x270 <DIO_Init+0x1ac>
 26e:	2f cf       	rjmp	.-418    	; 0xce <DIO_Init+0xa>
			}
			break;
		}
		
	}
}
 270:	08 95       	ret

00000272 <SPI_voidInit>:
{
	 CLEAR_BIT(SPCR , SPIE);	
}
void SPI_voidSetCallBack(void (*PtrToSPI_ISR)(void))
{
	SPI_ISR = PtrToSPI_ISR;
 272:	6d 9a       	sbi	0x0d, 5	; 13
 274:	6c 9a       	sbi	0x0d, 4	; 13
 276:	6b 98       	cbi	0x0d, 3	; 13
 278:	6a 9a       	sbi	0x0d, 2	; 13
 27a:	68 9a       	sbi	0x0d, 0	; 13
 27c:	70 98       	cbi	0x0e, 0	; 14
 27e:	6e 9a       	sbi	0x0d, 6	; 13
 280:	08 95       	ret

00000282 <SPI_u8SendReceive>:
 282:	c4 98       	cbi	0x18, 4	; 24
 284:	8f b9       	out	0x0f, r24	; 15
 286:	77 9b       	sbis	0x0e, 7	; 14
 288:	fe cf       	rjmp	.-4      	; 0x286 <SPI_u8SendReceive+0x4>
 28a:	8f b1       	in	r24, 0x0f	; 15
 28c:	08 95       	ret

0000028e <__vector_12>:
}

ISR(SPI_STC_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	
	SPI_ISR();
 2b0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 2b4:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 2b8:	09 95       	icall
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>

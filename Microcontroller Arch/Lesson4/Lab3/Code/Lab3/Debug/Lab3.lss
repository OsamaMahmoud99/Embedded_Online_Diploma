
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006dd  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_1>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_2>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
#define INT_GIFR     (*(volatile unsigned char *)0x5A) // GIFR – General Interrupt Flag Register


void GPIO_init(void){
	/* Config Pin 5 , 6 , 7 Output */
	GPIO_DDRD |= 1 << 5 | 1<< 6 | 1 << 7;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
	/* Config Pin 2 , 3 Input */
	GPIO_DDRD &= ~(1 << 2);
  72:	8a 98       	cbi	0x11, 2	; 17
	GPIO_DDRD &= ~(1 << 3);
  74:	8b 98       	cbi	0x11, 3	; 17
	/* Config pin 2 input */
	GPIO_DDRB &= ~(1 << 2);
  76:	ba 98       	cbi	0x17, 2	; 23
  78:	08 95       	ret

0000007a <INTERRUPT_init>:
}

void INTERRUPT_init(void){
	/* Enable Global Interrupt */
	INT_SREG |= 1 << 7;
  7a:	8f b7       	in	r24, 0x3f	; 63
  7c:	80 68       	ori	r24, 0x80	; 128
  7e:	8f bf       	out	0x3f, r24	; 63
	/* Enable bit 5 , 6 , 7 in GICR */
	INT_GICR |= 1 << 5 | 1 << 6 | 1 << 7;
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 6e       	ori	r24, 0xE0	; 224
  84:	8b bf       	out	0x3b, r24	; 59
	/* Any logical change for INT0 */
	INT_MCUCR |= (0b01) << 0;
  86:	85 b7       	in	r24, 0x35	; 53
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bf       	out	0x35, r24	; 53
	/* rising edge for INT1 */
	INT_MCUCR |= (0b11) << 2;
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	8c 60       	ori	r24, 0x0C	; 12
  90:	85 bf       	out	0x35, r24	; 53
	/* Falling edge for INT2 */
	INT_MCUCSR &= ~(1 << 6); // Bit 6 – ISC2: Interrupt Sense Control 2
  92:	84 b7       	in	r24, 0x34	; 52
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	84 bf       	out	0x34, r24	; 52
  98:	08 95       	ret

0000009a <main>:
	
}

int main(void)
{
    GPIO_init();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
	INTERRUPT_init();
  9e:	0e 94 3d 00 	call	0x7a	; 0x7a <INTERRUPT_init>
	
    while (1) 
    {
		/* All leds off */
		GPIO_PORTD &= ~(1 << 5);
  a2:	95 98       	cbi	0x12, 5	; 18
		GPIO_PORTD &= ~(1 << 6);
  a4:	96 98       	cbi	0x12, 6	; 18
		GPIO_PORTD &= ~(1 << 7);
  a6:	97 98       	cbi	0x12, 7	; 18
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <main+0x8>

000000aa <__vector_1>:
    }
}

ISR(INT0_vect){
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	GPIO_PORTD |= 1 << 5;
  ba:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__vector_1+0x18>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <__vector_1+0x22>
  cc:	00 00       	nop
	_delay_ms(1000);
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_2>:

ISR(INT1_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	GPIO_PORTD |= 1 << 6;
  ee:	96 9a       	sbi	0x12, 6	; 18
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_2+0x18>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_2+0x22>
 100:	00 00       	nop
	_delay_ms(1000);
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_3>:

ISR(INT2_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	GPIO_PORTD |= 1 << 7;
 122:	97 9a       	sbi	0x12, 7	; 18
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 e6       	ldi	r24, 0x69	; 105
 128:	98 e1       	ldi	r25, 0x18	; 24
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <__vector_3+0x18>
 132:	00 c0       	rjmp	.+0      	; 0x134 <__vector_3+0x22>
 134:	00 00       	nop
	_delay_ms(1000);
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>


LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000374  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e9  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000880  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000888  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fc  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1b  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003b5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  7a:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_voidInit>:
u8 Kepad_Col[] = {C0 , C1 , C2 , C3};

void KEYPAD_voidInit(void)
{
	
	KEYPAD_DDR &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3)); // the upper part(Rows) Input
  82:	84 b3       	in	r24, 0x14	; 20
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	84 bb       	out	0x14, r24	; 20
	KEYPAD_DDR |=  ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3)); // the lower part(Columns) Output
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	84 bb       	out	0x14, r24	; 20
	KEYPAD_PORT = 0xFF; // Row and Columns High
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	85 bb       	out	0x15, r24	; 21
  92:	08 95       	ret

00000094 <KEYPAD_u8GetChar>:
}

u8 KEYPAD_u8GetChar(void)
{
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	a0 e6       	ldi	r26, 0x60	; 96
  a0:	b0 e0       	ldi	r27, 0x00	; 0
	u8 col = 0;      //counter for loop
	u8 row = 0;      //get value of row
	u8 key = 'N' ;
  a2:	8e e4       	ldi	r24, 0x4E	; 78
	
	for (col=0; col<COL_NUM; ++col)
  a4:	00 e0       	ldi	r16, 0x00	; 0
	{
		KEYPAD_PORT |= ((1<<Kepad_Col[0]) | (1<<Kepad_Col[1]) | (1<<Kepad_Col[2]) | (1<<Kepad_Col[3]));
  a6:	fd 01       	movw	r30, r26
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	70 e0       	ldi	r23, 0x00	; 0
				{
					case 0:
					    if(row == 0) key = '7';
					    else if(row == 1) key = '4';
					    else if(row == 2) key = '1';
					    else if(row == 3) key = 'a';
  ac:	0f 2e       	mov	r0, r31
  ae:	f1 e6       	ldi	r31, 0x61	; 97
  b0:	ff 2e       	mov	r15, r31
  b2:	f0 2d       	mov	r31, r0
	u8 row = 0;      //get value of row
	u8 key = 'N' ;
	
	for (col=0; col<COL_NUM; ++col)
	{
		KEYPAD_PORT |= ((1<<Kepad_Col[0]) | (1<<Kepad_Col[1]) | (1<<Kepad_Col[2]) | (1<<Kepad_Col[3]));
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	ab 01       	movw	r20, r22
  b8:	00 80       	ld	r0, Z
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <KEYPAD_u8GetChar+0x2c>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <KEYPAD_u8GetChar+0x28>
  c4:	9b 01       	movw	r18, r22
  c6:	01 80       	ldd	r0, Z+1	; 0x01
  c8:	02 c0       	rjmp	.+4      	; 0xce <KEYPAD_u8GetChar+0x3a>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <KEYPAD_u8GetChar+0x36>
  d2:	24 2b       	or	r18, r20
  d4:	29 2b       	or	r18, r25
  d6:	ab 01       	movw	r20, r22
  d8:	02 80       	ldd	r0, Z+2	; 0x02
  da:	02 c0       	rjmp	.+4      	; 0xe0 <KEYPAD_u8GetChar+0x4c>
  dc:	44 0f       	add	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <KEYPAD_u8GetChar+0x48>
  e4:	42 2b       	or	r20, r18
  e6:	9b 01       	movw	r18, r22
  e8:	03 80       	ldd	r0, Z+3	; 0x03
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <KEYPAD_u8GetChar+0x5c>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <KEYPAD_u8GetChar+0x58>
  f4:	24 2b       	or	r18, r20
  f6:	25 bb       	out	0x15, r18	; 21
		KEYPAD_PORT &= ~((1<<Kepad_Col[col])); 
  f8:	25 b3       	in	r18, 0x15	; 21
  fa:	ab 01       	movw	r20, r22
  fc:	0d 90       	ld	r0, X+
  fe:	02 c0       	rjmp	.+4      	; 0x104 <KEYPAD_u8GetChar+0x70>
 100:	44 0f       	add	r20, r20
 102:	55 1f       	adc	r21, r21
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <KEYPAD_u8GetChar+0x6c>
 108:	94 2f       	mov	r25, r20
 10a:	90 95       	com	r25
 10c:	92 23       	and	r25, r18
 10e:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	c3 ec       	ldi	r28, 0xC3	; 195
 112:	d9 e0       	ldi	r29, 0x09	; 9
 114:	21 97       	sbiw	r28, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <KEYPAD_u8GetChar+0x80>
 118:	00 c0       	rjmp	.+0      	; 0x11a <KEYPAD_u8GetChar+0x86>
 11a:	00 00       	nop
 11c:	11 e0       	ldi	r17, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <KEYPAD_u8GetChar+0x92>
 122:	9f 5f       	subi	r25, 0xFF	; 255
 124:	1f 5f       	subi	r17, 0xFF	; 255
		_delay_ms(10);
		
		for(row=0; row < COL_NUM; ++row)
		{
			if(!(KEYPAD_PIN & (1<<Kepad_Row[row])))    // Check if key is pressed
 126:	23 b3       	in	r18, 0x13	; 19
 128:	c9 2f       	mov	r28, r25
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	cc 59       	subi	r28, 0x9C	; 156
 12e:	df 4f       	sbci	r29, 0xFF	; 255
 130:	48 81       	ld	r20, Y
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	04 2e       	mov	r0, r20
 136:	02 c0       	rjmp	.+4      	; 0x13c <KEYPAD_u8GetChar+0xa8>
 138:	35 95       	asr	r19
 13a:	27 95       	ror	r18
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <KEYPAD_u8GetChar+0xa4>
 140:	20 fd       	sbrc	r18, 0
 142:	38 c0       	rjmp	.+112    	; 0x1b4 <KEYPAD_u8GetChar+0x120>
 144:	9b 01       	movw	r18, r22
 146:	02 c0       	rjmp	.+4      	; 0x14c <KEYPAD_u8GetChar+0xb8>
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	4a 95       	dec	r20
 14e:	e2 f7       	brpl	.-8      	; 0x148 <KEYPAD_u8GetChar+0xb4>
 150:	a9 01       	movw	r20, r18
			{
				while( !(KEYPAD_PIN & (1<<Kepad_Row[row])));  // wait for key to be released
 152:	23 b3       	in	r18, 0x13	; 19
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	24 23       	and	r18, r20
 158:	35 23       	and	r19, r21
 15a:	23 2b       	or	r18, r19
 15c:	d1 f3       	breq	.-12     	; 0x152 <KEYPAD_u8GetChar+0xbe>
				
				switch(col)
 15e:	01 30       	cpi	r16, 0x01	; 1
 160:	79 f0       	breq	.+30     	; 0x180 <KEYPAD_u8GetChar+0xec>
 162:	28 f0       	brcs	.+10     	; 0x16e <KEYPAD_u8GetChar+0xda>
 164:	02 30       	cpi	r16, 0x02	; 2
 166:	a9 f0       	breq	.+42     	; 0x192 <KEYPAD_u8GetChar+0xfe>
 168:	03 30       	cpi	r16, 0x03	; 3
 16a:	e1 f0       	breq	.+56     	; 0x1a4 <KEYPAD_u8GetChar+0x110>
 16c:	23 c0       	rjmp	.+70     	; 0x1b4 <KEYPAD_u8GetChar+0x120>
				{
					case 0:
					    if(row == 0) key = '7';
 16e:	99 23       	and	r25, r25
 170:	59 f1       	breq	.+86     	; 0x1c8 <KEYPAD_u8GetChar+0x134>
					    else if(row == 1) key = '4';
 172:	91 30       	cpi	r25, 0x01	; 1
 174:	59 f1       	breq	.+86     	; 0x1cc <KEYPAD_u8GetChar+0x138>
					    else if(row == 2) key = '1';
 176:	92 30       	cpi	r25, 0x02	; 2
 178:	59 f1       	breq	.+86     	; 0x1d0 <KEYPAD_u8GetChar+0x13c>
					    else if(row == 3) key = 'a';
 17a:	93 30       	cpi	r25, 0x03	; 3
 17c:	d9 f4       	brne	.+54     	; 0x1b4 <KEYPAD_u8GetChar+0x120>
 17e:	3c c0       	rjmp	.+120    	; 0x1f8 <KEYPAD_u8GetChar+0x164>
					    break;
				    case 1:
					    if(row == 0) key = '8';
 180:	99 23       	and	r25, r25
 182:	41 f1       	breq	.+80     	; 0x1d4 <KEYPAD_u8GetChar+0x140>
					    else if(row == 1) key = '5';
 184:	91 30       	cpi	r25, 0x01	; 1
 186:	41 f1       	breq	.+80     	; 0x1d8 <KEYPAD_u8GetChar+0x144>
					    else if(row == 2) key = '2';
 188:	92 30       	cpi	r25, 0x02	; 2
 18a:	41 f1       	breq	.+80     	; 0x1dc <KEYPAD_u8GetChar+0x148>
					    else if(row == 3) key = '0';
 18c:	93 30       	cpi	r25, 0x03	; 3
 18e:	91 f4       	brne	.+36     	; 0x1b4 <KEYPAD_u8GetChar+0x120>
 190:	35 c0       	rjmp	.+106    	; 0x1fc <KEYPAD_u8GetChar+0x168>
					    break;
					case 2:
					    if(row == 0) key = '9';
 192:	99 23       	and	r25, r25
 194:	29 f1       	breq	.+74     	; 0x1e0 <KEYPAD_u8GetChar+0x14c>
					    else if(row == 1) key = '6';
 196:	91 30       	cpi	r25, 0x01	; 1
 198:	29 f1       	breq	.+74     	; 0x1e4 <KEYPAD_u8GetChar+0x150>
					    else if(row == 2) key = '3';
 19a:	92 30       	cpi	r25, 0x02	; 2
 19c:	29 f1       	breq	.+74     	; 0x1e8 <KEYPAD_u8GetChar+0x154>
					    else if(row == 3) key = '=';
 19e:	93 30       	cpi	r25, 0x03	; 3
 1a0:	49 f4       	brne	.+18     	; 0x1b4 <KEYPAD_u8GetChar+0x120>
 1a2:	2e c0       	rjmp	.+92     	; 0x200 <KEYPAD_u8GetChar+0x16c>
					    break;
					case 3:
					    if(row == 0) key = '/';
 1a4:	99 23       	and	r25, r25
 1a6:	11 f1       	breq	.+68     	; 0x1ec <KEYPAD_u8GetChar+0x158>
					    else if(row == 1) key = '*';
 1a8:	91 30       	cpi	r25, 0x01	; 1
 1aa:	11 f1       	breq	.+68     	; 0x1f0 <KEYPAD_u8GetChar+0x15c>
					    else if(row == 2) key = '-';
 1ac:	92 30       	cpi	r25, 0x02	; 2
 1ae:	11 f1       	breq	.+68     	; 0x1f4 <KEYPAD_u8GetChar+0x160>
					    else if(row == 3) key = '+';
 1b0:	93 30       	cpi	r25, 0x03	; 3
 1b2:	41 f0       	breq	.+16     	; 0x1c4 <KEYPAD_u8GetChar+0x130>
	{
		KEYPAD_PORT |= ((1<<Kepad_Col[0]) | (1<<Kepad_Col[1]) | (1<<Kepad_Col[2]) | (1<<Kepad_Col[3]));
		KEYPAD_PORT &= ~((1<<Kepad_Col[col])); 
		_delay_ms(10);
		
		for(row=0; row < COL_NUM; ++row)
 1b4:	14 30       	cpi	r17, 0x04	; 4
 1b6:	08 f4       	brcc	.+2      	; 0x1ba <KEYPAD_u8GetChar+0x126>
 1b8:	b4 cf       	rjmp	.-152    	; 0x122 <KEYPAD_u8GetChar+0x8e>
{
	u8 col = 0;      //counter for loop
	u8 row = 0;      //get value of row
	u8 key = 'N' ;
	
	for (col=0; col<COL_NUM; ++col)
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	04 30       	cpi	r16, 0x04	; 4
 1be:	09 f0       	breq	.+2      	; 0x1c2 <KEYPAD_u8GetChar+0x12e>
 1c0:	79 cf       	rjmp	.-270    	; 0xb4 <KEYPAD_u8GetChar+0x20>
 1c2:	21 c0       	rjmp	.+66     	; 0x206 <KEYPAD_u8GetChar+0x172>
					    break;
					case 3:
					    if(row == 0) key = '/';
					    else if(row == 1) key = '*';
					    else if(row == 2) key = '-';
					    else if(row == 3) key = '+';
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
					    break;
				}
			}
		}
	}
	return key;
 1c6:	1f c0       	rjmp	.+62     	; 0x206 <KEYPAD_u8GetChar+0x172>
				while( !(KEYPAD_PIN & (1<<Kepad_Row[row])));  // wait for key to be released
				
				switch(col)
				{
					case 0:
					    if(row == 0) key = '7';
 1c8:	87 e3       	ldi	r24, 0x37	; 55
 1ca:	ab cf       	rjmp	.-170    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 1) key = '4';
 1cc:	84 e3       	ldi	r24, 0x34	; 52
 1ce:	a9 cf       	rjmp	.-174    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 2) key = '1';
 1d0:	81 e3       	ldi	r24, 0x31	; 49
 1d2:	a7 cf       	rjmp	.-178    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 3) key = 'a';
					    break;
				    case 1:
					    if(row == 0) key = '8';
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	a5 cf       	rjmp	.-182    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 1) key = '5';
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	a3 cf       	rjmp	.-186    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 2) key = '2';
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	a1 cf       	rjmp	.-190    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 3) key = '0';
					    break;
					case 2:
					    if(row == 0) key = '9';
 1e0:	89 e3       	ldi	r24, 0x39	; 57
 1e2:	9f cf       	rjmp	.-194    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 1) key = '6';
 1e4:	86 e3       	ldi	r24, 0x36	; 54
 1e6:	9d cf       	rjmp	.-198    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 2) key = '3';
 1e8:	83 e3       	ldi	r24, 0x33	; 51
 1ea:	9b cf       	rjmp	.-202    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 3) key = '=';
					    break;
					case 3:
					    if(row == 0) key = '/';
 1ec:	8f e2       	ldi	r24, 0x2F	; 47
 1ee:	99 cf       	rjmp	.-206    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 1) key = '*';
 1f0:	8a e2       	ldi	r24, 0x2A	; 42
 1f2:	97 cf       	rjmp	.-210    	; 0x122 <KEYPAD_u8GetChar+0x8e>
					    else if(row == 2) key = '-';
 1f4:	8d e2       	ldi	r24, 0x2D	; 45
 1f6:	95 cf       	rjmp	.-214    	; 0x122 <KEYPAD_u8GetChar+0x8e>
				{
					case 0:
					    if(row == 0) key = '7';
					    else if(row == 1) key = '4';
					    else if(row == 2) key = '1';
					    else if(row == 3) key = 'a';
 1f8:	8f 2d       	mov	r24, r15
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <KEYPAD_u8GetChar+0x16e>
					    break;
				    case 1:
					    if(row == 0) key = '8';
					    else if(row == 1) key = '5';
					    else if(row == 2) key = '2';
					    else if(row == 3) key = '0';
 1fc:	80 e3       	ldi	r24, 0x30	; 48
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <KEYPAD_u8GetChar+0x16e>
					    break;
					case 2:
					    if(row == 0) key = '9';
					    else if(row == 1) key = '6';
					    else if(row == 2) key = '3';
					    else if(row == 3) key = '=';
 200:	8d e3       	ldi	r24, 0x3D	; 61
{
	u8 col = 0;      //counter for loop
	u8 row = 0;      //get value of row
	u8 key = 'N' ;
	
	for (col=0; col<COL_NUM; ++col)
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	57 cf       	rjmp	.-338    	; 0xb4 <KEYPAD_u8GetChar+0x20>
				}
			}
		}
	}
	return key;
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	08 95       	ret

00000212 <LCD_WriteCommand>:



static void LCD_WriteCommand(u8 Command)
{
	LCD_PORT_ControlData &= ~((1 << RS) | (1 << RW));
 212:	98 b3       	in	r25, 0x18	; 24
 214:	9c 7f       	andi	r25, 0xFC	; 252
 216:	98 bb       	out	0x18, r25	; 24

	LCD_PORT_Data = (LCD_PORT_Data & 0x0f) | (Command & 0xf0);
 218:	98 b3       	in	r25, 0x18	; 24
 21a:	9f 70       	andi	r25, 0x0F	; 15
 21c:	28 2f       	mov	r18, r24
 21e:	20 7f       	andi	r18, 0xF0	; 240
 220:	92 2b       	or	r25, r18
 222:	98 bb       	out	0x18, r25	; 24
	LCD_PORT_ControlData |= 1 << EN;
 224:	c2 9a       	sbi	0x18, 2	; 24
 226:	e3 ef       	ldi	r30, 0xF3	; 243
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_WriteCommand+0x18>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_WriteCommand+0x1e>
 230:	00 00       	nop
	_delay_ms(2);
	LCD_PORT_ControlData &= ~(1 << EN);
 232:	c2 98       	cbi	0x18, 2	; 24
 234:	e3 ef       	ldi	r30, 0xF3	; 243
 236:	f1 e0       	ldi	r31, 0x01	; 1
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_WriteCommand+0x26>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_WriteCommand+0x2c>
 23e:	00 00       	nop
	_delay_ms(2);
	
	LCD_PORT_Data = (LCD_PORT_Data & 0x0f) | (Command << 4);
 240:	28 b3       	in	r18, 0x18	; 24
 242:	2f 70       	andi	r18, 0x0F	; 15
 244:	f0 e1       	ldi	r31, 0x10	; 16
 246:	8f 9f       	mul	r24, r31
 248:	c0 01       	movw	r24, r0
 24a:	11 24       	eor	r1, r1
 24c:	82 2b       	or	r24, r18
 24e:	88 bb       	out	0x18, r24	; 24
	LCD_PORT_ControlData |= 1 << EN;
 250:	c2 9a       	sbi	0x18, 2	; 24
 252:	83 ef       	ldi	r24, 0xF3	; 243
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_WriteCommand+0x44>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_WriteCommand+0x4a>
 25c:	00 00       	nop
	_delay_ms(2);
	LCD_PORT_ControlData &= ~(1 << EN);
 25e:	c2 98       	cbi	0x18, 2	; 24
 260:	e3 ef       	ldi	r30, 0xF3	; 243
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_WriteCommand+0x52>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_WriteCommand+0x58>
 26a:	00 00       	nop
 26c:	08 95       	ret

0000026e <LCD_WriteData>:
	_delay_ms(2);
}

 static void LCD_WriteData(u8 Data)
{
	LCD_PORT_ControlData |= 1 << RS;
 26e:	c0 9a       	sbi	0x18, 0	; 24
	LCD_PORT_ControlData &= ~(1 << RW);
 270:	c1 98       	cbi	0x18, 1	; 24
	
	LCD_PORT_Data = (LCD_PORT_Data & 0x0f) | (Data & 0xf0);
 272:	98 b3       	in	r25, 0x18	; 24
 274:	9f 70       	andi	r25, 0x0F	; 15
 276:	28 2f       	mov	r18, r24
 278:	20 7f       	andi	r18, 0xF0	; 240
 27a:	92 2b       	or	r25, r18
 27c:	98 bb       	out	0x18, r25	; 24
	LCD_PORT_ControlData |= 1 << EN;
 27e:	c2 9a       	sbi	0x18, 2	; 24
 280:	e3 ef       	ldi	r30, 0xF3	; 243
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_WriteData+0x16>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_WriteData+0x1c>
 28a:	00 00       	nop
	_delay_ms(2);
	LCD_PORT_ControlData &= ~(1 << EN);
 28c:	c2 98       	cbi	0x18, 2	; 24
 28e:	e3 ef       	ldi	r30, 0xF3	; 243
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WriteData+0x24>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WriteData+0x2a>
 298:	00 00       	nop
	_delay_ms(2);
	
	LCD_PORT_Data = (LCD_PORT_Data & 0x0f) | (Data << 4);
 29a:	28 b3       	in	r18, 0x18	; 24
 29c:	2f 70       	andi	r18, 0x0F	; 15
 29e:	f0 e1       	ldi	r31, 0x10	; 16
 2a0:	8f 9f       	mul	r24, r31
 2a2:	c0 01       	movw	r24, r0
 2a4:	11 24       	eor	r1, r1
 2a6:	82 2b       	or	r24, r18
 2a8:	88 bb       	out	0x18, r24	; 24
	LCD_PORT_ControlData |= 1 << EN;
 2aa:	c2 9a       	sbi	0x18, 2	; 24
 2ac:	83 ef       	ldi	r24, 0xF3	; 243
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_WriteData+0x42>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_WriteData+0x48>
 2b6:	00 00       	nop
	_delay_ms(2);
	LCD_PORT_ControlData &= ~(1 << EN);
 2b8:	c2 98       	cbi	0x18, 2	; 24
 2ba:	e3 ef       	ldi	r30, 0xF3	; 243
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_WriteData+0x50>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_WriteData+0x56>
 2c4:	00 00       	nop
 2c6:	08 95       	ret

000002c8 <LCD_Init>:
 2c8:	83 ed       	ldi	r24, 0xD3	; 211
 2ca:	90 e3       	ldi	r25, 0x30	; 48
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Init+0x4>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_Init+0xa>
 2d2:	00 00       	nop
void LCD_Init(void)
{
	
	_delay_ms(50);          // said in Data sheet to delay after power on for 1st time
	
	LCD_PORT_ControlDirection |= ((1 << EN) | (1 << RS) | (1 << RW));
 2d4:	87 b3       	in	r24, 0x17	; 23
 2d6:	87 60       	ori	r24, 0x07	; 7
 2d8:	87 bb       	out	0x17, r24	; 23
	LCD_PORT_ControlData &= ~((1 << EN) | (1 << RS) | (1 << RW));
 2da:	88 b3       	in	r24, 0x18	; 24
 2dc:	88 7f       	andi	r24, 0xF8	; 248
 2de:	88 bb       	out	0x18, r24	; 24
	
	LCD_PORT_Direction = 0xff;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	87 bb       	out	0x17, r24	; 23
	
	LCD_WriteCommand(0x02);//4 bit mode only
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WriteCommand>
 2ea:	89 ef       	ldi	r24, 0xF9	; 249
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_Init+0x26>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_Init+0x2c>
 2f4:	00 00       	nop
	_delay_ms(1); 
	LCD_WriteCommand(LCD_FUNCTION_4BIT_2LINES); //N=1 , F=0
 2f6:	88 e2       	ldi	r24, 0x28	; 40
 2f8:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WriteCommand>
 2fc:	89 ef       	ldi	r24, 0xF9	; 249
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_Init+0x38>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_Init+0x3e>
 306:	00 00       	nop
	_delay_ms(1);           //delay 1ms a must delay as said in Data sheet
	LCD_WriteCommand(LCD_DISP_ON); //D=1(LCD itself on or off) C=0, B=0
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WriteCommand>
 30e:	89 ef       	ldi	r24, 0xF9	; 249
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_Init+0x4a>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_Init+0x50>
 318:	00 00       	nop
	_delay_ms(1);    //delay 1ms
	LCD_WriteCommand(LCD_CLEAR_SCREEN); //clear LCD
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WriteCommand>
 320:	87 e8       	ldi	r24, 0x87	; 135
 322:	93 e1       	ldi	r25, 0x13	; 19
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_Init+0x5c>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_Init+0x62>
 32a:	00 00       	nop
	_delay_ms(20);
	LCD_WriteCommand(LCD_ENTRY_MODE);
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW);
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WriteCommand>
 338:	08 95       	ret

0000033a <LCD_WriteChar>:

/*************************** service functions*****************************************************/

void LCD_WriteChar(u8 character)
{
	LCD_WriteData(character);
 33a:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WriteData>
 33e:	08 95       	ret

00000340 <LCD_Clear>:
}
void LCD_Clear(void)
{
	LCD_WriteCommand(LCD_CLEAR_SCREEN);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WriteCommand>
 346:	08 95       	ret

00000348 <main>:
#include "LCD_interface.h"
#include "KEYPAD_interface.h"

int main(void)
{
    LCD_Init();
 348:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_Init>
	KEYPAD_voidInit();
 34c:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_voidInit>
    
	u8 Key_Pressed;
	
    while (1) 
    {
		Key_Pressed = KEYPAD_u8GetChar();
 350:	0e 94 4a 00 	call	0x94	; 0x94 <KEYPAD_u8GetChar>
		switch(Key_Pressed)
 354:	9c 01       	movw	r18, r24
 356:	33 27       	eor	r19, r19
 358:	2e 34       	cpi	r18, 0x4E	; 78
 35a:	31 05       	cpc	r19, r1
 35c:	c9 f3       	breq	.-14     	; 0x350 <main+0x8>
 35e:	21 36       	cpi	r18, 0x61	; 97
 360:	31 05       	cpc	r19, r1
 362:	19 f4       	brne	.+6      	; 0x36a <main+0x22>
		{
			case 'N':  // do nothing if key no pressed
			  break;
			case 'a': 
			  LCD_Clear();
 364:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Clear>
			  break;
 368:	f3 cf       	rjmp	.-26     	; 0x350 <main+0x8>
			default:
			  LCD_WriteChar(Key_Pressed);  // write key_pressed on lcd
 36a:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_WriteChar>
 36e:	f0 cf       	rjmp	.-32     	; 0x350 <main+0x8>

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>

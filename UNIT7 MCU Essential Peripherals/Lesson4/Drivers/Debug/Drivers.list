
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d40  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08000e70  08000e70  00010e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  4 .ARM          00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f18  08000f20  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000f20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000f20  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 0000002d  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032cd  00000000  00000000  00010f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007b5  00000000  00000000  0001421a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000075e  00000000  00000000  000149cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  000152d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e2e  00000000  00000000  00015438  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001fa3  00000000  00000000  00016266  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000975f  00000000  00000000  00018209  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00021968  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004c8  00000000  00000000  000219e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c06      	ldr	r4, [pc, #24]	; (800014c <__do_global_dtors_aux+0x1c>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	2b00      	cmp	r3, #0
 8000138:	d107      	bne.n	800014a <__do_global_dtors_aux+0x1a>
 800013a:	4b05      	ldr	r3, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013c:	2b00      	cmp	r3, #0
 800013e:	d002      	beq.n	8000146 <__do_global_dtors_aux+0x16>
 8000140:	4804      	ldr	r0, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x24>)
 8000142:	f3af 8000 	nop.w
 8000146:	2301      	movs	r3, #1
 8000148:	7023      	strb	r3, [r4, #0]
 800014a:	bd10      	pop	{r4, pc}
 800014c:	20000000 	.word	0x20000000
 8000150:	00000000 	.word	0x00000000
 8000154:	08000e58 	.word	0x08000e58

08000158 <frame_dummy>:
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <frame_dummy+0x14>)
 800015a:	b510      	push	{r4, lr}
 800015c:	2b00      	cmp	r3, #0
 800015e:	d003      	beq.n	8000168 <frame_dummy+0x10>
 8000160:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x18>)
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <frame_dummy+0x1c>)
 8000164:	f3af 8000 	nop.w
 8000168:	bd10      	pop	{r4, pc}
 800016a:	46c0      	nop			; (mov r8, r8)
 800016c:	00000000 	.word	0x00000000
 8000170:	20000004 	.word	0x20000004
 8000174:	08000e58 	.word	0x08000e58

08000178 <_delay_ms>:
 */

#include "LCD.h"


void _delay_ms(unsigned int Time){
 8000178:	b580      	push	{r7, lr}
 800017a:	b084      	sub	sp, #16
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	unsigned int i = 0 , j = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
	for(i=0; i<Time; ++i){
 8000188:	2300      	movs	r3, #0
 800018a:	60fb      	str	r3, [r7, #12]
 800018c:	e00b      	b.n	80001a6 <_delay_ms+0x2e>
		for(j=0; j<255; ++j);
 800018e:	2300      	movs	r3, #0
 8000190:	60bb      	str	r3, [r7, #8]
 8000192:	e002      	b.n	800019a <_delay_ms+0x22>
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	3301      	adds	r3, #1
 8000198:	60bb      	str	r3, [r7, #8]
 800019a:	68bb      	ldr	r3, [r7, #8]
 800019c:	2bfe      	cmp	r3, #254	; 0xfe
 800019e:	d9f9      	bls.n	8000194 <_delay_ms+0x1c>
	for(i=0; i<Time; ++i){
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	3301      	adds	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d3ef      	bcc.n	800018e <_delay_ms+0x16>
	}
}
 80001ae:	46c0      	nop			; (mov r8, r8)
 80001b0:	46bd      	mov	sp, r7
 80001b2:	b004      	add	sp, #16
 80001b4:	bd80      	pop	{r7, pc}
	...

080001b8 <LCD_WriteCommand>:

/************************************* 8 BIT Mode functions********************************************/
#if (LCD_MODE==M_8BIT)

static void LCD_WriteCommand(u8 Command)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	0002      	movs	r2, r0
 80001c0:	1dfb      	adds	r3, r7, #7
 80001c2:	701a      	strb	r2, [r3, #0]
	GPIO_SetPinValue(LCD_CONTROL , RS , LOW);  // Clear RS
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <LCD_WriteCommand+0x60>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	2108      	movs	r1, #8
 80001ca:	0018      	movs	r0, r3
 80001cc:	f000 fc46 	bl	8000a5c <GPIO_SetPinValue>
	GPIO_SetPinValue(LCD_CONTROL , RW , LOW);  // Clear RW
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <LCD_WriteCommand+0x60>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	2109      	movs	r1, #9
 80001d6:	0018      	movs	r0, r3
 80001d8:	f000 fc40 	bl	8000a5c <GPIO_SetPinValue>
	GPIO_SetPortValue(LCD_DATA, LOW_8PIN_CRL, Command); // Set Port from PINA0 to PINA7
 80001dc:	1dfb      	adds	r3, r7, #7
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	b29b      	uxth	r3, r3
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <LCD_WriteCommand+0x60>)
 80001e4:	001a      	movs	r2, r3
 80001e6:	2104      	movs	r1, #4
 80001e8:	f000 fcf6 	bl	8000bd8 <GPIO_SetPortValue>
	GPIO_SetPinValue(LCD_CONTROL, EN, HIGH);   // Set EN
 80001ec:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <LCD_WriteCommand+0x60>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	210a      	movs	r1, #10
 80001f2:	0018      	movs	r0, r3
 80001f4:	f000 fc32 	bl	8000a5c <GPIO_SetPinValue>
	_delay_ms(2);
 80001f8:	2002      	movs	r0, #2
 80001fa:	f7ff ffbd 	bl	8000178 <_delay_ms>
	GPIO_SetPinValue(LCD_CONTROL, EN, LOW);    // Clear EN
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <LCD_WriteCommand+0x60>)
 8000200:	2200      	movs	r2, #0
 8000202:	210a      	movs	r1, #10
 8000204:	0018      	movs	r0, r3
 8000206:	f000 fc29 	bl	8000a5c <GPIO_SetPinValue>
	_delay_ms(2);
 800020a:	2002      	movs	r0, #2
 800020c:	f7ff ffb4 	bl	8000178 <_delay_ms>
}
 8000210:	46c0      	nop			; (mov r8, r8)
 8000212:	46bd      	mov	sp, r7
 8000214:	b002      	add	sp, #8
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40010800 	.word	0x40010800

0800021c <LCD_Init>:

void LCD_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

	_delay_ms(50);          // said in Data sheet to delay after power on for 1st time
 8000220:	2032      	movs	r0, #50	; 0x32
 8000222:	f7ff ffa9 	bl	8000178 <_delay_ms>

	GPIO_SetPinDirection(LCD_CONTROL, RS, OUTPUT_SPEED_10MHZ_PP);
 8000226:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <LCD_Init+0x94>)
 8000228:	2201      	movs	r2, #1
 800022a:	2108      	movs	r1, #8
 800022c:	0018      	movs	r0, r3
 800022e:	f000 fbc7 	bl	80009c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(LCD_CONTROL, RW, OUTPUT_SPEED_10MHZ_PP);
 8000232:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <LCD_Init+0x94>)
 8000234:	2201      	movs	r2, #1
 8000236:	2109      	movs	r1, #9
 8000238:	0018      	movs	r0, r3
 800023a:	f000 fbc1 	bl	80009c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(LCD_CONTROL, EN, OUTPUT_SPEED_10MHZ_PP);
 800023e:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <LCD_Init+0x94>)
 8000240:	2201      	movs	r2, #1
 8000242:	210a      	movs	r1, #10
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fbbb 	bl	80009c0 <GPIO_SetPinDirection>

	GPIO_SetPinValue(LCD_CONTROL, RS, LOW);
 800024a:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <LCD_Init+0x94>)
 800024c:	2200      	movs	r2, #0
 800024e:	2108      	movs	r1, #8
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fc03 	bl	8000a5c <GPIO_SetPinValue>
	GPIO_SetPinValue(LCD_CONTROL, RW, LOW);
 8000256:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <LCD_Init+0x94>)
 8000258:	2200      	movs	r2, #0
 800025a:	2109      	movs	r1, #9
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fbfd 	bl	8000a5c <GPIO_SetPinValue>
	GPIO_SetPinValue(LCD_CONTROL, EN, LOW);
 8000262:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <LCD_Init+0x94>)
 8000264:	2200      	movs	r2, #0
 8000266:	210a      	movs	r1, #10
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fbf7 	bl	8000a5c <GPIO_SetPinValue>

	GPIO_SetPortDirection(LCD_DATA, LOW_8PIN_CRL , OUTPUT_SPEED_2MHZ_PP);
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <LCD_Init+0x94>)
 8000270:	2202      	movs	r2, #2
 8000272:	2104      	movs	r1, #4
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fc1f 	bl	8000ab8 <GPIO_SetPortDirection>

	LCD_WriteCommand(LCD_FUNCTION_8BIT_2LINES); //N=1 , F=0
 800027a:	2038      	movs	r0, #56	; 0x38
 800027c:	f7ff ff9c 	bl	80001b8 <LCD_WriteCommand>
	_delay_ms(1);           //delay 1ms a must delay as said in Data sheet
 8000280:	2001      	movs	r0, #1
 8000282:	f7ff ff79 	bl	8000178 <_delay_ms>
	LCD_WriteCommand(LCD_DISP_ON); //D=1(LCD itself on or off) C=0, B=0
 8000286:	200c      	movs	r0, #12
 8000288:	f7ff ff96 	bl	80001b8 <LCD_WriteCommand>
	_delay_ms(1);    //delay 1ms
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ff73 	bl	8000178 <_delay_ms>
	LCD_WriteCommand(LCD_CLEAR_SCREEN); //clear LCD
 8000292:	2001      	movs	r0, #1
 8000294:	f7ff ff90 	bl	80001b8 <LCD_WriteCommand>
	_delay_ms(20);
 8000298:	2014      	movs	r0, #20
 800029a:	f7ff ff6d 	bl	8000178 <_delay_ms>
	LCD_WriteCommand(LCD_ENTRY_MODE); //Entry Mode
 800029e:	2006      	movs	r0, #6
 80002a0:	f7ff ff8a 	bl	80001b8 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW);
 80002a4:	2080      	movs	r0, #128	; 0x80
 80002a6:	f7ff ff87 	bl	80001b8 <LCD_WriteCommand>
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40010800 	.word	0x40010800

080002b4 <LCD_WriteData>:

static void LCD_WriteData(u8 Data)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	701a      	strb	r2, [r3, #0]
	GPIO_SetPinValue(LCD_CONTROL, RS , HIGH);
 80002c0:	4b14      	ldr	r3, [pc, #80]	; (8000314 <LCD_WriteData+0x60>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	2108      	movs	r1, #8
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fbc8 	bl	8000a5c <GPIO_SetPinValue>
	GPIO_SetPinValue(LCD_CONTROL, RW , LOW);
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <LCD_WriteData+0x60>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	2109      	movs	r1, #9
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fbc2 	bl	8000a5c <GPIO_SetPinValue>
	GPIO_SetPortValue(LCD_DATA, LOW_8PIN_CRL, Data); // Set Port from PINA0 to PINA7
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	480d      	ldr	r0, [pc, #52]	; (8000314 <LCD_WriteData+0x60>)
 80002e0:	001a      	movs	r2, r3
 80002e2:	2104      	movs	r1, #4
 80002e4:	f000 fc78 	bl	8000bd8 <GPIO_SetPortValue>
	GPIO_SetPinValue(LCD_CONTROL, EN, HIGH);   // Set EN
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <LCD_WriteData+0x60>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	210a      	movs	r1, #10
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 fbb4 	bl	8000a5c <GPIO_SetPinValue>
	_delay_ms(2);
 80002f4:	2002      	movs	r0, #2
 80002f6:	f7ff ff3f 	bl	8000178 <_delay_ms>
	GPIO_SetPinValue(LCD_CONTROL, EN, LOW);    // Clear EN
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <LCD_WriteData+0x60>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	210a      	movs	r1, #10
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fbab 	bl	8000a5c <GPIO_SetPinValue>
	_delay_ms(2);
 8000306:	2002      	movs	r0, #2
 8000308:	f7ff ff36 	bl	8000178 <_delay_ms>
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40010800 	.word	0x40010800

08000318 <LCD_WriteChar>:
#endif

/*************************** service functions*****************************************************/

void LCD_WriteChar(u8 character)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	0002      	movs	r2, r0
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	701a      	strb	r2, [r3, #0]
	LCD_WriteData(character);
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	0018      	movs	r0, r3
 800032a:	f7ff ffc3 	bl	80002b4 <LCD_WriteData>
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b002      	add	sp, #8
 8000334:	bd80      	pop	{r7, pc}

08000336 <LCD_Clear>:
void LCD_Clear(void)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	af00      	add	r7, sp, #0
	LCD_WriteCommand(LCD_CLEAR_SCREEN);
 800033a:	2001      	movs	r0, #1
 800033c:	f7ff ff3c 	bl	80001b8 <LCD_WriteCommand>
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <LCD_GoTo>:
void LCD_GoTo(u8 Line, u8 x)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b082      	sub	sp, #8
 800034a:	af00      	add	r7, sp, #0
 800034c:	0002      	movs	r2, r0
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	1dbb      	adds	r3, r7, #6
 8000354:	1c0a      	adds	r2, r1, #0
 8000356:	701a      	strb	r2, [r3, #0]
	if(0 == Line)
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d10b      	bne.n	8000378 <LCD_GoTo+0x32>
	{
		if ( x <=15)
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b0f      	cmp	r3, #15
 8000366:	d816      	bhi.n	8000396 <LCD_GoTo+0x50>
		{
			LCD_WriteCommand(0x80 + x);
 8000368:	1dbb      	adds	r3, r7, #6
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	3b80      	subs	r3, #128	; 0x80
 800036e:	b2db      	uxtb	r3, r3
 8000370:	0018      	movs	r0, r3
 8000372:	f7ff ff21 	bl	80001b8 <LCD_WriteCommand>
		if ( x <=15)
		{
			LCD_WriteCommand(0xC0 + x);
		}
	}
}
 8000376:	e00e      	b.n	8000396 <LCD_GoTo+0x50>
	else if (1 == Line)
 8000378:	1dfb      	adds	r3, r7, #7
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d10a      	bne.n	8000396 <LCD_GoTo+0x50>
		if ( x <=15)
 8000380:	1dbb      	adds	r3, r7, #6
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b0f      	cmp	r3, #15
 8000386:	d806      	bhi.n	8000396 <LCD_GoTo+0x50>
			LCD_WriteCommand(0xC0 + x);
 8000388:	1dbb      	adds	r3, r7, #6
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3b40      	subs	r3, #64	; 0x40
 800038e:	b2db      	uxtb	r3, r3
 8000390:	0018      	movs	r0, r3
 8000392:	f7ff ff11 	bl	80001b8 <LCD_WriteCommand>
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b002      	add	sp, #8
 800039c:	bd80      	pop	{r7, pc}

0800039e <LCD_WriteSentence>:
void LCD_WriteSentence(u8 *PtrSentance)
{
 800039e:	b590      	push	{r4, r7, lr}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
	u8 Count=0;
 80003a6:	230f      	movs	r3, #15
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]

	while(*PtrSentance > 0){
 80003ae:	e029      	b.n	8000404 <LCD_WriteSentence+0x66>

		Count++;
 80003b0:	240f      	movs	r4, #15
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	781a      	ldrb	r2, [r3, #0]
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	3201      	adds	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
		LCD_WriteChar(*PtrSentance++);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	f7ff ffa7 	bl	8000318 <LCD_WriteChar>
		if(Count == 16){       // go to the second line
 80003ca:	193b      	adds	r3, r7, r4
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b10      	cmp	r3, #16
 80003d0:	d104      	bne.n	80003dc <LCD_WriteSentence+0x3e>
			LCD_GoTo(1 , 0);   // line 1 position 0
 80003d2:	2100      	movs	r1, #0
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ffb6 	bl	8000346 <LCD_GoTo>
 80003da:	e013      	b.n	8000404 <LCD_WriteSentence+0x66>
		}
		else if(Count == 32  || Count == 33){
 80003dc:	230f      	movs	r3, #15
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b20      	cmp	r3, #32
 80003e4:	d004      	beq.n	80003f0 <LCD_WriteSentence+0x52>
 80003e6:	230f      	movs	r3, #15
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b21      	cmp	r3, #33	; 0x21
 80003ee:	d109      	bne.n	8000404 <LCD_WriteSentence+0x66>
			LCD_Clear();
 80003f0:	f7ff ffa1 	bl	8000336 <LCD_Clear>
			LCD_GoTo(0 , 0);   // line 0 position 0
 80003f4:	2100      	movs	r1, #0
 80003f6:	2000      	movs	r0, #0
 80003f8:	f7ff ffa5 	bl	8000346 <LCD_GoTo>
			Count = 0;
 80003fc:	230f      	movs	r3, #15
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
	while(*PtrSentance > 0){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1d1      	bne.n	80003b0 <LCD_WriteSentence+0x12>
		}
	}

}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b005      	add	sp, #20
 8000412:	bd90      	pop	{r4, r7, pc}

08000414 <NVIC_Enable_IRQ>:
 *                            Generic Functions
 * =================================================================
 */

void NVIC_Enable_IRQ(u16 IRQ)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	0002      	movs	r2, r0
 800041c:	1dbb      	adds	r3, r7, #6
 800041e:	801a      	strh	r2, [r3, #0]
	switch(IRQ)
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	2b0f      	cmp	r3, #15
 8000426:	d83a      	bhi.n	800049e <NVIC_Enable_IRQ+0x8a>
 8000428:	009a      	lsls	r2, r3, #2
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <NVIC_Enable_IRQ+0x94>)
 800042c:	18d3      	adds	r3, r2, r3
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	469f      	mov	pc, r3
	{
	case EXTI_LINE0:
		NVIC_IRQ_EXTI_Enable(EXTI0IRQn);
 8000432:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000438:	2140      	movs	r1, #64	; 0x40
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
		break;
 800043e:	e02e      	b.n	800049e <NVIC_Enable_IRQ+0x8a>
	case EXTI_LINE1:
		NVIC_IRQ_EXTI_Enable(EXTI1IRQn);
 8000440:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	430a      	orrs	r2, r1
 800044a:	601a      	str	r2, [r3, #0]
		break;
 800044c:	e027      	b.n	800049e <NVIC_Enable_IRQ+0x8a>
	case EXTI_LINE2:
		NVIC_IRQ_EXTI_Enable(EXTI2IRQn);
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b16      	ldr	r3, [pc, #88]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0049      	lsls	r1, r1, #1
 8000458:	430a      	orrs	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
		break;
 800045c:	e01f      	b.n	800049e <NVIC_Enable_IRQ+0x8a>
	case EXTI_LINE3:
		NVIC_IRQ_EXTI_Enable(EXTI3IRQn);
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	0089      	lsls	r1, r1, #2
 8000468:	430a      	orrs	r2, r1
 800046a:	601a      	str	r2, [r3, #0]
		break;
 800046c:	e017      	b.n	800049e <NVIC_Enable_IRQ+0x8a>
	case EXTI_LINE4:
		NVIC_IRQ_EXTI_Enable(EXTI4IRQn);
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	00c9      	lsls	r1, r1, #3
 8000478:	430a      	orrs	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
		break;
 800047c:	e00f      	b.n	800049e <NVIC_Enable_IRQ+0x8a>
	case EXTI_LINE5:
	case EXTI_LINE6:
	case EXTI_LINE7:
	case EXTI_LINE8:
	case EXTI_LINE9:
		NVIC_IRQ_EXTI_Enable(EXTI5IRQn);
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0409      	lsls	r1, r1, #16
 8000488:	430a      	orrs	r2, r1
 800048a:	601a      	str	r2, [r3, #0]
		break;
 800048c:	e007      	b.n	800049e <NVIC_Enable_IRQ+0x8a>
	case EXTI_LINE11:
	case EXTI_LINE12:
	case EXTI_LINE13:
	case EXTI_LINE14:
	case EXTI_LINE15:
		NVIC_IRQ_EXTI_Enable(EXTI10IRQn);
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <NVIC_Enable_IRQ+0x98>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	0049      	lsls	r1, r1, #1
 8000498:	430a      	orrs	r2, r1
 800049a:	605a      	str	r2, [r3, #4]
		break;
 800049c:	46c0      	nop			; (mov r8, r8)
	}
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	08000e98 	.word	0x08000e98
 80004ac:	e000e100 	.word	0xe000e100

080004b0 <NVIC_Disable_IRQ>:

void NVIC_Disable_IRQ(u16 IRQ)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0002      	movs	r2, r0
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	801a      	strh	r2, [r3, #0]
	switch(IRQ)
 80004bc:	1dbb      	adds	r3, r7, #6
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	2b0f      	cmp	r3, #15
 80004c2:	d83a      	bhi.n	800053a <NVIC_Disable_IRQ+0x8a>
 80004c4:	009a      	lsls	r2, r3, #2
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <NVIC_Disable_IRQ+0x94>)
 80004c8:	18d3      	adds	r3, r2, r3
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	469f      	mov	pc, r3
	{
	case EXTI_LINE0:
		NVIC_IRQ_EXTI_Disable(EXTI0IRQn);
 80004ce:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	430a      	orrs	r2, r1
 80004d8:	601a      	str	r2, [r3, #0]
		break;
 80004da:	e02e      	b.n	800053a <NVIC_Disable_IRQ+0x8a>
	case EXTI_LINE1:
		NVIC_IRQ_EXTI_Disable(EXTI1IRQn);
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	430a      	orrs	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
		break;
 80004e8:	e027      	b.n	800053a <NVIC_Disable_IRQ+0x8a>
	case EXTI_LINE2:
		NVIC_IRQ_EXTI_Disable(EXTI2IRQn);
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0049      	lsls	r1, r1, #1
 80004f4:	430a      	orrs	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
		break;
 80004f8:	e01f      	b.n	800053a <NVIC_Disable_IRQ+0x8a>
	case EXTI_LINE3:
		NVIC_IRQ_EXTI_Disable(EXTI3IRQn);
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0089      	lsls	r1, r1, #2
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]
		break;
 8000508:	e017      	b.n	800053a <NVIC_Disable_IRQ+0x8a>
	case EXTI_LINE4:
		NVIC_IRQ_EXTI_Disable(EXTI4IRQn);
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	00c9      	lsls	r1, r1, #3
 8000514:	430a      	orrs	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
		break;
 8000518:	e00f      	b.n	800053a <NVIC_Disable_IRQ+0x8a>
	case EXTI_LINE5:
	case EXTI_LINE6:
	case EXTI_LINE7:
	case EXTI_LINE8:
	case EXTI_LINE9:
		NVIC_IRQ_EXTI_Disable(EXTI5IRQn);
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0409      	lsls	r1, r1, #16
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
		break;
 8000528:	e007      	b.n	800053a <NVIC_Disable_IRQ+0x8a>
	case EXTI_LINE11:
	case EXTI_LINE12:
	case EXTI_LINE13:
	case EXTI_LINE14:
	case EXTI_LINE15:
		NVIC_IRQ_EXTI_Disable(EXTI10IRQn);
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <NVIC_Disable_IRQ+0x98>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0049      	lsls	r1, r1, #1
 8000534:	430a      	orrs	r2, r1
 8000536:	605a      	str	r2, [r3, #4]
		break;
 8000538:	46c0      	nop			; (mov r8, r8)
	}
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	08000ed8 	.word	0x08000ed8
 8000548:	e000e100 	.word	0xe000e100

0800054c <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to the AF Input -> Floating Input
	GPIO_SetPinDirection(EXTI_Config->EXTI_PIN.GPIO_Port, EXTI_Config->EXTI_PIN.GPIO_PIN, INPUT_FLOATING);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	891b      	ldrh	r3, [r3, #8]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2204      	movs	r2, #4
 8000560:	0019      	movs	r1, r3
 8000562:	f000 fa2d 	bl	80009c0 <GPIO_SetPinDirection>

	//===================================================================================
	//2- Update AFIO to Route between EXTI Line With Port A,B,C,D
	u8 AFIO_EXTICRx_Index = EXTI_Config->EXTI_PIN.EXTI_Line_Number / 4;  // EXTICR[0] ---> EXTICR[3]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	b29a      	uxth	r2, r3
 800056e:	240f      	movs	r4, #15
 8000570:	193b      	adds	r3, r7, r4
 8000572:	701a      	strb	r2, [r3, #0]
	u8 AFIO_EXTICRx_Position = ((EXTI_Config->EXTI_PIN.EXTI_Line_Number%4)*4);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2203      	movs	r2, #3
 800057c:	4013      	ands	r3, r2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	210e      	movs	r1, #14
 8000582:	187b      	adds	r3, r7, r1
 8000584:	0092      	lsls	r2, r2, #2
 8000586:	701a      	strb	r2, [r3, #0]

	// Clear the four bits
	AFIO->EXTICRx[AFIO_EXTICRx_Index] &= ~((0b1111) << AFIO_EXTICRx_Position);
 8000588:	4a65      	ldr	r2, [pc, #404]	; (8000720 <Update_EXTI+0x1d4>)
 800058a:	193b      	adds	r3, r7, r4
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3302      	adds	r3, #2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	589a      	ldr	r2, [r3, r2]
 8000594:	187b      	adds	r3, r7, r1
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	210f      	movs	r1, #15
 800059a:	4099      	lsls	r1, r3
 800059c:	000b      	movs	r3, r1
 800059e:	43db      	mvns	r3, r3
 80005a0:	0018      	movs	r0, r3
 80005a2:	495f      	ldr	r1, [pc, #380]	; (8000720 <Update_EXTI+0x1d4>)
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4002      	ands	r2, r0
 80005aa:	3302      	adds	r3, #2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	505a      	str	r2, [r3, r1]
	AFIO->EXTICRx[AFIO_EXTICRx_Index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICRx_Position);
 80005b0:	4a5b      	ldr	r2, [pc, #364]	; (8000720 <Update_EXTI+0x1d4>)
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	3302      	adds	r3, #2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	589a      	ldr	r2, [r3, r2]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	4958      	ldr	r1, [pc, #352]	; (8000724 <Update_EXTI+0x1d8>)
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d016      	beq.n	80005f4 <Update_EXTI+0xa8>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	4957      	ldr	r1, [pc, #348]	; (8000728 <Update_EXTI+0x1dc>)
 80005cc:	428b      	cmp	r3, r1
 80005ce:	d00f      	beq.n	80005f0 <Update_EXTI+0xa4>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4955      	ldr	r1, [pc, #340]	; (800072c <Update_EXTI+0x1e0>)
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d008      	beq.n	80005ec <Update_EXTI+0xa0>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4954      	ldr	r1, [pc, #336]	; (8000730 <Update_EXTI+0x1e4>)
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d101      	bne.n	80005e8 <Update_EXTI+0x9c>
 80005e4:	2303      	movs	r3, #3
 80005e6:	e006      	b.n	80005f6 <Update_EXTI+0xaa>
 80005e8:	2300      	movs	r3, #0
 80005ea:	e004      	b.n	80005f6 <Update_EXTI+0xaa>
 80005ec:	2302      	movs	r3, #2
 80005ee:	e002      	b.n	80005f6 <Update_EXTI+0xaa>
 80005f0:	2301      	movs	r3, #1
 80005f2:	e000      	b.n	80005f6 <Update_EXTI+0xaa>
 80005f4:	2300      	movs	r3, #0
 80005f6:	210e      	movs	r1, #14
 80005f8:	1879      	adds	r1, r7, r1
 80005fa:	7809      	ldrb	r1, [r1, #0]
 80005fc:	408b      	lsls	r3, r1
 80005fe:	0018      	movs	r0, r3
 8000600:	4947      	ldr	r1, [pc, #284]	; (8000720 <Update_EXTI+0x1d4>)
 8000602:	230f      	movs	r3, #15
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4302      	orrs	r2, r0
 800060a:	3302      	adds	r3, #2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	505a      	str	r2, [r3, r1]

	//====================================================================================
	//3- Update Rising or Falling Edge
	CLEAR_BIT(EXTI->RTSR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000610:	4b48      	ldr	r3, [pc, #288]	; (8000734 <Update_EXTI+0x1e8>)
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	0019      	movs	r1, r3
 800061a:	2301      	movs	r3, #1
 800061c:	408b      	lsls	r3, r1
 800061e:	43db      	mvns	r3, r3
 8000620:	0019      	movs	r1, r3
 8000622:	4b44      	ldr	r3, [pc, #272]	; (8000734 <Update_EXTI+0x1e8>)
 8000624:	400a      	ands	r2, r1
 8000626:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(EXTI->FTSR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000628:	4b42      	ldr	r3, [pc, #264]	; (8000734 <Update_EXTI+0x1e8>)
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	0019      	movs	r1, r3
 8000632:	2301      	movs	r3, #1
 8000634:	408b      	lsls	r3, r1
 8000636:	43db      	mvns	r3, r3
 8000638:	0019      	movs	r1, r3
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <Update_EXTI+0x1e8>)
 800063c:	400a      	ands	r2, r1
 800063e:	60da      	str	r2, [r3, #12]

	if(EXTI_Config->EXTI_Mode == EXTI_RISING_EDGE)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7b1b      	ldrb	r3, [r3, #12]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10b      	bne.n	8000660 <Update_EXTI+0x114>
	{
		SET_BIT(EXTI->RTSR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <Update_EXTI+0x1e8>)
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	0019      	movs	r1, r3
 8000652:	2301      	movs	r3, #1
 8000654:	408b      	lsls	r3, r1
 8000656:	0019      	movs	r1, r3
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <Update_EXTI+0x1e8>)
 800065a:	430a      	orrs	r2, r1
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	e029      	b.n	80006b4 <Update_EXTI+0x168>
	}
	else if(EXTI_Config->EXTI_Mode == EXTI_FALLING_EDGE)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7b1b      	ldrb	r3, [r3, #12]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10b      	bne.n	8000680 <Update_EXTI+0x134>
	{
		SET_BIT(EXTI->FTSR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <Update_EXTI+0x1e8>)
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	0019      	movs	r1, r3
 8000672:	2301      	movs	r3, #1
 8000674:	408b      	lsls	r3, r1
 8000676:	0019      	movs	r1, r3
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <Update_EXTI+0x1e8>)
 800067a:	430a      	orrs	r2, r1
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	e019      	b.n	80006b4 <Update_EXTI+0x168>
	}
	else if(EXTI_Config->EXTI_Mode == EXTI_ON_CHANGE)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7b1b      	ldrb	r3, [r3, #12]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d115      	bne.n	80006b4 <Update_EXTI+0x168>
	{
		SET_BIT(EXTI->RTSR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <Update_EXTI+0x1e8>)
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	0019      	movs	r1, r3
 8000692:	2301      	movs	r3, #1
 8000694:	408b      	lsls	r3, r1
 8000696:	0019      	movs	r1, r3
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <Update_EXTI+0x1e8>)
 800069a:	430a      	orrs	r2, r1
 800069c:	609a      	str	r2, [r3, #8]
		SET_BIT(EXTI->FTSR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <Update_EXTI+0x1e8>)
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	0019      	movs	r1, r3
 80006a8:	2301      	movs	r3, #1
 80006aa:	408b      	lsls	r3, r1
 80006ac:	0019      	movs	r1, r3
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <Update_EXTI+0x1e8>)
 80006b0:	430a      	orrs	r2, r1
 80006b2:	60da      	str	r2, [r3, #12]
	}

	//====================================================================================
	//4- Update IRQ Handling CallBack

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_Line_Number] = EXTI_Config->P_IRQ_CallBack;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	001a      	movs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6919      	ldr	r1, [r3, #16]
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <Update_EXTI+0x1ec>)
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	50d1      	str	r1, [r2, r3]

	//====================================================================================
	//5- Enable/Disable IRQ & NVIC

	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7b5b      	ldrb	r3, [r3, #13]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d110      	bne.n	80006ee <Update_EXTI+0x1a2>
	{
		SET_BIT(EXTI->IMR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <Update_EXTI+0x1e8>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	0019      	movs	r1, r3
 80006d6:	2301      	movs	r3, #1
 80006d8:	408b      	lsls	r3, r1
 80006da:	0019      	movs	r1, r3
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <Update_EXTI+0x1e8>)
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
		NVIC_Enable_IRQ(EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff fe94 	bl	8000414 <NVIC_Enable_IRQ>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
	{
		CLEAR_BIT(EXTI->IMR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
		NVIC_Disable_IRQ(EXTI_Config->EXTI_PIN.EXTI_Line_Number);
	}
}
 80006ec:	e014      	b.n	8000718 <Update_EXTI+0x1cc>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7b5b      	ldrb	r3, [r3, #13]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d110      	bne.n	8000718 <Update_EXTI+0x1cc>
		CLEAR_BIT(EXTI->IMR , EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <Update_EXTI+0x1e8>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	0019      	movs	r1, r3
 8000700:	2301      	movs	r3, #1
 8000702:	408b      	lsls	r3, r1
 8000704:	43db      	mvns	r3, r3
 8000706:	0019      	movs	r1, r3
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <Update_EXTI+0x1e8>)
 800070a:	400a      	ands	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
		NVIC_Disable_IRQ(EXTI_Config->EXTI_PIN.EXTI_Line_Number);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fecc 	bl	80004b0 <NVIC_Disable_IRQ>
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b005      	add	sp, #20
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	40010000 	.word	0x40010000
 8000724:	40010800 	.word	0x40010800
 8000728:	40010c00 	.word	0x40010c00
 800072c:	40011000 	.word	0x40011000
 8000730:	40011400 	.word	0x40011400
 8000734:	40010400 	.word	0x40010400
 8000738:	20000020 	.word	0x20000020

0800073c <EXTI_GPIO_Init>:
 *                            APIS Functions Definitions
 * ==================================================================
 */

void EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff ff00 	bl	800054c <Update_EXTI>
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}

08000754 <EXTI0_IRQHandler>:
 *                            ISR Functions Definitions
 * ==================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<0)  { EXTI->PR |= 1<<0  ; GP_IRQ_CallBack[0]()  ; }
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <EXTI0_IRQHandler+0x28>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	2201      	movs	r2, #1
 800075e:	4013      	ands	r3, r2
 8000760:	d008      	beq.n	8000774 <EXTI0_IRQHandler+0x20>
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <EXTI0_IRQHandler+0x28>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <EXTI0_IRQHandler+0x28>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <EXTI0_IRQHandler+0x2c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4798      	blx	r3
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40010400 	.word	0x40010400
 8000780:	20000020 	.word	0x20000020

08000784 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<1)  { EXTI->PR |= 1<<1  ; GP_IRQ_CallBack[1]()  ; }
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <EXTI1_IRQHandler+0x28>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	2202      	movs	r2, #2
 800078e:	4013      	ands	r3, r2
 8000790:	d008      	beq.n	80007a4 <EXTI1_IRQHandler+0x20>
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <EXTI1_IRQHandler+0x28>)
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <EXTI1_IRQHandler+0x28>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <EXTI1_IRQHandler+0x2c>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4798      	blx	r3
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40010400 	.word	0x40010400
 80007b0:	20000020 	.word	0x20000020

080007b4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<2)  { EXTI->PR |= 1<<2  ; GP_IRQ_CallBack[2]() ; }
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <EXTI2_IRQHandler+0x28>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	2204      	movs	r2, #4
 80007be:	4013      	ands	r3, r2
 80007c0:	d008      	beq.n	80007d4 <EXTI2_IRQHandler+0x20>
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <EXTI2_IRQHandler+0x28>)
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <EXTI2_IRQHandler+0x28>)
 80007c8:	2104      	movs	r1, #4
 80007ca:	430a      	orrs	r2, r1
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <EXTI2_IRQHandler+0x2c>)
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	4798      	blx	r3
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40010400 	.word	0x40010400
 80007e0:	20000020 	.word	0x20000020

080007e4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<3)  { EXTI->PR |= 1<<3  ; GP_IRQ_CallBack[3]() ; }
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <EXTI3_IRQHandler+0x28>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	2208      	movs	r2, #8
 80007ee:	4013      	ands	r3, r2
 80007f0:	d008      	beq.n	8000804 <EXTI3_IRQHandler+0x20>
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <EXTI3_IRQHandler+0x28>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <EXTI3_IRQHandler+0x28>)
 80007f8:	2108      	movs	r1, #8
 80007fa:	430a      	orrs	r2, r1
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <EXTI3_IRQHandler+0x2c>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	4798      	blx	r3
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40010400 	.word	0x40010400
 8000810:	20000020 	.word	0x20000020

08000814 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<4)  { EXTI->PR |= 1<<4  ; GP_IRQ_CallBack[4]() ; }
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <EXTI4_IRQHandler+0x28>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	2210      	movs	r2, #16
 800081e:	4013      	ands	r3, r2
 8000820:	d008      	beq.n	8000834 <EXTI4_IRQHandler+0x20>
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <EXTI4_IRQHandler+0x28>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <EXTI4_IRQHandler+0x28>)
 8000828:	2110      	movs	r1, #16
 800082a:	430a      	orrs	r2, r1
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <EXTI4_IRQHandler+0x2c>)
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	4798      	blx	r3
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40010400 	.word	0x40010400
 8000840:	20000020 	.word	0x20000020

08000844 <EXTI5_9_IRQHandler>:

void EXTI5_9_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)  { EXTI->PR |= 1<<5  ; GP_IRQ_CallBack[5]()  ; }
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	2220      	movs	r2, #32
 800084e:	4013      	ands	r3, r2
 8000850:	d008      	beq.n	8000864 <EXTI5_9_IRQHandler+0x20>
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 8000858:	2120      	movs	r1, #32
 800085a:	430a      	orrs	r2, r1
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <EXTI5_9_IRQHandler+0xa4>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4798      	blx	r3
	if (EXTI->PR & 1<<6)  { EXTI->PR |= 1<<6  ; GP_IRQ_CallBack[6]()  ; }
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	2240      	movs	r2, #64	; 0x40
 800086a:	4013      	ands	r3, r2
 800086c:	d008      	beq.n	8000880 <EXTI5_9_IRQHandler+0x3c>
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	430a      	orrs	r2, r1
 8000878:	615a      	str	r2, [r3, #20]
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <EXTI5_9_IRQHandler+0xa4>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4798      	blx	r3
	if (EXTI->PR & 1<<7)  { EXTI->PR |= 1<<7  ; GP_IRQ_CallBack[7]()  ; }
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	4013      	ands	r3, r2
 8000888:	d008      	beq.n	800089c <EXTI5_9_IRQHandler+0x58>
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	430a      	orrs	r2, r1
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <EXTI5_9_IRQHandler+0xa4>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4798      	blx	r3
	if (EXTI->PR & 1<<8)  { EXTI->PR |= 1<<8  ; GP_IRQ_CallBack[8]()  ; }
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	d009      	beq.n	80008bc <EXTI5_9_IRQHandler+0x78>
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	0049      	lsls	r1, r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <EXTI5_9_IRQHandler+0xa4>)
 80008b8:	6a1b      	ldr	r3, [r3, #32]
 80008ba:	4798      	blx	r3
	if (EXTI->PR & 1<<9)  { EXTI->PR |= 1<<9  ; GP_IRQ_CallBack[9]()  ; }
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4013      	ands	r3, r2
 80008c6:	d009      	beq.n	80008dc <EXTI5_9_IRQHandler+0x98>
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <EXTI5_9_IRQHandler+0xa0>)
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	0089      	lsls	r1, r1, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <EXTI5_9_IRQHandler+0xa4>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	4798      	blx	r3
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	40010400 	.word	0x40010400
 80008e8:	20000020 	.word	0x20000020

080008ec <EXTI10_15_IRQHandler>:

void EXTI10_15_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

	if (EXTI->PR & 1<<10) { EXTI->PR |= 1<<10 ; GP_IRQ_CallBack[10]() ; }
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 80008f2:	695a      	ldr	r2, [r3, #20]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	4013      	ands	r3, r2
 80008fa:	d009      	beq.n	8000910 <EXTI10_15_IRQHandler+0x24>
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	00c9      	lsls	r1, r1, #3
 8000906:	430a      	orrs	r2, r1
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <EXTI10_15_IRQHandler+0xd0>)
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	4798      	blx	r3
	if (EXTI->PR & 1<<11) { EXTI->PR |= 1<<11 ; GP_IRQ_CallBack[11]() ; }
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	4013      	ands	r3, r2
 800091a:	d009      	beq.n	8000930 <EXTI10_15_IRQHandler+0x44>
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	0109      	lsls	r1, r1, #4
 8000926:	430a      	orrs	r2, r1
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <EXTI10_15_IRQHandler+0xd0>)
 800092c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092e:	4798      	blx	r3
	if (EXTI->PR & 1<<12) { EXTI->PR |= 1<<12 ; GP_IRQ_CallBack[12]() ; }
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000932:	695a      	ldr	r2, [r3, #20]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	015b      	lsls	r3, r3, #5
 8000938:	4013      	ands	r3, r2
 800093a:	d009      	beq.n	8000950 <EXTI10_15_IRQHandler+0x64>
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	0149      	lsls	r1, r1, #5
 8000946:	430a      	orrs	r2, r1
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <EXTI10_15_IRQHandler+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4798      	blx	r3
	if (EXTI->PR & 1<<13) { EXTI->PR |= 1<<13 ; GP_IRQ_CallBack[13]() ; }
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	019b      	lsls	r3, r3, #6
 8000958:	4013      	ands	r3, r2
 800095a:	d009      	beq.n	8000970 <EXTI10_15_IRQHandler+0x84>
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	0189      	lsls	r1, r1, #6
 8000966:	430a      	orrs	r2, r1
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <EXTI10_15_IRQHandler+0xd0>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	4798      	blx	r3
	if (EXTI->PR & 1<<14) { EXTI->PR |= 1<<14 ; GP_IRQ_CallBack[14]() ; }
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	01db      	lsls	r3, r3, #7
 8000978:	4013      	ands	r3, r2
 800097a:	d009      	beq.n	8000990 <EXTI10_15_IRQHandler+0xa4>
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	01c9      	lsls	r1, r1, #7
 8000986:	430a      	orrs	r2, r1
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <EXTI10_15_IRQHandler+0xd0>)
 800098c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098e:	4798      	blx	r3
	if (EXTI->PR & 1<<15) { EXTI->PR |= 1<<15 ; GP_IRQ_CallBack[15]() ; }
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	4013      	ands	r3, r2
 800099a:	d009      	beq.n	80009b0 <EXTI10_15_IRQHandler+0xc4>
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 800099e:	695a      	ldr	r2, [r3, #20]
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <EXTI10_15_IRQHandler+0xcc>)
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	0209      	lsls	r1, r1, #8
 80009a6:	430a      	orrs	r2, r1
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <EXTI10_15_IRQHandler+0xd0>)
 80009ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ae:	4798      	blx	r3
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	40010400 	.word	0x40010400
 80009bc:	20000020 	.word	0x20000020

080009c0 <GPIO_SetPinDirection>:
 */

#include "GPIO.h"

void GPIO_SetPinDirection(GPIO_t* GPIOx , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	0008      	movs	r0, r1
 80009ca:	0011      	movs	r1, r2
 80009cc:	1cfb      	adds	r3, r7, #3
 80009ce:	1c02      	adds	r2, r0, #0
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	1cbb      	adds	r3, r7, #2
 80009d4:	1c0a      	adds	r2, r1, #0
 80009d6:	701a      	strb	r2, [r3, #0]

	if(Copy_u8Pin <= 7){
 80009d8:	1cfb      	adds	r3, r7, #3
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b07      	cmp	r3, #7
 80009de:	d818      	bhi.n	8000a12 <GPIO_SetPinDirection+0x52>
		GPIOx->CRL &= ~((0b1111) << (Copy_u8Pin * 4));     // Clear the Four Bits Of each pin
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	1cfa      	adds	r2, r7, #3
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	210f      	movs	r1, #15
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	43d2      	mvns	r2, r2
 80009f2:	401a      	ands	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); // Set 4 Bit of each pin by Copy_u8Mode Value
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1cba      	adds	r2, r7, #2
 80009fe:	7811      	ldrb	r1, [r2, #0]
 8000a00:	1cfa      	adds	r2, r7, #3
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	4091      	lsls	r1, r2
 8000a08:	000a      	movs	r2, r1
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	601a      	str	r2, [r3, #0]
		Copy_u8Pin = Copy_u8Pin - 8;
		GPIOx->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
		GPIOx->CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
	}

}
 8000a10:	e020      	b.n	8000a54 <GPIO_SetPinDirection+0x94>
	else if(Copy_u8Pin <= 15){
 8000a12:	1cfb      	adds	r3, r7, #3
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d81c      	bhi.n	8000a54 <GPIO_SetPinDirection+0x94>
		Copy_u8Pin = Copy_u8Pin - 8;
 8000a1a:	1cfb      	adds	r3, r7, #3
 8000a1c:	1cfa      	adds	r2, r7, #3
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	3a08      	subs	r2, #8
 8000a22:	701a      	strb	r2, [r3, #0]
		GPIOx->CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	1cfa      	adds	r2, r7, #3
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	210f      	movs	r1, #15
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	401a      	ands	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	1cba      	adds	r2, r7, #2
 8000a42:	7811      	ldrb	r1, [r2, #0]
 8000a44:	1cfa      	adds	r2, r7, #3
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	000a      	movs	r2, r1
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	605a      	str	r2, [r3, #4]
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <GPIO_SetPinValue>:
void GPIO_SetPinValue( GPIO_t* GPIOx , u8 Copy_u8Pin , u8 Copy_u8Value )
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	0008      	movs	r0, r1
 8000a66:	0011      	movs	r1, r2
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	1c02      	adds	r2, r0, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	1cbb      	adds	r3, r7, #2
 8000a70:	1c0a      	adds	r2, r1, #0
 8000a72:	701a      	strb	r2, [r3, #0]
	if(Copy_u8Value == HIGH){
 8000a74:	1cbb      	adds	r3, r7, #2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d10a      	bne.n	8000a92 <GPIO_SetPinValue+0x36>
		SET_BIT(GPIOx->ODR , Copy_u8Pin);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	1cfa      	adds	r2, r7, #3
 8000a82:	7812      	ldrb	r2, [r2, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	4091      	lsls	r1, r2
 8000a88:	000a      	movs	r2, r1
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	60da      	str	r2, [r3, #12]
	}
	else if(Copy_u8Value == LOW){
		CLEAR_BIT(GPIOx->ODR , Copy_u8Pin);
	}
}
 8000a90:	e00e      	b.n	8000ab0 <GPIO_SetPinValue+0x54>
	else if(Copy_u8Value == LOW){
 8000a92:	1cbb      	adds	r3, r7, #2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10a      	bne.n	8000ab0 <GPIO_SetPinValue+0x54>
		CLEAR_BIT(GPIOx->ODR , Copy_u8Pin);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	1cfa      	adds	r2, r7, #3
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	401a      	ands	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <GPIO_SetPortDirection>:

	return Value;
}

void GPIO_SetPortDirection( GPIO_t* GPIOx , u8 Copy_u8Position , u8 Copy_u8Mode )
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	0008      	movs	r0, r1
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	1cfb      	adds	r3, r7, #3
 8000ac6:	1c02      	adds	r2, r0, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	1cbb      	adds	r3, r7, #2
 8000acc:	1c0a      	adds	r2, r1, #0
 8000ace:	701a      	strb	r2, [r3, #0]

	if(Copy_u8Position == LOW_8PIN_CRL){
 8000ad0:	1cfb      	adds	r3, r7, #3
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d10c      	bne.n	8000af2 <GPIO_SetPortDirection+0x3a>
		GPIOx->CRL = 0x11111111 * Copy_u8Mode;
 8000ad8:	1cbb      	adds	r3, r7, #2
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	0013      	movs	r3, r2
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	189b      	adds	r3, r3, r2
 8000ae2:	021a      	lsls	r2, r3, #8
 8000ae4:	189b      	adds	r3, r3, r2
 8000ae6:	041a      	lsls	r2, r3, #16
 8000ae8:	189b      	adds	r3, r3, r2
 8000aea:	001a      	movs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	601a      	str	r2, [r3, #0]
	}
	else if(Copy_u8Position == HIGH_4PIN_CRH){
		GPIOx->CRH = (GPIOx->CRH & 0x0000FFFF) | (( (0x11111111 * Copy_u8Mode) << 16) & 0xFFFF0000);
	}

}
 8000af0:	e06d      	b.n	8000bce <GPIO_SetPortDirection+0x116>
	else if(Copy_u8Position == HIGH_8PIN_CRH){
 8000af2:	1cfb      	adds	r3, r7, #3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d10c      	bne.n	8000b14 <GPIO_SetPortDirection+0x5c>
		GPIOx->CRH = 0x11111111 * Copy_u8Mode;
 8000afa:	1cbb      	adds	r3, r7, #2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	0013      	movs	r3, r2
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	189b      	adds	r3, r3, r2
 8000b04:	021a      	lsls	r2, r3, #8
 8000b06:	189b      	adds	r3, r3, r2
 8000b08:	041a      	lsls	r2, r3, #16
 8000b0a:	189b      	adds	r3, r3, r2
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
}
 8000b12:	e05c      	b.n	8000bce <GPIO_SetPortDirection+0x116>
	else if(Copy_u8Position == LOW_4PIN_CRL){
 8000b14:	1cfb      	adds	r3, r7, #3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d113      	bne.n	8000b44 <GPIO_SetPortDirection+0x8c>
		GPIOx->CRL = (GPIOx->CRL & 0xFFFF0000) | ( (0x11111111 * Copy_u8Mode) & 0x0000FFFF);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	0419      	lsls	r1, r3, #16
 8000b24:	1cbb      	adds	r3, r7, #2
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	0013      	movs	r3, r2
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	189b      	adds	r3, r3, r2
 8000b2e:	021a      	lsls	r2, r3, #8
 8000b30:	189b      	adds	r3, r3, r2
 8000b32:	041a      	lsls	r2, r3, #16
 8000b34:	189b      	adds	r3, r3, r2
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	e044      	b.n	8000bce <GPIO_SetPortDirection+0x116>
	else if(Copy_u8Position == HIGH_4PIN_CRL){
 8000b44:	1cfb      	adds	r3, r7, #3
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d112      	bne.n	8000b72 <GPIO_SetPortDirection+0xba>
		GPIOx->CRL = (GPIOx->CRL & 0x0000FFFF) | (( (0x11111111 * Copy_u8Mode) << 16) & 0xFFFF0000);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	041b      	lsls	r3, r3, #16
 8000b52:	0c19      	lsrs	r1, r3, #16
 8000b54:	1cbb      	adds	r3, r7, #2
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	0013      	movs	r3, r2
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	189b      	adds	r3, r3, r2
 8000b5e:	021a      	lsls	r2, r3, #8
 8000b60:	189b      	adds	r3, r3, r2
 8000b62:	041a      	lsls	r2, r3, #16
 8000b64:	189b      	adds	r3, r3, r2
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	000a      	movs	r2, r1
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	e02d      	b.n	8000bce <GPIO_SetPortDirection+0x116>
	else if(Copy_u8Position == LOW_4PIN_CRH){
 8000b72:	1cfb      	adds	r3, r7, #3
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d113      	bne.n	8000ba2 <GPIO_SetPortDirection+0xea>
		GPIOx->CRH = (GPIOx->CRH & 0xFFFF0000) | ( (0x11111111 * Copy_u8Mode) & 0x0000FFFF);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	0c1b      	lsrs	r3, r3, #16
 8000b80:	0419      	lsls	r1, r3, #16
 8000b82:	1cbb      	adds	r3, r7, #2
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	0013      	movs	r3, r2
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	189b      	adds	r3, r3, r2
 8000b8c:	021a      	lsls	r2, r3, #8
 8000b8e:	189b      	adds	r3, r3, r2
 8000b90:	041a      	lsls	r2, r3, #16
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	0c1b      	lsrs	r3, r3, #16
 8000b98:	000a      	movs	r2, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	605a      	str	r2, [r3, #4]
}
 8000ba0:	e015      	b.n	8000bce <GPIO_SetPortDirection+0x116>
	else if(Copy_u8Position == HIGH_4PIN_CRH){
 8000ba2:	1cfb      	adds	r3, r7, #3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d111      	bne.n	8000bce <GPIO_SetPortDirection+0x116>
		GPIOx->CRH = (GPIOx->CRH & 0x0000FFFF) | (( (0x11111111 * Copy_u8Mode) << 16) & 0xFFFF0000);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	041b      	lsls	r3, r3, #16
 8000bb0:	0c19      	lsrs	r1, r3, #16
 8000bb2:	1cbb      	adds	r3, r7, #2
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	189b      	adds	r3, r3, r2
 8000bbc:	021a      	lsls	r2, r3, #8
 8000bbe:	189b      	adds	r3, r3, r2
 8000bc0:	041a      	lsls	r2, r3, #16
 8000bc2:	189b      	adds	r3, r3, r2
 8000bc4:	041b      	lsls	r3, r3, #16
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	605a      	str	r2, [r3, #4]
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <GPIO_SetPortValue>:
void GPIO_SetPortValue( GPIO_t* GPIOx , u8 Copy_u8Position , u16 Copy_u8Value )
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	0008      	movs	r0, r1
 8000be2:	0011      	movs	r1, r2
 8000be4:	1cfb      	adds	r3, r7, #3
 8000be6:	1c02      	adds	r2, r0, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	003b      	movs	r3, r7
 8000bec:	1c0a      	adds	r2, r1, #0
 8000bee:	801a      	strh	r2, [r3, #0]

	if(Copy_u8Position == LOW_8PIN_CRL){
 8000bf0:	1cfb      	adds	r3, r7, #3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d10c      	bne.n	8000c12 <GPIO_SetPortValue+0x3a>
		GPIOx->ODR = (GPIOx->ODR & 0xFF00) |(Copy_u8Value & 0x00FF);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	23ff      	movs	r3, #255	; 0xff
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	401a      	ands	r2, r3
 8000c02:	003b      	movs	r3, r7
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	21ff      	movs	r1, #255	; 0xff
 8000c08:	400b      	ands	r3, r1
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	60da      	str	r2, [r3, #12]
	}
	else if(Copy_u8Position == HIGH_4PIN_CRH){
		GPIOx->ODR = (GPIOx->ODR & 0x0FFF) | ( (u8)Copy_u8Value << 12 );
	}

}
 8000c10:	e04c      	b.n	8000cac <GPIO_SetPortValue+0xd4>
	else if(Copy_u8Position == HIGH_8PIN_CRH){
 8000c12:	1cfb      	adds	r3, r7, #3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b05      	cmp	r3, #5
 8000c18:	d10a      	bne.n	8000c30 <GPIO_SetPortValue+0x58>
		GPIOx->ODR = (GPIOx->ODR & 0x00FF) |(Copy_u8Value << 8);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	4013      	ands	r3, r2
 8000c22:	003a      	movs	r2, r7
 8000c24:	8812      	ldrh	r2, [r2, #0]
 8000c26:	0212      	lsls	r2, r2, #8
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60da      	str	r2, [r3, #12]
}
 8000c2e:	e03d      	b.n	8000cac <GPIO_SetPortValue+0xd4>
	else if(Copy_u8Position == LOW_4PIN_CRL){
 8000c30:	1cfb      	adds	r3, r7, #3
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10a      	bne.n	8000c4e <GPIO_SetPortValue+0x76>
		GPIOx->ODR = (GPIOx->ODR & 0xFFF0) | ( (u8)Copy_u8Value );
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <GPIO_SetPortValue+0xdc>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	003a      	movs	r2, r7
 8000c42:	8812      	ldrh	r2, [r2, #0]
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	60da      	str	r2, [r3, #12]
}
 8000c4c:	e02e      	b.n	8000cac <GPIO_SetPortValue+0xd4>
	else if(Copy_u8Position == HIGH_4PIN_CRL){
 8000c4e:	1cfb      	adds	r3, r7, #3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10b      	bne.n	8000c6e <GPIO_SetPortValue+0x96>
		GPIOx->ODR = (GPIOx->ODR & 0xFF0F) | ( (u8)Copy_u8Value << 4 );
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <GPIO_SetPortValue+0xe0>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	003a      	movs	r2, r7
 8000c60:	8812      	ldrh	r2, [r2, #0]
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	60da      	str	r2, [r3, #12]
}
 8000c6c:	e01e      	b.n	8000cac <GPIO_SetPortValue+0xd4>
	else if(Copy_u8Position == LOW_4PIN_CRH){
 8000c6e:	1cfb      	adds	r3, r7, #3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d10b      	bne.n	8000c8e <GPIO_SetPortValue+0xb6>
		GPIOx->ODR = (GPIOx->ODR & 0xF0FF) | ( (u8)Copy_u8Value << 8 );
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <GPIO_SetPortValue+0xe4>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	003a      	movs	r2, r7
 8000c80:	8812      	ldrh	r2, [r2, #0]
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	0212      	lsls	r2, r2, #8
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	60da      	str	r2, [r3, #12]
}
 8000c8c:	e00e      	b.n	8000cac <GPIO_SetPortValue+0xd4>
	else if(Copy_u8Position == HIGH_4PIN_CRH){
 8000c8e:	1cfb      	adds	r3, r7, #3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d10a      	bne.n	8000cac <GPIO_SetPortValue+0xd4>
		GPIOx->ODR = (GPIOx->ODR & 0x0FFF) | ( (u8)Copy_u8Value << 12 );
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	051b      	lsls	r3, r3, #20
 8000c9c:	0d1b      	lsrs	r3, r3, #20
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	8812      	ldrh	r2, [r2, #0]
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	0312      	lsls	r2, r2, #12
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0000fff0 	.word	0x0000fff0
 8000cb8:	0000ff0f 	.word	0x0000ff0f
 8000cbc:	0000f0ff 	.word	0x0000f0ff

08000cc0 <Delay_ms>:
#include "LCD.h"

u8 IRQ_Flag = 0;

void Delay_ms(u32 Time)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	u32 i = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
	u8  j = 0;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
	for(i=0; i<Time; ++i){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e012      	b.n	8000d00 <Delay_ms+0x40>
		for(j=0; j<255; ++j);
 8000cda:	230b      	movs	r3, #11
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e005      	b.n	8000cf0 <Delay_ms+0x30>
 8000ce4:	220b      	movs	r2, #11
 8000ce6:	18bb      	adds	r3, r7, r2
 8000ce8:	18ba      	adds	r2, r7, r2
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	3201      	adds	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2bff      	cmp	r3, #255	; 0xff
 8000cf8:	d1f4      	bne.n	8000ce4 <Delay_ms+0x24>
	for(i=0; i<Time; ++i){
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3e8      	bcc.n	8000cda <Delay_ms+0x1a>
	}
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <EXTI9_CallBack>:
void EXTI9_CallBack(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <EXTI9_CallBack+0x24>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
	LCD_WriteSentence((u8*)"IRQ EXTI9 is happened _|- ");
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <EXTI9_CallBack+0x28>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fb3e 	bl	800039e <LCD_WriteSentence>
	Delay_ms(1000);
 8000d22:	23fa      	movs	r3, #250	; 0xfa
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff ffca 	bl	8000cc0 <Delay_ms>
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	2000001c 	.word	0x2000001c
 8000d38:	08000e70 	.word	0x08000e70

08000d3c <main>:
int main(void)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
	/* Enable GPIOA Clock */
	RCC_GPIOA_CLK_EN();
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <main+0x70>)
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <main+0x70>)
 8000d48:	2104      	movs	r1, #4
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	619a      	str	r2, [r3, #24]
	/* Enable GPIOB Clock */
	RCC_GPIOB_CLK_EN();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <main+0x70>)
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <main+0x70>)
 8000d54:	2108      	movs	r1, #8
 8000d56:	430a      	orrs	r2, r1
 8000d58:	619a      	str	r2, [r3, #24]
	/* Enble AFIO Clock */
	RCC_AFIO_CLK_EN();
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <main+0x70>)
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <main+0x70>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	430a      	orrs	r2, r1
 8000d64:	619a      	str	r2, [r3, #24]

	LCD_Init();
 8000d66:	f7ff fa59 	bl	800021c <LCD_Init>
	LCD_Clear();
 8000d6a:	f7ff fae4 	bl	8000336 <LCD_Clear>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <main+0x74>)
 8000d72:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d74:	c313      	stmia	r3!, {r0, r1, r4}
	EXTI_CFG.EXTI_Mode = EXTI_RISING_EDGE;
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	731a      	strb	r2, [r3, #12]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_CallBack;
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <main+0x78>)
 8000d80:	611a      	str	r2, [r3, #16]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2201      	movs	r2, #1
 8000d86:	735a      	strb	r2, [r3, #13]

	EXTI_GPIO_Init(&EXTI_CFG);
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fcd6 	bl	800073c <EXTI_GPIO_Init>


	IRQ_Flag = 1;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <main+0x7c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]

	while(1){

		if(IRQ_Flag)
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <main+0x7c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0fb      	beq.n	8000d96 <main+0x5a>
		{
			LCD_Clear();
 8000d9e:	f7ff faca 	bl	8000336 <LCD_Clear>
			IRQ_Flag = 0;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <main+0x7c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000da8:	e7f5      	b.n	8000d96 <main+0x5a>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000
 8000db0:	08000e8c 	.word	0x08000e8c
 8000db4:	08000d11 	.word	0x08000d11
 8000db8:	2000001c 	.word	0x2000001c

08000dbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dc0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dea:	f000 f811 	bl	8000e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff ffa5 	bl	8000d3c <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e00:	08000f20 	.word	0x08000f20
  ldr r2, =_sbss
 8000e04:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e08:	2000005c 	.word	0x2000005c

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>
	...

08000e10 <__libc_init_array>:
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	2600      	movs	r6, #0
 8000e14:	4d0c      	ldr	r5, [pc, #48]	; (8000e48 <__libc_init_array+0x38>)
 8000e16:	4c0d      	ldr	r4, [pc, #52]	; (8000e4c <__libc_init_array+0x3c>)
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	10a4      	asrs	r4, r4, #2
 8000e1c:	42a6      	cmp	r6, r4
 8000e1e:	d109      	bne.n	8000e34 <__libc_init_array+0x24>
 8000e20:	2600      	movs	r6, #0
 8000e22:	f000 f819 	bl	8000e58 <_init>
 8000e26:	4d0a      	ldr	r5, [pc, #40]	; (8000e50 <__libc_init_array+0x40>)
 8000e28:	4c0a      	ldr	r4, [pc, #40]	; (8000e54 <__libc_init_array+0x44>)
 8000e2a:	1b64      	subs	r4, r4, r5
 8000e2c:	10a4      	asrs	r4, r4, #2
 8000e2e:	42a6      	cmp	r6, r4
 8000e30:	d105      	bne.n	8000e3e <__libc_init_array+0x2e>
 8000e32:	bd70      	pop	{r4, r5, r6, pc}
 8000e34:	00b3      	lsls	r3, r6, #2
 8000e36:	58eb      	ldr	r3, [r5, r3]
 8000e38:	4798      	blx	r3
 8000e3a:	3601      	adds	r6, #1
 8000e3c:	e7ee      	b.n	8000e1c <__libc_init_array+0xc>
 8000e3e:	00b3      	lsls	r3, r6, #2
 8000e40:	58eb      	ldr	r3, [r5, r3]
 8000e42:	4798      	blx	r3
 8000e44:	3601      	adds	r6, #1
 8000e46:	e7f2      	b.n	8000e2e <__libc_init_array+0x1e>
 8000e48:	08000f18 	.word	0x08000f18
 8000e4c:	08000f18 	.word	0x08000f18
 8000e50:	08000f18 	.word	0x08000f18
 8000e54:	08000f1c 	.word	0x08000f1c

08000e58 <_init>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5e:	bc08      	pop	{r3}
 8000e60:	469e      	mov	lr, r3
 8000e62:	4770      	bx	lr

08000e64 <_fini>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6a:	bc08      	pop	{r3}
 8000e6c:	469e      	mov	lr, r3
 8000e6e:	4770      	bx	lr

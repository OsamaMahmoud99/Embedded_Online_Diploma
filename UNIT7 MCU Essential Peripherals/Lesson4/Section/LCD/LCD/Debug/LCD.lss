
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000596  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000596  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019f8  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009be  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d5c  00000000  00000000  00002bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000034c  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000079f  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b4f  00000000  00000000  0000440f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00005f5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c0 02 	call	0x580	; 0x580 <main>
  8a:	0c 94 c9 02 	jmp	0x592	; 0x592 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Init>:
		break;
		default:
		return 0x00;
		break;
	}
}
  92:	e0 e6       	ldi	r30, 0x60	; 96
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	91 91       	ld	r25, Z+
  9e:	28 2f       	mov	r18, r24
  a0:	26 95       	lsr	r18
  a2:	26 95       	lsr	r18
  a4:	26 95       	lsr	r18
  a6:	38 2f       	mov	r19, r24
  a8:	37 70       	andi	r19, 0x07	; 7
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	c9 f1       	breq	.+114    	; 0x120 <DIO_Init+0x8e>
  ae:	20 f0       	brcs	.+8      	; 0xb8 <DIO_Init+0x26>
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_Init+0x24>
  b4:	7d c0       	rjmp	.+250    	; 0x1b0 <DIO_Init+0x11e>
  b6:	bf c0       	rjmp	.+382    	; 0x236 <DIO_Init+0x1a4>
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	89 f0       	breq	.+34     	; 0xde <DIO_Init+0x4c>
  bc:	28 f0       	brcs	.+10     	; 0xc8 <DIO_Init+0x36>
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	c9 f0       	breq	.+50     	; 0xf4 <DIO_Init+0x62>
  c2:	23 30       	cpi	r18, 0x03	; 3
  c4:	11 f1       	breq	.+68     	; 0x10a <DIO_Init+0x78>
  c6:	b7 c0       	rjmp	.+366    	; 0x236 <DIO_Init+0x1a4>
  c8:	9a b3       	in	r25, 0x1a	; 26
  ca:	ba 01       	movw	r22, r20
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_Init+0x40>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	3a 95       	dec	r19
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_Init+0x3c>
  d6:	9b 01       	movw	r18, r22
  d8:	29 2b       	or	r18, r25
  da:	2a bb       	out	0x1a, r18	; 26
  dc:	ac c0       	rjmp	.+344    	; 0x236 <DIO_Init+0x1a4>
  de:	97 b3       	in	r25, 0x17	; 23
  e0:	ba 01       	movw	r22, r20
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_Init+0x56>
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	3a 95       	dec	r19
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_Init+0x52>
  ec:	9b 01       	movw	r18, r22
  ee:	29 2b       	or	r18, r25
  f0:	27 bb       	out	0x17, r18	; 23
  f2:	a1 c0       	rjmp	.+322    	; 0x236 <DIO_Init+0x1a4>
  f4:	94 b3       	in	r25, 0x14	; 20
  f6:	ba 01       	movw	r22, r20
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_Init+0x6c>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	3a 95       	dec	r19
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_Init+0x68>
 102:	9b 01       	movw	r18, r22
 104:	29 2b       	or	r18, r25
 106:	24 bb       	out	0x14, r18	; 20
 108:	96 c0       	rjmp	.+300    	; 0x236 <DIO_Init+0x1a4>
 10a:	91 b3       	in	r25, 0x11	; 17
 10c:	ba 01       	movw	r22, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_Init+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	3a 95       	dec	r19
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_Init+0x7e>
 118:	9b 01       	movw	r18, r22
 11a:	29 2b       	or	r18, r25
 11c:	21 bb       	out	0x11, r18	; 17
 11e:	8b c0       	rjmp	.+278    	; 0x236 <DIO_Init+0x1a4>
 120:	21 30       	cpi	r18, 0x01	; 1
 122:	b1 f0       	breq	.+44     	; 0x150 <DIO_Init+0xbe>
 124:	28 f0       	brcs	.+10     	; 0x130 <DIO_Init+0x9e>
 126:	22 30       	cpi	r18, 0x02	; 2
 128:	19 f1       	breq	.+70     	; 0x170 <DIO_Init+0xde>
 12a:	23 30       	cpi	r18, 0x03	; 3
 12c:	89 f1       	breq	.+98     	; 0x190 <DIO_Init+0xfe>
 12e:	83 c0       	rjmp	.+262    	; 0x236 <DIO_Init+0x1a4>
 130:	9a b3       	in	r25, 0x1a	; 26
 132:	ba 01       	movw	r22, r20
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_Init+0xa8>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	3a 95       	dec	r19
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_Init+0xa4>
 13e:	9b 01       	movw	r18, r22
 140:	36 2f       	mov	r19, r22
 142:	30 95       	com	r19
 144:	93 23       	and	r25, r19
 146:	9a bb       	out	0x1a, r25	; 26
 148:	9b b3       	in	r25, 0x1b	; 27
 14a:	29 2b       	or	r18, r25
 14c:	2b bb       	out	0x1b, r18	; 27
 14e:	73 c0       	rjmp	.+230    	; 0x236 <DIO_Init+0x1a4>
 150:	97 b3       	in	r25, 0x17	; 23
 152:	ba 01       	movw	r22, r20
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_Init+0xc8>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	3a 95       	dec	r19
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_Init+0xc4>
 15e:	9b 01       	movw	r18, r22
 160:	36 2f       	mov	r19, r22
 162:	30 95       	com	r19
 164:	93 23       	and	r25, r19
 166:	97 bb       	out	0x17, r25	; 23
 168:	98 b3       	in	r25, 0x18	; 24
 16a:	29 2b       	or	r18, r25
 16c:	28 bb       	out	0x18, r18	; 24
 16e:	63 c0       	rjmp	.+198    	; 0x236 <DIO_Init+0x1a4>
 170:	94 b3       	in	r25, 0x14	; 20
 172:	ba 01       	movw	r22, r20
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_Init+0xe8>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	3a 95       	dec	r19
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_Init+0xe4>
 17e:	9b 01       	movw	r18, r22
 180:	36 2f       	mov	r19, r22
 182:	30 95       	com	r19
 184:	93 23       	and	r25, r19
 186:	94 bb       	out	0x14, r25	; 20
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	29 2b       	or	r18, r25
 18c:	25 bb       	out	0x15, r18	; 21
 18e:	53 c0       	rjmp	.+166    	; 0x236 <DIO_Init+0x1a4>
 190:	91 b3       	in	r25, 0x11	; 17
 192:	ba 01       	movw	r22, r20
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_Init+0x108>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	3a 95       	dec	r19
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_Init+0x104>
 19e:	9b 01       	movw	r18, r22
 1a0:	36 2f       	mov	r19, r22
 1a2:	30 95       	com	r19
 1a4:	93 23       	and	r25, r19
 1a6:	91 bb       	out	0x11, r25	; 17
 1a8:	92 b3       	in	r25, 0x12	; 18
 1aa:	29 2b       	or	r18, r25
 1ac:	22 bb       	out	0x12, r18	; 18
 1ae:	43 c0       	rjmp	.+134    	; 0x236 <DIO_Init+0x1a4>
 1b0:	21 30       	cpi	r18, 0x01	; 1
 1b2:	a9 f0       	breq	.+42     	; 0x1de <DIO_Init+0x14c>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <DIO_Init+0x12e>
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	09 f1       	breq	.+66     	; 0x1fc <DIO_Init+0x16a>
 1ba:	23 30       	cpi	r18, 0x03	; 3
 1bc:	71 f1       	breq	.+92     	; 0x21a <DIO_Init+0x188>
 1be:	3b c0       	rjmp	.+118    	; 0x236 <DIO_Init+0x1a4>
 1c0:	9a b3       	in	r25, 0x1a	; 26
 1c2:	ba 01       	movw	r22, r20
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_Init+0x138>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	3a 95       	dec	r19
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_Init+0x134>
 1ce:	9b 01       	movw	r18, r22
 1d0:	20 95       	com	r18
 1d2:	92 23       	and	r25, r18
 1d4:	9a bb       	out	0x1a, r25	; 26
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	29 23       	and	r18, r25
 1da:	2b bb       	out	0x1b, r18	; 27
 1dc:	2c c0       	rjmp	.+88     	; 0x236 <DIO_Init+0x1a4>
 1de:	97 b3       	in	r25, 0x17	; 23
 1e0:	ba 01       	movw	r22, r20
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_Init+0x156>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	3a 95       	dec	r19
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_Init+0x152>
 1ec:	9b 01       	movw	r18, r22
 1ee:	20 95       	com	r18
 1f0:	92 23       	and	r25, r18
 1f2:	97 bb       	out	0x17, r25	; 23
 1f4:	98 b3       	in	r25, 0x18	; 24
 1f6:	29 23       	and	r18, r25
 1f8:	28 bb       	out	0x18, r18	; 24
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <DIO_Init+0x1a4>
 1fc:	94 b3       	in	r25, 0x14	; 20
 1fe:	ba 01       	movw	r22, r20
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_Init+0x174>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	3a 95       	dec	r19
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_Init+0x170>
 20a:	9b 01       	movw	r18, r22
 20c:	20 95       	com	r18
 20e:	92 23       	and	r25, r18
 210:	94 bb       	out	0x14, r25	; 20
 212:	95 b3       	in	r25, 0x15	; 21
 214:	29 23       	and	r18, r25
 216:	25 bb       	out	0x15, r18	; 21
 218:	0e c0       	rjmp	.+28     	; 0x236 <DIO_Init+0x1a4>
 21a:	91 b3       	in	r25, 0x11	; 17
 21c:	ba 01       	movw	r22, r20
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_Init+0x192>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	3a 95       	dec	r19
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_Init+0x18e>
 228:	9b 01       	movw	r18, r22
 22a:	20 95       	com	r18
 22c:	92 23       	and	r25, r18
 22e:	91 bb       	out	0x11, r25	; 17
 230:	92 b3       	in	r25, 0x12	; 18
 232:	29 23       	and	r18, r25
 234:	22 bb       	out	0x12, r18	; 18
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 32       	cpi	r24, 0x20	; 32
 23a:	09 f0       	breq	.+2      	; 0x23e <DIO_Init+0x1ac>
 23c:	2f cf       	rjmp	.-418    	; 0x9c <DIO_Init+0xa>
 23e:	08 95       	ret

00000240 <DIO_WriteBitsInPort>:
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	81 f0       	breq	.+32     	; 0x264 <DIO_WriteBitsInPort+0x24>
 244:	28 f0       	brcs	.+10     	; 0x250 <DIO_WriteBitsInPort+0x10>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	b9 f0       	breq	.+46     	; 0x278 <DIO_WriteBitsInPort+0x38>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	f9 f0       	breq	.+62     	; 0x28c <DIO_WriteBitsInPort+0x4c>
 24e:	08 95       	ret
 250:	8b b3       	in	r24, 0x1b	; 27
 252:	94 2f       	mov	r25, r20
 254:	90 95       	com	r25
 256:	89 23       	and	r24, r25
 258:	8b bb       	out	0x1b, r24	; 27
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	64 23       	and	r22, r20
 25e:	68 2b       	or	r22, r24
 260:	6b bb       	out	0x1b, r22	; 27
 262:	08 95       	ret
 264:	88 b3       	in	r24, 0x18	; 24
 266:	94 2f       	mov	r25, r20
 268:	90 95       	com	r25
 26a:	89 23       	and	r24, r25
 26c:	88 bb       	out	0x18, r24	; 24
 26e:	88 b3       	in	r24, 0x18	; 24
 270:	64 23       	and	r22, r20
 272:	68 2b       	or	r22, r24
 274:	68 bb       	out	0x18, r22	; 24
 276:	08 95       	ret
 278:	85 b3       	in	r24, 0x15	; 21
 27a:	94 2f       	mov	r25, r20
 27c:	90 95       	com	r25
 27e:	89 23       	and	r24, r25
 280:	85 bb       	out	0x15, r24	; 21
 282:	85 b3       	in	r24, 0x15	; 21
 284:	64 23       	and	r22, r20
 286:	68 2b       	or	r22, r24
 288:	65 bb       	out	0x15, r22	; 21
 28a:	08 95       	ret
 28c:	82 b3       	in	r24, 0x12	; 18
 28e:	94 2f       	mov	r25, r20
 290:	90 95       	com	r25
 292:	89 23       	and	r24, r25
 294:	82 bb       	out	0x12, r24	; 18
 296:	82 b3       	in	r24, 0x12	; 18
 298:	64 23       	and	r22, r20
 29a:	68 2b       	or	r22, r24
 29c:	62 bb       	out	0x12, r22	; 18
 29e:	08 95       	ret

000002a0 <DIO_WritePin>:
void DIO_WritePin(PinNum_type Pin,VoltageLevel_type Value)
{
	u8 PinNum_InPort=Pin%8;
 2a0:	98 2f       	mov	r25, r24
 2a2:	97 70       	andi	r25, 0x07	; 7
	Port_type Port=Pin/8;
	switch (Port)
 2a4:	86 95       	lsr	r24
 2a6:	86 95       	lsr	r24
 2a8:	86 95       	lsr	r24
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	21 f1       	breq	.+72     	; 0x2f6 <DIO_WritePin+0x56>
 2ae:	30 f0       	brcs	.+12     	; 0x2bc <DIO_WritePin+0x1c>
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	f1 f1       	breq	.+124    	; 0x330 <DIO_WritePin+0x90>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	09 f4       	brne	.+2      	; 0x2ba <DIO_WritePin+0x1a>
 2b8:	58 c0       	rjmp	.+176    	; 0x36a <DIO_WritePin+0xca>
 2ba:	08 95       	ret
	{
		case PA:
		if (HIGH==Value)
 2bc:	61 30       	cpi	r22, 0x01	; 1
 2be:	69 f4       	brne	.+26     	; 0x2da <DIO_WritePin+0x3a>
		{
			SET_BIT(PORTA,PinNum_InPort);
 2c0:	4b b3       	in	r20, 0x1b	; 27
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_WritePin+0x2e>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	9a 95       	dec	r25
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_WritePin+0x2a>
 2d2:	cb 01       	movw	r24, r22
 2d4:	84 2b       	or	r24, r20
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinNum_InPort);
 2da:	4b b3       	in	r20, 0x1b	; 27
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	b9 01       	movw	r22, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_WritePin+0x48>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	9a 95       	dec	r25
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_WritePin+0x44>
 2ec:	cb 01       	movw	r24, r22
 2ee:	80 95       	com	r24
 2f0:	84 23       	and	r24, r20
 2f2:	8b bb       	out	0x1b, r24	; 27
 2f4:	08 95       	ret
		}
		break;
		case PB:
		if (HIGH==Value)
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	69 f4       	brne	.+26     	; 0x314 <DIO_WritePin+0x74>
		{
			SET_BIT(PORTB,PinNum_InPort);
 2fa:	48 b3       	in	r20, 0x18	; 24
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	b9 01       	movw	r22, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_WritePin+0x68>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	9a 95       	dec	r25
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_WritePin+0x64>
 30c:	cb 01       	movw	r24, r22
 30e:	84 2b       	or	r24, r20
 310:	88 bb       	out	0x18, r24	; 24
 312:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,PinNum_InPort);
 314:	48 b3       	in	r20, 0x18	; 24
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_WritePin+0x82>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	9a 95       	dec	r25
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_WritePin+0x7e>
 326:	cb 01       	movw	r24, r22
 328:	80 95       	com	r24
 32a:	84 23       	and	r24, r20
 32c:	88 bb       	out	0x18, r24	; 24
 32e:	08 95       	ret
		}
		break;
		case PC:
		if (HIGH==Value)
 330:	61 30       	cpi	r22, 0x01	; 1
 332:	69 f4       	brne	.+26     	; 0x34e <DIO_WritePin+0xae>
		{
			SET_BIT(PORTC,PinNum_InPort);
 334:	45 b3       	in	r20, 0x15	; 21
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_WritePin+0xa2>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	9a 95       	dec	r25
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_WritePin+0x9e>
 346:	cb 01       	movw	r24, r22
 348:	84 2b       	or	r24, r20
 34a:	85 bb       	out	0x15, r24	; 21
 34c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,PinNum_InPort);
 34e:	45 b3       	in	r20, 0x15	; 21
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	b9 01       	movw	r22, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_WritePin+0xbc>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	9a 95       	dec	r25
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_WritePin+0xb8>
 360:	cb 01       	movw	r24, r22
 362:	80 95       	com	r24
 364:	84 23       	and	r24, r20
 366:	85 bb       	out	0x15, r24	; 21
 368:	08 95       	ret
		}
		break;
		case PD:
		if (HIGH==Value)
 36a:	61 30       	cpi	r22, 0x01	; 1
 36c:	69 f4       	brne	.+26     	; 0x388 <DIO_WritePin+0xe8>
		{
			SET_BIT(PORTD,PinNum_InPort);
 36e:	42 b3       	in	r20, 0x12	; 18
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	b9 01       	movw	r22, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_WritePin+0xdc>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	9a 95       	dec	r25
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_WritePin+0xd8>
 380:	cb 01       	movw	r24, r22
 382:	84 2b       	or	r24, r20
 384:	82 bb       	out	0x12, r24	; 18
 386:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,PinNum_InPort);
 388:	42 b3       	in	r20, 0x12	; 18
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	b9 01       	movw	r22, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_WritePin+0xf6>
 392:	66 0f       	add	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	9a 95       	dec	r25
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_WritePin+0xf2>
 39a:	cb 01       	movw	r24, r22
 39c:	80 95       	com	r24
 39e:	84 23       	and	r24, r20
 3a0:	82 bb       	out	0x12, r24	; 18
 3a2:	08 95       	ret

000003a4 <LCD_WriteCommand>:
#endif

/*************************** service functions*****************************************************/
void LCD_WriteChar(u8 character)
{
	LCD_WriteData(character);
 3a4:	cf 93       	push	r28
 3a6:	c8 2f       	mov	r28, r24
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	89 e0       	ldi	r24, 0x09	; 9
 3ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	8a e0       	ldi	r24, 0x0A	; 10
 3b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 3b8:	40 ef       	ldi	r20, 0xF0	; 240
 3ba:	6c 2f       	mov	r22, r28
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 20 01 	call	0x240	; 0x240 <DIO_WriteBitsInPort>
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	8b e0       	ldi	r24, 0x0B	; 11
 3c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 3ca:	83 ef       	ldi	r24, 0xF3	; 243
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_WriteCommand+0x2a>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_WriteCommand+0x30>
 3d4:	00 00       	nop
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	8b e0       	ldi	r24, 0x0B	; 11
 3da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 3de:	83 ef       	ldi	r24, 0xF3	; 243
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCD_WriteCommand+0x3e>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <LCD_WriteCommand+0x44>
 3e8:	00 00       	nop
 3ea:	6c 2f       	mov	r22, r28
 3ec:	62 95       	swap	r22
 3ee:	60 7f       	andi	r22, 0xF0	; 240
 3f0:	40 ef       	ldi	r20, 0xF0	; 240
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 20 01 	call	0x240	; 0x240 <DIO_WriteBitsInPort>
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	8b e0       	ldi	r24, 0x0B	; 11
 3fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 400:	83 ef       	ldi	r24, 0xF3	; 243
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	8b e0       	ldi	r24, 0x0B	; 11
 410:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 414:	83 ef       	ldi	r24, 0xF3	; 243
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <LCD_WriteData>:
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	89 e0       	ldi	r24, 0x09	; 9
 42c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	8a e0       	ldi	r24, 0x0A	; 10
 434:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 438:	40 ef       	ldi	r20, 0xF0	; 240
 43a:	6c 2f       	mov	r22, r28
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 20 01 	call	0x240	; 0x240 <DIO_WriteBitsInPort>
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	8b e0       	ldi	r24, 0x0B	; 11
 446:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 44a:	83 ef       	ldi	r24, 0xF3	; 243
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_WriteData+0x2a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_WriteData+0x30>
 454:	00 00       	nop
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	8b e0       	ldi	r24, 0x0B	; 11
 45a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 45e:	83 ef       	ldi	r24, 0xF3	; 243
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <LCD_WriteData+0x3e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <LCD_WriteData+0x44>
 468:	00 00       	nop
 46a:	6c 2f       	mov	r22, r28
 46c:	62 95       	swap	r22
 46e:	60 7f       	andi	r22, 0xF0	; 240
 470:	40 ef       	ldi	r20, 0xF0	; 240
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 20 01 	call	0x240	; 0x240 <DIO_WriteBitsInPort>
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	8b e0       	ldi	r24, 0x0B	; 11
 47c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 480:	83 ef       	ldi	r24, 0xF3	; 243
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <LCD_WriteData+0x60>
 488:	00 c0       	rjmp	.+0      	; 0x48a <LCD_WriteData+0x66>
 48a:	00 00       	nop
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	8b e0       	ldi	r24, 0x0B	; 11
 490:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_WritePin>
 494:	83 ef       	ldi	r24, 0xF3	; 243
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_WriteData+0x74>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_WriteData+0x7a>
 49e:	00 00       	nop
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <LCD_Init>:
 4a4:	83 ed       	ldi	r24, 0xD3	; 211
 4a6:	90 e3       	ldi	r25, 0x30	; 48
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_Init+0x4>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_Init+0xa>
 4ae:	00 00       	nop
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 4b6:	89 ef       	ldi	r24, 0xF9	; 249
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_Init+0x16>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_Init+0x1c>
 4c0:	00 00       	nop
 4c2:	88 e2       	ldi	r24, 0x28	; 40
 4c4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 4c8:	89 ef       	ldi	r24, 0xF9	; 249
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_Init+0x28>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_Init+0x2e>
 4d2:	00 00       	nop
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 4da:	89 ef       	ldi	r24, 0xF9	; 249
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_Init+0x3a>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <LCD_Init+0x40>
 4e4:	00 00       	nop
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 4ec:	87 e8       	ldi	r24, 0x87	; 135
 4ee:	93 e1       	ldi	r25, 0x13	; 19
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCD_Init+0x4c>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <LCD_Init+0x52>
 4f6:	00 00       	nop
 4f8:	86 e0       	ldi	r24, 0x06	; 6
 4fa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 4fe:	80 e8       	ldi	r24, 0x80	; 128
 500:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 504:	08 95       	ret

00000506 <LCD_GoTo>:
}

void LCD_GoTo(u8 Line, u8 x)
{
	if(0 == Line)
 506:	81 11       	cpse	r24, r1
 508:	07 c0       	rjmp	.+14     	; 0x518 <LCD_GoTo+0x12>
	{
		if ( x <=15)
 50a:	60 31       	cpi	r22, 0x10	; 16
 50c:	68 f4       	brcc	.+26     	; 0x528 <LCD_GoTo+0x22>
		{
			LCD_WriteCommand(0x80 + x);
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	86 0f       	add	r24, r22
 512:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 516:	08 95       	ret
		}
	}
	else if (1 == Line)
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	31 f4       	brne	.+12     	; 0x528 <LCD_GoTo+0x22>
	{
		if ( x <=15)
 51c:	60 31       	cpi	r22, 0x10	; 16
 51e:	20 f4       	brcc	.+8      	; 0x528 <LCD_GoTo+0x22>
		{
			LCD_WriteCommand(0xC0 + x);
 520:	80 ec       	ldi	r24, 0xC0	; 192
 522:	86 0f       	add	r24, r22
 524:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 528:	08 95       	ret

0000052a <LCD_Clear>:
	}
}

void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_WriteCommand>
 530:	08 95       	ret

00000532 <LCD_WriteSentence>:
}

void LCD_WriteSentence(u8 *PtrSentance)
{
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	8c 01       	movw	r16, r24
	u8 Count=0;
 53c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(*PtrSentance > 0){
 53e:	16 c0       	rjmp	.+44     	; 0x56c <LCD_WriteSentence+0x3a>
		
		Count++;
 540:	d1 e0       	ldi	r29, 0x01	; 1
 542:	dc 0f       	add	r29, r28
#endif

/*************************** service functions*****************************************************/
void LCD_WriteChar(u8 character)
{
	LCD_WriteData(character);
 544:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WriteData>
	
	while(*PtrSentance > 0){
		
		Count++;
		LCD_WriteChar(*PtrSentance++);
		if(Count == 16){       // go to the second line
 548:	d0 31       	cpi	r29, 0x10	; 16
 54a:	29 f4       	brne	.+10     	; 0x556 <LCD_WriteSentence+0x24>
			LCD_GoTo(1 , 0);   // line 1 position 0
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 83 02 	call	0x506	; 0x506 <LCD_GoTo>
 554:	0a c0       	rjmp	.+20     	; 0x56a <LCD_WriteSentence+0x38>
		}
		else if(Count == 32  || Count == 33){
 556:	cf 51       	subi	r28, 0x1F	; 31
 558:	c2 30       	cpi	r28, 0x02	; 2
 55a:	38 f4       	brcc	.+14     	; 0x56a <LCD_WriteSentence+0x38>
			LCD_Clear();
 55c:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_Clear>
			LCD_GoTo(0 , 0);   // line 0 position 0
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 83 02 	call	0x506	; 0x506 <LCD_GoTo>
			Count = 0;
 568:	d0 e0       	ldi	r29, 0x00	; 0
 56a:	cd 2f       	mov	r28, r29

void LCD_WriteSentence(u8 *PtrSentance)
{
	u8 Count=0;
	
	while(*PtrSentance > 0){
 56c:	f8 01       	movw	r30, r16
 56e:	81 91       	ld	r24, Z+
 570:	8f 01       	movw	r16, r30
 572:	81 11       	cpse	r24, r1
 574:	e5 cf       	rjmp	.-54     	; 0x540 <LCD_WriteSentence+0xe>
			LCD_GoTo(0 , 0);   // line 0 position 0
			Count = 0;
		}
	}

}
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	08 95       	ret

00000580 <main>:
#include "LCD_interface.h"


int main(void)
{
	DIO_Init();   // Pins defined as Output or Input from DIO_config.c
 580:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Init>
	LCD_Init();
 584:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_Init>
    
	LCD_WriteSentence("Learn In depth");
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 99 02 	call	0x532	; 0x532 <LCD_WriteSentence>
 590:	ff cf       	rjmp	.-2      	; 0x590 <main+0x10>

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>


Toggle3Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000612  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000553  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f2  00000000  00000000  00000d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030a  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009f  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000134d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay>:

/* Base Address of DDRD , POTTD */
#define GPIO_PORTD   (*(volatile unsigned char *)0x32)
#define GPIO_DDRD    (*(volatile unsigned char *)0x31)

void Delay(unsigned int Time){
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
	unsigned int i = 0;
	for(i=0; i< ((F_CPU/(12000))*Time); ++i){
  70:	9c 01       	movw	r18, r24
  72:	aa e9       	ldi	r26, 0x9A	; 154
  74:	b2 e0       	ldi	r27, 0x02	; 2
  76:	0e 94 81 00 	call	0x102	; 0x102 <__umulhisi3>
  7a:	8b 01       	movw	r16, r22
  7c:	9c 01       	movw	r18, r24
  7e:	67 2b       	or	r22, r23
  80:	68 2b       	or	r22, r24
  82:	69 2b       	or	r22, r25
  84:	61 f0       	breq	.+24     	; 0x9e <Delay+0x32>
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
         __asm("NOP");
  8a:	00 00       	nop
#define GPIO_PORTD   (*(volatile unsigned char *)0x32)
#define GPIO_DDRD    (*(volatile unsigned char *)0x31)

void Delay(unsigned int Time){
	unsigned int i = 0;
	for(i=0; i< ((F_CPU/(12000))*Time); ++i){
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	ac 01       	movw	r20, r24
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	40 17       	cp	r20, r16
  96:	51 07       	cpc	r21, r17
  98:	62 07       	cpc	r22, r18
  9a:	73 07       	cpc	r23, r19
  9c:	b0 f3       	brcs	.-20     	; 0x8a <Delay+0x1e>
         __asm("NOP");
	}
}
  9e:	1f 91       	pop	r17
  a0:	0f 91       	pop	r16
  a2:	08 95       	ret

000000a4 <main>:


int main(void){
	
    /* PortD pin 5 , 6 , 7 Output(Led) */
	GPIO_DDRD |= 1 << 5;
  a4:	8d 9a       	sbi	0x11, 5	; 17
	GPIO_DDRD |= 1 << 6;
  a6:	8e 9a       	sbi	0x11, 6	; 17
	GPIO_DDRD |= 1 << 7;
  a8:	8f 9a       	sbi	0x11, 7	; 17
	
	/* PortD pin 4 Output(Buzzer) */
	GPIO_DDRD |= 1 << 4;
  aa:	8c 9a       	sbi	0x11, 4	; 17
	
    while (1) {
		
		for (int i=5; i<=7; ++i){
			GPIO_PORTD |= 1 << i;
  ac:	ee 24       	eor	r14, r14
  ae:	e3 94       	inc	r14
  b0:	f1 2c       	mov	r15, r1
	/* PortD pin 4 Output(Buzzer) */
	GPIO_DDRD |= 1 << 4;
	
    while (1) {
		
		for (int i=5; i<=7; ++i){
  b2:	05 e0       	ldi	r16, 0x05	; 5
  b4:	10 e0       	ldi	r17, 0x00	; 0
			GPIO_PORTD |= 1 << i;
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	e7 01       	movw	r28, r14
  ba:	00 2e       	mov	r0, r16
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x1e>
  be:	cc 0f       	add	r28, r28
  c0:	dd 1f       	adc	r29, r29
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x1a>
  c6:	8c 2b       	or	r24, r28
  c8:	82 bb       	out	0x12, r24	; 18
			Delay(95);
  ca:	8f e5       	ldi	r24, 0x5F	; 95
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <Delay>
			//_delay_ms(3000);
			
			GPIO_PORTD &= ~(1 << i);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	c0 95       	com	r28
  d6:	c8 23       	and	r28, r24
  d8:	c2 bb       	out	0x12, r28	; 18
			Delay(95);
  da:	8f e5       	ldi	r24, 0x5F	; 95
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 36 00 	call	0x6c	; 0x6c <Delay>
	/* PortD pin 4 Output(Buzzer) */
	GPIO_DDRD |= 1 << 4;
	
    while (1) {
		
		for (int i=5; i<=7; ++i){
  e2:	0f 5f       	subi	r16, 0xFF	; 255
  e4:	1f 4f       	sbci	r17, 0xFF	; 255
  e6:	08 30       	cpi	r16, 0x08	; 8
  e8:	11 05       	cpc	r17, r1
  ea:	29 f7       	brne	.-54     	; 0xb6 <main+0x12>
			
			GPIO_PORTD &= ~(1 << i);
			Delay(95);
			//_delay_ms(3000);
		}
		GPIO_PORTD |= 1 << 4;
  ec:	94 9a       	sbi	0x12, 4	; 18
		Delay(95);
  ee:	8f e5       	ldi	r24, 0x5F	; 95
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <Delay>
		//_delay_ms(3000);
		GPIO_PORTD &= ~(1 << 4);
  f6:	94 98       	cbi	0x12, 4	; 18
		Delay(95);
  f8:	8f e5       	ldi	r24, 0x5F	; 95
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 36 00 	call	0x6c	; 0x6c <Delay>
		//_delay_ms(3000);
    }
 100:	d8 cf       	rjmp	.-80     	; 0xb2 <main+0xe>

00000102 <__umulhisi3>:
 102:	a2 9f       	mul	r26, r18
 104:	b0 01       	movw	r22, r0
 106:	b3 9f       	mul	r27, r19
 108:	c0 01       	movw	r24, r0
 10a:	a3 9f       	mul	r26, r19
 10c:	70 0d       	add	r23, r0
 10e:	81 1d       	adc	r24, r1
 110:	11 24       	eor	r1, r1
 112:	91 1d       	adc	r25, r1
 114:	b2 9f       	mul	r27, r18
 116:	70 0d       	add	r23, r0
 118:	81 1d       	adc	r24, r1
 11a:	11 24       	eor	r1, r1
 11c:	91 1d       	adc	r25, r1
 11e:	08 95       	ret

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
